   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"printf.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "printf.c"
  20              		.section	.text._out_buffer,"ax",%progbits
  21              		.align	1
  22              		.p2align 2,,3
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_out_buffer:
  28              	.LVL0:
  29              	.LFB0:
   1:printf.c      **** ///////////////////////////////////////////////////////////////////////////////
   2:printf.c      **** // \author (c) Marco Paland (info@paland.com)
   3:printf.c      **** //             2014-2019, PALANDesign Hannover, Germany
   4:printf.c      **** //
   5:printf.c      **** // \license The MIT License (MIT)
   6:printf.c      **** //
   7:printf.c      **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   8:printf.c      **** // of this software and associated documentation files (the "Software"), to deal
   9:printf.c      **** // in the Software without restriction, including without limitation the rights
  10:printf.c      **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:printf.c      **** // copies of the Software, and to permit persons to whom the Software is
  12:printf.c      **** // furnished to do so, subject to the following conditions:
  13:printf.c      **** //
  14:printf.c      **** // The above copyright notice and this permission notice shall be included in
  15:printf.c      **** // all copies or substantial portions of the Software.
  16:printf.c      **** //
  17:printf.c      **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:printf.c      **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:printf.c      **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:printf.c      **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:printf.c      **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:printf.c      **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:printf.c      **** // THE SOFTWARE.
  24:printf.c      **** //
  25:printf.c      **** // \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on
  26:printf.c      **** //        embedded systems with a very limited resources. These routines are thread
  27:printf.c      **** //        safe and reentrant!
  28:printf.c      **** //        Use this instead of the bloated standard/newlib printf cause these use
  29:printf.c      **** //        malloc for printf (and may not be thread safe).
  30:printf.c      **** //
  31:printf.c      **** ///////////////////////////////////////////////////////////////////////////////
  32:printf.c      **** 
  33:printf.c      **** #include <stdbool.h>
  34:printf.c      **** #include <stdint.h>
  35:printf.c      **** 
  36:printf.c      **** #include "printf.h"
  37:printf.c      **** 
  38:printf.c      **** 
  39:printf.c      **** // define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
  40:printf.c      **** // printf_config.h header file
  41:printf.c      **** // default: undefined
  42:printf.c      **** #ifdef PRINTF_INCLUDE_CONFIG_H
  43:printf.c      **** #include "printf_config.h"
  44:printf.c      **** #endif
  45:printf.c      **** 
  46:printf.c      **** 
  47:printf.c      **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  48:printf.c      **** // numeric number including padded zeros (dynamically created on stack)
  49:printf.c      **** // default: 32 byte
  50:printf.c      **** #ifndef PRINTF_NTOA_BUFFER_SIZE
  51:printf.c      **** #define PRINTF_NTOA_BUFFER_SIZE    32U
  52:printf.c      **** #endif
  53:printf.c      **** 
  54:printf.c      **** // 'ftoa' conversion buffer size, this must be big enough to hold one converted
  55:printf.c      **** // float number including padded zeros (dynamically created on stack)
  56:printf.c      **** // default: 32 byte
  57:printf.c      **** #ifndef PRINTF_FTOA_BUFFER_SIZE
  58:printf.c      **** #define PRINTF_FTOA_BUFFER_SIZE    32U
  59:printf.c      **** #endif
  60:printf.c      **** 
  61:printf.c      **** // support for the floating point type (%f)
  62:printf.c      **** // default: activated
  63:printf.c      **** #ifndef PRINTF_DISABLE_SUPPORT_FLOAT
  64:printf.c      **** #define PRINTF_SUPPORT_FLOAT
  65:printf.c      **** #endif
  66:printf.c      **** 
  67:printf.c      **** // support for the long long types (%llu or %p)
  68:printf.c      **** // default: activated
  69:printf.c      **** #ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
  70:printf.c      **** #define PRINTF_SUPPORT_LONG_LONG
  71:printf.c      **** #endif
  72:printf.c      **** 
  73:printf.c      **** // support for the ptrdiff_t type (%t)
  74:printf.c      **** // ptrdiff_t is normally defined in <stddef.h> as long or long long type
  75:printf.c      **** // default: activated
  76:printf.c      **** #ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
  77:printf.c      **** #define PRINTF_SUPPORT_PTRDIFF_T
  78:printf.c      **** #endif
  79:printf.c      **** 
  80:printf.c      **** ///////////////////////////////////////////////////////////////////////////////
  81:printf.c      **** 
  82:printf.c      **** // internal flag definitions
  83:printf.c      **** #define FLAGS_ZEROPAD   (1U <<  0U)
  84:printf.c      **** #define FLAGS_LEFT      (1U <<  1U)
  85:printf.c      **** #define FLAGS_PLUS      (1U <<  2U)
  86:printf.c      **** #define FLAGS_SPACE     (1U <<  3U)
  87:printf.c      **** #define FLAGS_HASH      (1U <<  4U)
  88:printf.c      **** #define FLAGS_UPPERCASE (1U <<  5U)
  89:printf.c      **** #define FLAGS_CHAR      (1U <<  6U)
  90:printf.c      **** #define FLAGS_SHORT     (1U <<  7U)
  91:printf.c      **** #define FLAGS_LONG      (1U <<  8U)
  92:printf.c      **** #define FLAGS_LONG_LONG (1U <<  9U)
  93:printf.c      **** #define FLAGS_PRECISION (1U << 10U)
  94:printf.c      **** 
  95:printf.c      **** 
  96:printf.c      **** // output function type
  97:printf.c      **** typedef void (*out_fct_type)(char character, void* buffer, size_t idx, size_t maxlen);
  98:printf.c      **** 
  99:printf.c      **** 
 100:printf.c      **** // wrapper (used as buffer) for output function type
 101:printf.c      **** typedef struct {
 102:printf.c      ****   void  (*fct)(char character, void* arg);
 103:printf.c      ****   void* arg;
 104:printf.c      **** } out_fct_wrap_type;
 105:printf.c      **** 
 106:printf.c      **** 
 107:printf.c      **** // internal buffer output
 108:printf.c      **** static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
 109:printf.c      **** {
  30              		.loc 1 109 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 110:printf.c      ****   if (idx < maxlen) {
  35              		.loc 1 110 3 view .LVU1
  36              		.loc 1 110 6 is_stmt 0 view .LVU2
  37 0000 9A42     		cmp	r2, r3
 111:printf.c      ****     ((char*)buffer)[idx] = character;
  38              		.loc 1 111 5 is_stmt 1 view .LVU3
  39              		.loc 1 111 26 is_stmt 0 view .LVU4
  40 0002 38BF     		it	cc
  41 0004 8854     		strbcc	r0, [r1, r2]
 112:printf.c      ****   }
 113:printf.c      **** }
  42              		.loc 1 113 1 view .LVU5
  43 0006 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE0:
  47              		.section	.text._out_null,"ax",%progbits
  48              		.align	1
  49              		.p2align 2,,3
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	_out_null:
  55              	.LVL1:
  56              	.LFB1:
 114:printf.c      **** 
 115:printf.c      **** 
 116:printf.c      **** // internal null output
 117:printf.c      **** static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
 118:printf.c      **** {
  57              		.loc 1 118 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 119:printf.c      ****   (void)character; (void)buffer; (void)idx; (void)maxlen;
  62              		.loc 1 119 3 view .LVU7
  63              		.loc 1 119 20 view .LVU8
  64              		.loc 1 119 34 view .LVU9
  65              		.loc 1 119 45 view .LVU10
 120:printf.c      **** }
  66              		.loc 1 120 1 is_stmt 0 view .LVU11
  67 0000 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE1:
  71 0002 00BF     		.section	.text._ntoa_format,"ax",%progbits
  72              		.align	1
  73              		.p2align 2,,3
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  78              	_ntoa_format:
  79              	.LVL2:
  80              	.LFB7:
 121:printf.c      **** 
 122:printf.c      **** 
 123:printf.c      **** // internal _putchar wrapper
 124:printf.c      **** static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
 125:printf.c      **** {
 126:printf.c      ****   (void)buffer; (void)idx; (void)maxlen;
 127:printf.c      ****   if (character) {
 128:printf.c      ****     _putchar(character);
 129:printf.c      ****   }
 130:printf.c      **** }
 131:printf.c      **** 
 132:printf.c      **** 
 133:printf.c      **** // internal output function wrapper
 134:printf.c      **** static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
 135:printf.c      **** {
 136:printf.c      ****   (void)idx; (void)maxlen;
 137:printf.c      ****   if (character) {
 138:printf.c      ****     // buffer is the output fct pointer
 139:printf.c      ****     ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 140:printf.c      ****   }
 141:printf.c      **** }
 142:printf.c      **** 
 143:printf.c      **** 
 144:printf.c      **** // internal secure strlen
 145:printf.c      **** // \return The length of the string (excluding the terminating 0) limited by 'maxsize'
 146:printf.c      **** static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
 147:printf.c      **** {
 148:printf.c      ****   const char* s;
 149:printf.c      ****   for (s = str; *s && maxsize--; ++s);
 150:printf.c      ****   return (unsigned int)(s - str);
 151:printf.c      **** }
 152:printf.c      **** 
 153:printf.c      **** 
 154:printf.c      **** // internal test if char is a digit (0-9)
 155:printf.c      **** // \return true if char is a digit
 156:printf.c      **** static inline bool _is_digit(char ch)
 157:printf.c      **** {
 158:printf.c      ****   return (ch >= '0') && (ch <= '9');
 159:printf.c      **** }
 160:printf.c      **** 
 161:printf.c      **** 
 162:printf.c      **** // internal ASCII string to unsigned int conversion
 163:printf.c      **** static unsigned int _atoi(const char** str)
 164:printf.c      **** {
 165:printf.c      ****   unsigned int i = 0U;
 166:printf.c      ****   while (_is_digit(**str)) {
 167:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 168:printf.c      ****   }
 169:printf.c      ****   return i;
 170:printf.c      **** }
 171:printf.c      **** 
 172:printf.c      **** 
 173:printf.c      **** // internal itoa format
 174:printf.c      **** static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, si
 175:printf.c      **** {
  81              		.loc 1 175 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 28, pretend = 0, frame = 16
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		.loc 1 175 1 is_stmt 0 view .LVU13
  86 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  87              		.cfi_def_cfa_offset 36
  88              		.cfi_offset 4, -36
  89              		.cfi_offset 5, -32
  90              		.cfi_offset 6, -28
  91              		.cfi_offset 7, -24
  92              		.cfi_offset 8, -20
  93              		.cfi_offset 9, -16
  94              		.cfi_offset 10, -12
  95              		.cfi_offset 11, -8
  96              		.cfi_offset 14, -4
  97 0004 85B0     		sub	sp, sp, #20
  98              		.cfi_def_cfa_offset 56
  99              		.loc 1 175 1 view .LVU14
 100 0006 0746     		mov	r7, r0
 101 0008 1498     		ldr	r0, [sp, #80]
 102              	.LVL3:
 103              		.loc 1 175 1 view .LVU15
 104 000a DDF838B0 		ldr	fp, [sp, #56]
 105 000e 0F9C     		ldr	r4, [sp, #60]
 106 0010 9DF84060 		ldrb	r6, [sp, #64]	@ zero_extendqisi2
 107 0014 9946     		mov	r9, r3
 176:printf.c      ****   const size_t start_idx = idx;
 177:printf.c      **** 
 178:printf.c      ****   // pad leading zeros
 179:printf.c      ****   if (!(flags & FLAGS_LEFT)) {
 108              		.loc 1 179 6 view .LVU16
 109 0016 10F00203 		ands	r3, r0, #2
 110              	.LVL4:
 175:printf.c      ****   const size_t start_idx = idx;
 111              		.loc 1 175 1 view .LVU17
 112 001a 8846     		mov	r8, r1
 176:printf.c      ****   const size_t start_idx = idx;
 113              		.loc 1 176 3 is_stmt 1 view .LVU18
 114              	.LVL5:
 115              		.loc 1 179 3 view .LVU19
 175:printf.c      ****   const size_t start_idx = idx;
 116              		.loc 1 175 1 is_stmt 0 view .LVU20
 117 001c DDE9125A 		ldrd	r5, r10, [sp, #72]
 118 0020 1146     		mov	r1, r2
 119              	.LVL6:
 120              		.loc 1 179 6 view .LVU21
 121 0022 0193     		str	r3, [sp, #4]
 122 0024 2AD1     		bne	.L6
 180:printf.c      ****     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 123              		.loc 1 180 5 is_stmt 1 view .LVU22
 124              		.loc 1 180 8 is_stmt 0 view .LVU23
 125 0026 BAF1000F 		cmp	r10, #0
 126 002a 40F09480 		bne	.L243
 127              	.LVL7:
 181:printf.c      ****       width--;
 182:printf.c      ****     }
 183:printf.c      ****     while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 128              		.loc 1 183 25 is_stmt 1 view .LVU24
 129 002e AC42     		cmp	r4, r5
 130 0030 24D2     		bcs	.L6
 131              		.loc 1 183 25 is_stmt 0 discriminator 1 view .LVU25
 132 0032 202C     		cmp	r4, #32
 180:printf.c      ****     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 133              		.loc 1 180 25 discriminator 1 view .LVU26
 134 0034 00F00103 		and	r3, r0, #1
 135              		.loc 1 183 25 discriminator 1 view .LVU27
 136 0038 00F07481 		beq	.L244
 137              	.LVL8:
 138              	.L17:
 139              		.loc 1 183 25 discriminator 1 view .LVU28
 140 003c 621E     		subs	r2, r4, #1
 141              	.LVL9:
 142              		.loc 1 183 25 discriminator 1 view .LVU29
 143 003e 5A44     		add	r2, r2, fp
 184:printf.c      ****       buf[len++] = '0';
 144              		.loc 1 184 18 view .LVU30
 145 0040 4FF0300E 		mov	lr, #48
 146 0044 02E0     		b	.L32
 147              	.L11:
 183:printf.c      ****       buf[len++] = '0';
 148              		.loc 1 183 25 discriminator 1 view .LVU31
 149 0046 202C     		cmp	r4, #32
 150 0048 00F0D380 		beq	.L245
 151              	.L32:
 152              		.loc 1 184 7 is_stmt 1 view .LVU32
 153              	.LVL10:
 154              		.loc 1 184 14 is_stmt 0 view .LVU33
 155 004c 0134     		adds	r4, r4, #1
 156              	.LVL11:
 183:printf.c      ****       buf[len++] = '0';
 157              		.loc 1 183 25 view .LVU34
 158 004e A542     		cmp	r5, r4
 159              		.loc 1 184 18 view .LVU35
 160 0050 02F801EF 		strb	lr, [r2, #1]!
 183:printf.c      ****       buf[len++] = '0';
 161              		.loc 1 183 25 is_stmt 1 view .LVU36
 162 0054 F7D8     		bhi	.L11
 185:printf.c      ****     }
 186:printf.c      ****     while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 163              		.loc 1 186 53 view .LVU37
 164 0056 8BB1     		cbz	r3, .L6
 165              	.L16:
 166              		.loc 1 186 36 is_stmt 0 discriminator 1 view .LVU38
 167 0058 5445     		cmp	r4, r10
 168 005a 0FD2     		bcs	.L6
 169              		.loc 1 186 53 discriminator 2 view .LVU39
 170 005c 202C     		cmp	r4, #32
 171 005e 00F0C081 		beq	.L246
 172 0062 621E     		subs	r2, r4, #1
 173 0064 5A44     		add	r2, r2, fp
 187:printf.c      ****       buf[len++] = '0';
 174              		.loc 1 187 18 view .LVU40
 175 0066 4FF0300C 		mov	ip, #48
 176 006a 02E0     		b	.L34
 177              	.L248:
 186:printf.c      ****       buf[len++] = '0';
 178              		.loc 1 186 53 discriminator 2 view .LVU41
 179 006c 202C     		cmp	r4, #32
 180 006e 00F01081 		beq	.L247
 181              	.L34:
 182              		.loc 1 187 7 is_stmt 1 view .LVU42
 183              	.LVL12:
 184              		.loc 1 187 14 is_stmt 0 view .LVU43
 185 0072 0134     		adds	r4, r4, #1
 186              	.LVL13:
 186:printf.c      ****       buf[len++] = '0';
 187              		.loc 1 186 36 discriminator 1 view .LVU44
 188 0074 5445     		cmp	r4, r10
 189              		.loc 1 187 18 view .LVU45
 190 0076 02F801CF 		strb	ip, [r2, #1]!
 186:printf.c      ****       buf[len++] = '0';
 191              		.loc 1 186 53 is_stmt 1 view .LVU46
 186:printf.c      ****       buf[len++] = '0';
 192              		.loc 1 186 36 is_stmt 0 discriminator 1 view .LVU47
 193 007a F7D1     		bne	.L248
 194              	.LVL14:
 195              	.L6:
 188:printf.c      ****     }
 189:printf.c      ****   }
 190:printf.c      **** 
 191:printf.c      ****   // handle hash
 192:printf.c      ****   if (flags & FLAGS_HASH) {
 196              		.loc 1 192 3 is_stmt 1 view .LVU48
 197              		.loc 1 192 6 is_stmt 0 view .LVU49
 198 007c C206     		lsls	r2, r0, #27
 199 007e 4ED4     		bmi	.L209
 200 0080 00F00302 		and	r2, r0, #3
 201              	.LVL15:
 202              	.L43:
 193:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 194:printf.c      ****       len--;
 195:printf.c      ****       if (len && (base == 16U)) {
 196:printf.c      ****         len--;
 197:printf.c      ****       }
 198:printf.c      ****     }
 199:printf.c      ****     if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 200:printf.c      ****       buf[len++] = 'x';
 201:printf.c      ****     }
 202:printf.c      ****     else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 203:printf.c      ****       buf[len++] = 'X';
 204:printf.c      ****     }
 205:printf.c      ****     else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 206:printf.c      ****       buf[len++] = 'b';
 207:printf.c      ****     }
 208:printf.c      ****     if (len < PRINTF_NTOA_BUFFER_SIZE) {
 209:printf.c      ****       buf[len++] = '0';
 210:printf.c      ****     }
 211:printf.c      ****   }
 212:printf.c      **** 
 213:printf.c      ****   if (len < PRINTF_NTOA_BUFFER_SIZE) {
 203              		.loc 1 213 3 is_stmt 1 view .LVU50
 204              		.loc 1 213 6 is_stmt 0 view .LVU51
 205 0084 202C     		cmp	r4, #32
 206 0086 5BD1     		bne	.L53
 207              	.LVL16:
 208              	.L103:
 214:printf.c      ****     if (negative) {
 215:printf.c      ****       buf[len++] = '-';
 216:printf.c      ****     }
 217:printf.c      ****     else if (flags & FLAGS_PLUS) {
 218:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 219:printf.c      ****     }
 220:printf.c      ****     else if (flags & FLAGS_SPACE) {
 221:printf.c      ****       buf[len++] = ' ';
 222:printf.c      ****     }
 223:printf.c      ****   }
 224:printf.c      **** 
 225:printf.c      ****   // pad spaces up to given width
 226:printf.c      ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 209              		.loc 1 226 3 is_stmt 1 view .LVU52
 210              		.loc 1 226 6 is_stmt 0 view .LVU53
 211 0088 002A     		cmp	r2, #0
 212 008a 40F0AE80 		bne	.L123
 213              	.L62:
 214              	.LVL17:
 215              	.LBB28:
 227:printf.c      ****     for (size_t i = len; i < width; i++) {
 216              		.loc 1 227 28 is_stmt 1 discriminator 1 view .LVU54
 217 008e BAF1200F 		cmp	r10, #32
 218 0092 88BF     		it	hi
 219 0094 2020     		movhi	r0, #32
 220 0096 40F2A880 		bls	.L123
 221              	.LVL18:
 222              	.L40:
 223              		.loc 1 227 28 is_stmt 0 discriminator 1 view .LVU55
 224              	.LBE28:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 225              		.loc 1 226 6 view .LVU56
 226 009a 0D46     		mov	r5, r1
 227 009c 461A     		subs	r6, r0, r1
 228 009e 0290     		str	r0, [sp, #8]
 229 00a0 0C46     		mov	r4, r1
 230              	.LVL19:
 231              	.L91:
 232              	.LBB29:
 228:printf.c      ****       out(' ', buffer, idx++, maxlen);
 233              		.loc 1 228 7 is_stmt 1 view .LVU57
 234 00a2 2A46     		mov	r2, r5
 235 00a4 4B46     		mov	r3, r9
 236 00a6 0135     		adds	r5, r5, #1
 237              	.LVL20:
 238              		.loc 1 228 7 is_stmt 0 view .LVU58
 239 00a8 4146     		mov	r1, r8
 240 00aa 2020     		movs	r0, #32
 241 00ac B847     		blx	r7
 242              	.LVL21:
 227:printf.c      ****     for (size_t i = len; i < width; i++) {
 243              		.loc 1 227 38 is_stmt 1 discriminator 3 view .LVU59
 227:printf.c      ****     for (size_t i = len; i < width; i++) {
 244              		.loc 1 227 28 discriminator 1 view .LVU60
 245 00ae 7319     		adds	r3, r6, r5
 246 00b0 5345     		cmp	r3, r10
 247 00b2 F6D3     		bcc	.L91
 248 00b4 0298     		ldr	r0, [sp, #8]
 249 00b6 0AF1FF36 		add	r6, r10, #-1
 250 00ba 421C     		adds	r2, r0, #1
 251 00bc 361A     		subs	r6, r6, r0
 252 00be 5245     		cmp	r2, r10
 253 00c0 88BF     		it	hi
 254 00c2 0026     		movhi	r6, #0
 255 00c4 621C     		adds	r2, r4, #1
 256 00c6 2146     		mov	r1, r4
 257 00c8 1644     		add	r6, r6, r2
 258              	.LVL22:
 259              	.L89:
 227:printf.c      ****     for (size_t i = len; i < width; i++) {
 260              		.loc 1 227 28 is_stmt 0 discriminator 1 view .LVU61
 261              	.LBE29:
 262              	.LBB30:
 229:printf.c      ****     }
 230:printf.c      ****   }
 231:printf.c      **** 
 232:printf.c      ****   // reverse string
 233:printf.c      ****   for (size_t i = 0U; i < len; i++) {
 263              		.loc 1 233 25 is_stmt 1 discriminator 1 view .LVU62
 264 00ca A8B1     		cbz	r0, .L92
 265 00cc 441E     		subs	r4, r0, #1
 266              	.LVL23:
 267              	.L20:
 268              		.loc 1 233 25 is_stmt 0 discriminator 1 view .LVU63
 269 00ce 0BEB0405 		add	r5, fp, r4
 270 00d2 3444     		add	r4, r4, r6
 271 00d4 CDE90206 		strd	r0, r6, [sp, #8]
 272 00d8 5C44     		add	r4, r4, fp
 273 00da 0E46     		mov	r6, r1
 274 00dc A5EB000B 		sub	fp, r5, r0
 275              	.LVL24:
 276              	.L93:
 277              		.loc 1 233 25 discriminator 1 view .LVU64
 278 00e0 621B     		subs	r2, r4, r5
 279              	.LVL25:
 234:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 280              		.loc 1 234 5 is_stmt 1 view .LVU65
 281              		.loc 1 234 5 is_stmt 0 view .LVU66
 282 00e2 15F80109 		ldrb	r0, [r5], #-1	@ zero_extendqisi2
 283 00e6 4B46     		mov	r3, r9
 284 00e8 4146     		mov	r1, r8
 285 00ea B847     		blx	r7
 286              	.LVL26:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 287              		.loc 1 233 33 is_stmt 1 discriminator 3 view .LVU67
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 288              		.loc 1 233 25 discriminator 1 view .LVU68
 289 00ec AB45     		cmp	fp, r5
 290 00ee F7D1     		bne	.L93
 291 00f0 0298     		ldr	r0, [sp, #8]
 292 00f2 3146     		mov	r1, r6
 293 00f4 039E     		ldr	r6, [sp, #12]
 294              	.LVL27:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 295              		.loc 1 233 25 is_stmt 0 discriminator 1 view .LVU69
 296 00f6 0644     		add	r6, r6, r0
 297              	.LVL28:
 298              	.L92:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 299              		.loc 1 233 25 discriminator 1 view .LVU70
 300              	.LBE30:
 235:printf.c      ****   }
 236:printf.c      **** 
 237:printf.c      ****   // append pad spaces up to given width
 238:printf.c      ****   if (flags & FLAGS_LEFT) {
 301              		.loc 1 238 3 is_stmt 1 view .LVU71
 302              		.loc 1 238 6 is_stmt 0 view .LVU72
 303 00f8 019B     		ldr	r3, [sp, #4]
 304 00fa 63B1     		cbz	r3, .L5
 305              	.LVL29:
 239:printf.c      ****     while (idx - start_idx < width) {
 306              		.loc 1 239 28 is_stmt 1 view .LVU73
 307              		.loc 1 239 16 is_stmt 0 view .LVU74
 308 00fc 741A     		subs	r4, r6, r1
 309              		.loc 1 239 28 view .LVU75
 310 00fe 5445     		cmp	r4, r10
 311 0100 09D2     		bcs	.L5
 312              	.LVL30:
 313              	.L95:
 240:printf.c      ****       out(' ', buffer, idx++, maxlen);
 314              		.loc 1 240 7 is_stmt 1 view .LVU76
 315 0102 3246     		mov	r2, r6
 316 0104 4B46     		mov	r3, r9
 317 0106 4146     		mov	r1, r8
 318 0108 2020     		movs	r0, #32
 239:printf.c      ****     while (idx - start_idx < width) {
 319              		.loc 1 239 28 is_stmt 0 view .LVU77
 320 010a 0134     		adds	r4, r4, #1
 321              		.loc 1 240 7 view .LVU78
 322 010c B847     		blx	r7
 323              	.LVL31:
 239:printf.c      ****     while (idx - start_idx < width) {
 324              		.loc 1 239 28 view .LVU79
 325 010e 5445     		cmp	r4, r10
 326              		.loc 1 240 7 view .LVU80
 327 0110 06F10106 		add	r6, r6, #1
 328              	.LVL32:
 239:printf.c      ****     while (idx - start_idx < width) {
 329              		.loc 1 239 28 is_stmt 1 view .LVU81
 330 0114 F5D3     		bcc	.L95
 331              	.LVL33:
 332              	.L5:
 241:printf.c      ****     }
 242:printf.c      ****   }
 243:printf.c      **** 
 244:printf.c      ****   return idx;
 245:printf.c      **** }
 333              		.loc 1 245 1 is_stmt 0 view .LVU82
 334 0116 3046     		mov	r0, r6
 335 0118 05B0     		add	sp, sp, #20
 336              		.cfi_remember_state
 337              		.cfi_def_cfa_offset 36
 338              		@ sp needed
 339 011a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 340              	.LVL34:
 341              	.L209:
 342              		.cfi_restore_state
 193:printf.c      ****       len--;
 343              		.loc 1 193 5 is_stmt 1 view .LVU83
 193:printf.c      ****       len--;
 344              		.loc 1 193 8 is_stmt 0 view .LVU84
 345 011e 4305     		lsls	r3, r0, #21
 346 0120 56D4     		bmi	.L39
 193:printf.c      ****       len--;
 347              		.loc 1 193 36 discriminator 1 view .LVU85
 348 0122 002C     		cmp	r4, #0
 349 0124 50D1     		bne	.L109
 350              	.LVL35:
 199:printf.c      ****       buf[len++] = 'x';
 351              		.loc 1 199 5 is_stmt 1 view .LVU86
 199:printf.c      ****       buf[len++] = 'x';
 352              		.loc 1 199 8 is_stmt 0 view .LVU87
 353 0126 119B     		ldr	r3, [sp, #68]
 354 0128 102B     		cmp	r3, #16
 355 012a 00F0E680 		beq	.L249
 205:printf.c      ****       buf[len++] = 'b';
 356              		.loc 1 205 10 is_stmt 1 view .LVU88
 205:printf.c      ****       buf[len++] = 'b';
 357              		.loc 1 205 13 is_stmt 0 view .LVU89
 358 012e 022B     		cmp	r3, #2
 359 0130 00F0F180 		beq	.L115
 360              	.L230:
 208:printf.c      ****       buf[len++] = '0';
 361              		.loc 1 208 5 is_stmt 1 view .LVU90
 362              	.LVL36:
 209:printf.c      ****     }
 363              		.loc 1 209 7 view .LVU91
 209:printf.c      ****     }
 364              		.loc 1 209 18 is_stmt 0 view .LVU92
 365 0134 3022     		movs	r2, #48
 366 0136 8BF80020 		strb	r2, [fp]
 213:printf.c      ****     if (negative) {
 367              		.loc 1 213 3 is_stmt 1 view .LVU93
 209:printf.c      ****     }
 368              		.loc 1 209 14 is_stmt 0 view .LVU94
 369 013a 0124     		movs	r4, #1
 370 013c 00F00302 		and	r2, r0, #3
 371              	.LVL37:
 372              	.L53:
 214:printf.c      ****       buf[len++] = '-';
 373              		.loc 1 214 5 is_stmt 1 view .LVU95
 214:printf.c      ****       buf[len++] = '-';
 374              		.loc 1 214 8 is_stmt 0 view .LVU96
 375 0140 002E     		cmp	r6, #0
 376 0142 6BD0     		beq	.L84
 377              	.L256:
 215:printf.c      ****     }
 378              		.loc 1 215 7 is_stmt 1 view .LVU97
 215:printf.c      ****     }
 379              		.loc 1 215 18 is_stmt 0 view .LVU98
 380 0144 2D20     		movs	r0, #45
 381 0146 0BF80400 		strb	r0, [fp, r4]
 215:printf.c      ****     }
 382              		.loc 1 215 14 view .LVU99
 383 014a 601C     		adds	r0, r4, #1
 384              	.LVL38:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 385              		.loc 1 226 3 is_stmt 1 view .LVU100
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 386              		.loc 1 226 6 is_stmt 0 view .LVU101
 387 014c 0AB9     		cbnz	r2, .L232
 388              	.L85:
 389              	.LVL39:
 390              	.LBB31:
 227:printf.c      ****       out(' ', buffer, idx++, maxlen);
 391              		.loc 1 227 28 is_stmt 1 discriminator 1 view .LVU102
 392 014e 5045     		cmp	r0, r10
 393 0150 A3D3     		bcc	.L40
 394              	.LVL40:
 395              	.L232:
 227:printf.c      ****       out(' ', buffer, idx++, maxlen);
 396              		.loc 1 227 28 is_stmt 0 discriminator 1 view .LVU103
 397              	.LBE31:
 398              	.LBB32:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 399              		.loc 1 233 25 discriminator 1 view .LVU104
 400 0152 0E46     		mov	r6, r1
 401 0154 BBE7     		b	.L20
 402              	.LVL41:
 403              	.L243:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 404              		.loc 1 233 25 discriminator 1 view .LVU105
 405              	.LBE32:
 180:printf.c      ****       width--;
 406              		.loc 1 180 15 discriminator 1 view .LVU106
 407 0156 10F00103 		ands	r3, r0, #1
 408 015a 69D0     		beq	.L8
 180:printf.c      ****       width--;
 409              		.loc 1 180 42 discriminator 2 view .LVU107
 410 015c 002E     		cmp	r6, #0
 411 015e 40F08180 		bne	.L9
 180:printf.c      ****       width--;
 412              		.loc 1 180 55 discriminator 3 view .LVU108
 413 0162 10F00C0F 		tst	r0, #12
 414 0166 7DD1     		bne	.L9
 415              	.LVL42:
 416              	.L10:
 183:printf.c      ****       buf[len++] = '0';
 417              		.loc 1 183 25 is_stmt 1 view .LVU109
 418 0168 AC42     		cmp	r4, r5
 419 016a BFF475AF 		bcs	.L16
 183:printf.c      ****       buf[len++] = '0';
 420              		.loc 1 183 25 is_stmt 0 discriminator 1 view .LVU110
 421 016e 202C     		cmp	r4, #32
 422 0170 7FF464AF 		bne	.L17
 423              	.LVL43:
 186:printf.c      ****       buf[len++] = '0';
 424              		.loc 1 186 36 discriminator 1 view .LVU111
 425 0174 BAF1200F 		cmp	r10, #32
 426 0178 40F20481 		bls	.L250
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 427              		.loc 1 192 3 is_stmt 1 view .LVU112
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 428              		.loc 1 192 6 is_stmt 0 view .LVU113
 429 017c C206     		lsls	r2, r0, #27
 430 017e 40F1B480 		bpl	.L241
 193:printf.c      ****       len--;
 431              		.loc 1 193 5 is_stmt 1 view .LVU114
 193:printf.c      ****       len--;
 432              		.loc 1 193 8 is_stmt 0 view .LVU115
 433 0182 4305     		lsls	r3, r0, #21
 434 0184 00F11981 		bmi	.L37
 435              	.LVL44:
 436              	.L99:
 193:printf.c      ****       len--;
 437              		.loc 1 193 43 discriminator 2 view .LVU116
 438 0188 202D     		cmp	r5, #32
 439 018a 21D1     		bne	.L39
 440              	.L222:
 194:printf.c      ****       if (len && (base == 16U)) {
 441              		.loc 1 194 10 view .LVU117
 442 018c 1F25     		movs	r5, #31
 443              	.LVL45:
 444              	.L38:
 195:printf.c      ****         len--;
 445              		.loc 1 195 15 discriminator 1 view .LVU118
 446 018e 119B     		ldr	r3, [sp, #68]
 447 0190 102B     		cmp	r3, #16
 448 0192 00F0EC80 		beq	.L251
 449              	.LVL46:
 202:printf.c      ****       buf[len++] = 'X';
 450              		.loc 1 202 10 is_stmt 1 view .LVU119
 205:printf.c      ****       buf[len++] = 'b';
 451              		.loc 1 205 10 view .LVU120
 205:printf.c      ****       buf[len++] = 'b';
 452              		.loc 1 205 13 is_stmt 0 view .LVU121
 453 0196 022B     		cmp	r3, #2
 454 0198 00F00302 		and	r2, r0, #3
 455 019c 08D1     		bne	.L80
 456              	.L79:
 206:printf.c      ****     }
 457              		.loc 1 206 7 is_stmt 1 view .LVU122
 458              	.LVL47:
 206:printf.c      ****     }
 459              		.loc 1 206 18 is_stmt 0 view .LVU123
 460 019e 4FF0620C 		mov	ip, #98
 461 01a2 0BF805C0 		strb	ip, [fp, r5]
 462              	.LVL48:
 463              	.L69:
 208:printf.c      ****       buf[len++] = '0';
 464              		.loc 1 208 5 is_stmt 1 view .LVU124
 208:printf.c      ****       buf[len++] = '0';
 465              		.loc 1 208 8 is_stmt 0 view .LVU125
 466 01a6 202C     		cmp	r4, #32
 467 01a8 3FF46EAF 		beq	.L103
 468              	.LVL49:
 469              	.L78:
 209:printf.c      ****     }
 470              		.loc 1 209 14 view .LVU126
 471 01ac 2546     		mov	r5, r4
 472              	.LVL50:
 209:printf.c      ****     }
 473              		.loc 1 209 14 view .LVU127
 474 01ae 0134     		adds	r4, r4, #1
 475              	.LVL51:
 476              	.L80:
 209:printf.c      ****     }
 477              		.loc 1 209 7 is_stmt 1 view .LVU128
 209:printf.c      ****     }
 478              		.loc 1 209 18 is_stmt 0 view .LVU129
 479 01b0 4FF0300C 		mov	ip, #48
 480 01b4 0BF805C0 		strb	ip, [fp, r5]
 481 01b8 64E7     		b	.L43
 482              	.LVL52:
 483              	.L254:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 484              		.loc 1 192 3 is_stmt 1 view .LVU130
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 485              		.loc 1 192 6 is_stmt 0 view .LVU131
 486 01ba C306     		lsls	r3, r0, #27
 487 01bc 40F1E480 		bpl	.L231
 488              	.L107:
 193:printf.c      ****       len--;
 489              		.loc 1 193 5 is_stmt 1 view .LVU132
 193:printf.c      ****       len--;
 490              		.loc 1 193 8 is_stmt 0 view .LVU133
 491 01c0 4205     		lsls	r2, r0, #21
 492 01c2 4FF02004 		mov	r4, #32
 493 01c6 03D4     		bmi	.L39
 494              	.LVL53:
 495              	.L109:
 193:printf.c      ****       len--;
 496              		.loc 1 193 43 discriminator 2 view .LVU134
 497 01c8 A542     		cmp	r5, r4
 498 01ca 4ED0     		beq	.L45
 499              	.L106:
 193:printf.c      ****       len--;
 500              		.loc 1 193 61 discriminator 3 view .LVU135
 501 01cc 5445     		cmp	r4, r10
 502 01ce 4CD0     		beq	.L45
 503              	.LVL54:
 504              	.L39:
 199:printf.c      ****       buf[len++] = 'x';
 505              		.loc 1 199 5 is_stmt 1 view .LVU136
 199:printf.c      ****       buf[len++] = 'x';
 506              		.loc 1 199 8 is_stmt 0 view .LVU137
 507 01d0 119B     		ldr	r3, [sp, #68]
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 508              		.loc 1 226 29 view .LVU138
 509 01d2 00F00302 		and	r2, r0, #3
 199:printf.c      ****       buf[len++] = 'x';
 510              		.loc 1 199 8 view .LVU139
 511 01d6 102B     		cmp	r3, #16
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 512              		.loc 1 226 29 view .LVU140
 513 01d8 1546     		mov	r5, r2
 199:printf.c      ****       buf[len++] = 'x';
 514              		.loc 1 199 8 view .LVU141
 515 01da 5FD0     		beq	.L252
 205:printf.c      ****       buf[len++] = 'b';
 516              		.loc 1 205 10 is_stmt 1 view .LVU142
 205:printf.c      ****       buf[len++] = 'b';
 517              		.loc 1 205 13 is_stmt 0 view .LVU143
 518 01dc 022B     		cmp	r3, #2
 519 01de E2D1     		bne	.L69
 205:printf.c      ****       buf[len++] = 'b';
 520              		.loc 1 205 27 discriminator 1 view .LVU144
 521 01e0 202C     		cmp	r4, #32
 522 01e2 7FD1     		bne	.L253
 523              	.LVL55:
 524              	.L66:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 525              		.loc 1 226 3 is_stmt 1 view .LVU145
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 526              		.loc 1 226 6 is_stmt 0 view .LVU146
 527 01e4 002D     		cmp	r5, #0
 528 01e6 3FF452AF 		beq	.L62
 529              	.LVL56:
 530              	.L123:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 531              		.loc 1 226 6 view .LVU147
 532 01ea 0E46     		mov	r6, r1
 533 01ec 1F24     		movs	r4, #31
 534 01ee 2020     		movs	r0, #32
 535 01f0 6DE7     		b	.L20
 536              	.LVL57:
 537              	.L245:
 186:printf.c      ****       buf[len++] = '0';
 538              		.loc 1 186 53 is_stmt 1 view .LVU148
 539 01f2 002B     		cmp	r3, #0
 540 01f4 00F0D880 		beq	.L25
 186:printf.c      ****       buf[len++] = '0';
 541              		.loc 1 186 36 is_stmt 0 discriminator 1 view .LVU149
 542 01f8 BAF1200F 		cmp	r10, #32
 543 01fc DDD9     		bls	.L254
 544              	.LVL58:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 545              		.loc 1 192 3 is_stmt 1 view .LVU150
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 546              		.loc 1 192 6 is_stmt 0 view .LVU151
 547 01fe C206     		lsls	r2, r0, #27
 548 0200 73D5     		bpl	.L241
 549              	.L41:
 193:printf.c      ****       len--;
 550              		.loc 1 193 5 is_stmt 1 view .LVU152
 193:printf.c      ****       len--;
 551              		.loc 1 193 8 is_stmt 0 view .LVU153
 552 0202 4405     		lsls	r4, r0, #21
 553 0204 00F1D980 		bmi	.L37
 193:printf.c      ****       len--;
 554              		.loc 1 193 43 discriminator 2 view .LVU154
 555 0208 202D     		cmp	r5, #32
 556 020a 00F0E680 		beq	.L132
 193:printf.c      ****       len--;
 557              		.loc 1 193 61 discriminator 3 view .LVU155
 558 020e BAF1200F 		cmp	r10, #32
 559 0212 40F08E80 		bne	.L214
 560              	.L130:
 193:printf.c      ****       len--;
 561              		.loc 1 193 61 discriminator 3 view .LVU156
 562 0216 5446     		mov	r4, r10
 194:printf.c      ****       if (len && (base == 16U)) {
 563              		.loc 1 194 10 view .LVU157
 564 0218 1F25     		movs	r5, #31
 565 021a B8E7     		b	.L38
 566              	.LVL59:
 567              	.L84:
 217:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 568              		.loc 1 217 10 is_stmt 1 view .LVU158
 217:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 569              		.loc 1 217 13 is_stmt 0 view .LVU159
 570 021c 4607     		lsls	r6, r0, #29
 571 021e 46D5     		bpl	.L86
 218:printf.c      ****     }
 572              		.loc 1 218 7 is_stmt 1 view .LVU160
 218:printf.c      ****     }
 573              		.loc 1 218 18 is_stmt 0 view .LVU161
 574 0220 2B20     		movs	r0, #43
 575 0222 0BF80400 		strb	r0, [fp, r4]
 218:printf.c      ****     }
 576              		.loc 1 218 14 view .LVU162
 577 0226 601C     		adds	r0, r4, #1
 578              	.LVL60:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 579              		.loc 1 226 3 is_stmt 1 view .LVU163
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 580              		.loc 1 226 6 is_stmt 0 view .LVU164
 581 0228 002A     		cmp	r2, #0
 582 022a 90D0     		beq	.L85
 583              	.LBB33:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 584              		.loc 1 233 25 discriminator 1 view .LVU165
 585 022c 0E46     		mov	r6, r1
 586 022e 4EE7     		b	.L20
 587              	.LVL61:
 588              	.L8:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 589              		.loc 1 233 25 discriminator 1 view .LVU166
 590              	.LBE33:
 183:printf.c      ****       buf[len++] = '0';
 591              		.loc 1 183 25 is_stmt 1 view .LVU167
 592 0230 AC42     		cmp	r4, r5
 593 0232 BFF423AF 		bcs	.L6
 183:printf.c      ****       buf[len++] = '0';
 594              		.loc 1 183 25 is_stmt 0 discriminator 1 view .LVU168
 595 0236 202C     		cmp	r4, #32
 596 0238 7FF400AF 		bne	.L17
 597              	.LVL62:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 598              		.loc 1 192 3 is_stmt 1 view .LVU169
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 599              		.loc 1 192 6 is_stmt 0 view .LVU170
 600 023c C306     		lsls	r3, r0, #27
 601 023e 7FF526AF 		bpl	.L62
 602              	.L23:
 193:printf.c      ****       len--;
 603              		.loc 1 193 5 is_stmt 1 view .LVU171
 193:printf.c      ****       len--;
 604              		.loc 1 193 8 is_stmt 0 view .LVU172
 605 0242 4405     		lsls	r4, r0, #21
 606 0244 3FF523AF 		bmi	.L62
 193:printf.c      ****       len--;
 607              		.loc 1 193 43 discriminator 2 view .LVU173
 608 0248 202D     		cmp	r5, #32
 609 024a 00F0C680 		beq	.L132
 193:printf.c      ****       len--;
 610              		.loc 1 193 61 discriminator 3 view .LVU174
 611 024e BAF1200F 		cmp	r10, #32
 612 0252 E0D0     		beq	.L130
 199:printf.c      ****       buf[len++] = 'x';
 613              		.loc 1 199 5 is_stmt 1 view .LVU175
 199:printf.c      ****       buf[len++] = 'x';
 614              		.loc 1 199 8 is_stmt 0 view .LVU176
 615 0254 119B     		ldr	r3, [sp, #68]
 616 0256 102B     		cmp	r3, #16
 617 0258 3FF419AF 		beq	.L62
 205:printf.c      ****       buf[len++] = 'b';
 618              		.loc 1 205 10 is_stmt 1 view .LVU177
 205:printf.c      ****       buf[len++] = 'b';
 619              		.loc 1 205 13 is_stmt 0 view .LVU178
 620 025c 119B     		ldr	r3, [sp, #68]
 621 025e 022B     		cmp	r3, #2
 622 0260 19D1     		bne	.L229
 623 0262 14E7     		b	.L62
 624              	.LVL63:
 625              	.L9:
 181:printf.c      ****     }
 626              		.loc 1 181 7 is_stmt 1 view .LVU179
 181:printf.c      ****     }
 627              		.loc 1 181 12 is_stmt 0 view .LVU180
 628 0264 0AF1FF3A 		add	r10, r10, #-1
 629              	.LVL64:
 181:printf.c      ****     }
 630              		.loc 1 181 12 view .LVU181
 631 0268 7EE7     		b	.L10
 632              	.LVL65:
 633              	.L45:
 194:printf.c      ****       if (len && (base == 16U)) {
 634              		.loc 1 194 7 is_stmt 1 view .LVU182
 195:printf.c      ****         len--;
 635              		.loc 1 195 7 view .LVU183
 195:printf.c      ****         len--;
 636              		.loc 1 195 10 is_stmt 0 view .LVU184
 637 026a 651E     		subs	r5, r4, #1
 638              	.LVL66:
 195:printf.c      ****         len--;
 639              		.loc 1 195 10 view .LVU185
 640 026c 8FD1     		bne	.L38
 641              	.LVL67:
 199:printf.c      ****       buf[len++] = 'x';
 642              		.loc 1 199 5 is_stmt 1 view .LVU186
 199:printf.c      ****       buf[len++] = 'x';
 643              		.loc 1 199 8 is_stmt 0 view .LVU187
 644 026e 119B     		ldr	r3, [sp, #68]
 645 0270 102B     		cmp	r3, #16
 646 0272 6DD0     		beq	.L255
 205:printf.c      ****       buf[len++] = 'b';
 647              		.loc 1 205 10 is_stmt 1 view .LVU188
 205:printf.c      ****       buf[len++] = 'b';
 648              		.loc 1 205 13 is_stmt 0 view .LVU189
 649 0274 022B     		cmp	r3, #2
 650 0276 7FF45DAF 		bne	.L230
 206:printf.c      ****     }
 651              		.loc 1 206 18 view .LVU190
 652 027a 6222     		movs	r2, #98
 653 027c 8BF80020 		strb	r2, [fp]
 209:printf.c      ****     }
 654              		.loc 1 209 18 view .LVU191
 655 0280 3022     		movs	r2, #48
 656 0282 8BF80120 		strb	r2, [fp, #1]
 657 0286 1C46     		mov	r4, r3
 206:printf.c      ****     }
 658              		.loc 1 206 7 is_stmt 1 view .LVU192
 659              	.LVL68:
 208:printf.c      ****       buf[len++] = '0';
 660              		.loc 1 208 5 view .LVU193
 209:printf.c      ****     }
 661              		.loc 1 209 7 view .LVU194
 213:printf.c      ****     if (negative) {
 662              		.loc 1 213 3 view .LVU195
 663 0288 00F00302 		and	r2, r0, #3
 214:printf.c      ****       buf[len++] = '-';
 664              		.loc 1 214 5 view .LVU196
 214:printf.c      ****       buf[len++] = '-';
 665              		.loc 1 214 8 is_stmt 0 view .LVU197
 666 028c 002E     		cmp	r6, #0
 667 028e C5D0     		beq	.L84
 668 0290 58E7     		b	.L256
 669              	.LVL69:
 670              	.L247:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 671              		.loc 1 192 3 is_stmt 1 view .LVU198
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 672              		.loc 1 192 6 is_stmt 0 view .LVU199
 673 0292 C406     		lsls	r4, r0, #27
 674 0294 94D4     		bmi	.L107
 675              	.L229:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 676              		.loc 1 192 6 view .LVU200
 677 0296 00F00302 		and	r2, r0, #3
 678 029a F5E6     		b	.L103
 679              	.LVL70:
 680              	.L252:
 199:printf.c      ****       buf[len++] = 'x';
 681              		.loc 1 199 23 discriminator 1 view .LVU201
 682 029c 8306     		lsls	r3, r0, #26
 683 029e 0ED4     		bmi	.L74
 199:printf.c      ****       buf[len++] = 'x';
 684              		.loc 1 199 53 discriminator 2 view .LVU202
 685 02a0 202C     		cmp	r4, #32
 686 02a2 9FD0     		beq	.L66
 200:printf.c      ****     }
 687              		.loc 1 200 7 is_stmt 1 view .LVU203
 688              	.LVL71:
 200:printf.c      ****     }
 689              		.loc 1 200 18 is_stmt 0 view .LVU204
 690 02a4 7825     		movs	r5, #120
 691 02a6 0BF80450 		strb	r5, [fp, r4]
 200:printf.c      ****     }
 692              		.loc 1 200 14 view .LVU205
 693 02aa 0134     		adds	r4, r4, #1
 694              	.LVL72:
 200:printf.c      ****     }
 695              		.loc 1 200 18 view .LVU206
 696 02ac 7BE7     		b	.L69
 697              	.LVL73:
 698              	.L86:
 220:printf.c      ****       buf[len++] = ' ';
 699              		.loc 1 220 10 is_stmt 1 view .LVU207
 220:printf.c      ****       buf[len++] = ' ';
 700              		.loc 1 220 13 is_stmt 0 view .LVU208
 701 02ae 0507     		lsls	r5, r0, #28
 702 02b0 0FD4     		bmi	.L257
 703              	.LVL74:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 704              		.loc 1 226 3 is_stmt 1 view .LVU209
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 705              		.loc 1 226 6 is_stmt 0 view .LVU210
 706 02b2 A2BB     		cbnz	r2, .L125
 707              	.LVL75:
 708              	.LBB34:
 227:printf.c      ****       out(' ', buffer, idx++, maxlen);
 709              		.loc 1 227 28 is_stmt 1 discriminator 1 view .LVU211
 710 02b4 5445     		cmp	r4, r10
 711 02b6 80F08B80 		bcs	.L90
 712 02ba 2046     		mov	r0, r4
 713 02bc EDE6     		b	.L40
 714              	.LVL76:
 715              	.L74:
 227:printf.c      ****       out(' ', buffer, idx++, maxlen);
 716              		.loc 1 227 28 is_stmt 0 discriminator 1 view .LVU212
 717              	.LBE34:
 202:printf.c      ****       buf[len++] = 'X';
 718              		.loc 1 202 10 is_stmt 1 view .LVU213
 202:printf.c      ****       buf[len++] = 'X';
 719              		.loc 1 202 57 is_stmt 0 discriminator 2 view .LVU214
 720 02be 202C     		cmp	r4, #32
 721 02c0 90D0     		beq	.L66
 206:printf.c      ****     }
 722              		.loc 1 206 10 view .LVU215
 723 02c2 0BEB0405 		add	r5, fp, r4
 203:printf.c      ****     }
 724              		.loc 1 203 18 view .LVU216
 725 02c6 4FF0580C 		mov	ip, #88
 206:printf.c      ****     }
 726              		.loc 1 206 14 view .LVU217
 727 02ca 0134     		adds	r4, r4, #1
 203:printf.c      ****     }
 728              		.loc 1 203 7 is_stmt 1 view .LVU218
 203:printf.c      ****     }
 729              		.loc 1 203 18 is_stmt 0 view .LVU219
 730 02cc 85F800C0 		strb	ip, [r5]
 731 02d0 69E7     		b	.L69
 732              	.LVL77:
 733              	.L257:
 221:printf.c      ****     }
 734              		.loc 1 221 7 is_stmt 1 view .LVU220
 221:printf.c      ****     }
 735              		.loc 1 221 18 is_stmt 0 view .LVU221
 736 02d2 2020     		movs	r0, #32
 737 02d4 0BF80400 		strb	r0, [fp, r4]
 221:printf.c      ****     }
 738              		.loc 1 221 14 view .LVU222
 739 02d8 601C     		adds	r0, r4, #1
 740              	.LVL78:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 741              		.loc 1 226 3 is_stmt 1 view .LVU223
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 742              		.loc 1 226 6 is_stmt 0 view .LVU224
 743 02da 002A     		cmp	r2, #0
 744 02dc 3FF437AF 		beq	.L85
 745              	.LBB35:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 746              		.loc 1 233 25 discriminator 1 view .LVU225
 747 02e0 0E46     		mov	r6, r1
 748 02e2 F4E6     		b	.L20
 749              	.LVL79:
 750              	.L253:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 751              		.loc 1 233 25 discriminator 1 view .LVU226
 752              	.LBE35:
 206:printf.c      ****     }
 753              		.loc 1 206 14 view .LVU227
 754 02e4 2546     		mov	r5, r4
 755              	.LVL80:
 206:printf.c      ****     }
 756              		.loc 1 206 14 view .LVU228
 757 02e6 0134     		adds	r4, r4, #1
 758              	.LVL81:
 206:printf.c      ****     }
 759              		.loc 1 206 14 view .LVU229
 760 02e8 59E7     		b	.L79
 761              	.LVL82:
 762              	.L241:
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 763              		.loc 1 226 3 is_stmt 1 view .LVU230
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 764              		.loc 1 226 6 is_stmt 0 view .LVU231
 765 02ea 10F0030F 		tst	r0, #3
 766 02ee 2046     		mov	r0, r4
 767 02f0 3FF4D3AE 		beq	.L40
 768              	.LVL83:
 769              	.L233:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 770              		.loc 1 192 6 view .LVU232
 771 02f4 0E46     		mov	r6, r1
 772 02f6 1F24     		movs	r4, #31
 773 02f8 E9E6     		b	.L20
 774              	.LVL84:
 775              	.L249:
 199:printf.c      ****       buf[len++] = 'x';
 776              		.loc 1 199 23 discriminator 1 view .LVU233
 777 02fa 8406     		lsls	r4, r0, #26
 778 02fc 0DD5     		bpl	.L114
 779              	.LVL85:
 203:printf.c      ****     }
 780              		.loc 1 203 7 is_stmt 1 view .LVU234
 203:printf.c      ****     }
 781              		.loc 1 203 18 is_stmt 0 view .LVU235
 782 02fe 5822     		movs	r2, #88
 783              	.L51:
 206:printf.c      ****     }
 784              		.loc 1 206 18 view .LVU236
 785 0300 8BF80020 		strb	r2, [fp]
 209:printf.c      ****     }
 786              		.loc 1 209 7 is_stmt 1 view .LVU237
 787              	.LVL86:
 209:printf.c      ****     }
 788              		.loc 1 209 18 is_stmt 0 view .LVU238
 789 0304 3022     		movs	r2, #48
 790 0306 8BF80120 		strb	r2, [fp, #1]
 213:printf.c      ****     if (negative) {
 791              		.loc 1 213 3 is_stmt 1 view .LVU239
 209:printf.c      ****     }
 792              		.loc 1 209 14 is_stmt 0 view .LVU240
 793 030a 0224     		movs	r4, #2
 794 030c 00F00302 		and	r2, r0, #3
 214:printf.c      ****       buf[len++] = '-';
 795              		.loc 1 214 5 is_stmt 1 view .LVU241
 214:printf.c      ****       buf[len++] = '-';
 796              		.loc 1 214 8 is_stmt 0 view .LVU242
 797 0310 002E     		cmp	r6, #0
 798 0312 83D0     		beq	.L84
 799 0314 16E7     		b	.L256
 800              	.LVL87:
 801              	.L115:
 205:printf.c      ****       buf[len++] = 'b';
 802              		.loc 1 205 13 view .LVU243
 803 0316 6222     		movs	r2, #98
 804 0318 F2E7     		b	.L51
 805              	.L114:
 199:printf.c      ****       buf[len++] = 'x';
 806              		.loc 1 199 23 discriminator 1 view .LVU244
 807 031a 7822     		movs	r2, #120
 808 031c F0E7     		b	.L51
 809              	.LVL88:
 810              	.L125:
 811              	.LBB36:
 199:printf.c      ****       buf[len++] = 'x';
 812              		.loc 1 199 23 discriminator 1 view .LVU245
 813 031e 2046     		mov	r0, r4
 814 0320 0E46     		mov	r6, r1
 815 0322 D2E6     		b	.L89
 816              	.LVL89:
 817              	.L244:
 199:printf.c      ****       buf[len++] = 'x';
 818              		.loc 1 199 23 discriminator 1 view .LVU246
 819              	.LBE36:
 186:printf.c      ****       buf[len++] = '0';
 820              		.loc 1 186 53 is_stmt 1 view .LVU247
 821 0324 002B     		cmp	r3, #0
 822 0326 60D0     		beq	.L18
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 823              		.loc 1 192 3 view .LVU248
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 824              		.loc 1 192 6 is_stmt 0 view .LVU249
 825 0328 C206     		lsls	r2, r0, #27
 826 032a 2DD5     		bpl	.L231
 193:printf.c      ****       len--;
 827              		.loc 1 193 5 is_stmt 1 view .LVU250
 193:printf.c      ****       len--;
 828              		.loc 1 193 8 is_stmt 0 view .LVU251
 829 032c 4305     		lsls	r3, r0, #21
 830 032e 7FF52BAF 		bpl	.L99
 831              	.LVL90:
 832              	.L214:
 199:printf.c      ****       buf[len++] = 'x';
 833              		.loc 1 199 5 is_stmt 1 view .LVU252
 199:printf.c      ****       buf[len++] = 'x';
 834              		.loc 1 199 8 is_stmt 0 view .LVU253
 835 0332 119B     		ldr	r3, [sp, #68]
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 836              		.loc 1 226 29 view .LVU254
 837 0334 00F00305 		and	r5, r0, #3
 199:printf.c      ****       buf[len++] = 'x';
 838              		.loc 1 199 8 view .LVU255
 839 0338 102B     		cmp	r3, #16
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 840              		.loc 1 226 29 view .LVU256
 841 033a 2A46     		mov	r2, r5
 199:printf.c      ****       buf[len++] = 'x';
 842              		.loc 1 199 8 view .LVU257
 843 033c 3FF452AF 		beq	.L66
 205:printf.c      ****       buf[len++] = 'b';
 844              		.loc 1 205 10 is_stmt 1 view .LVU258
 205:printf.c      ****       buf[len++] = 'b';
 845              		.loc 1 205 13 is_stmt 0 view .LVU259
 846 0340 119B     		ldr	r3, [sp, #68]
 847 0342 022B     		cmp	r3, #2
 848 0344 7FF4A0AE 		bne	.L103
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 849              		.loc 1 226 3 is_stmt 1 view .LVU260
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 850              		.loc 1 226 6 is_stmt 0 view .LVU261
 851 0348 002D     		cmp	r5, #0
 852 034a 7FF44EAF 		bne	.L123
 853 034e 9EE6     		b	.L62
 854              	.LVL91:
 855              	.L255:
 199:printf.c      ****       buf[len++] = 'x';
 856              		.loc 1 199 23 discriminator 1 view .LVU262
 857 0350 8206     		lsls	r2, r0, #26
 858 0352 22D5     		bpl	.L55
 859              	.LVL92:
 203:printf.c      ****     }
 860              		.loc 1 203 7 is_stmt 1 view .LVU263
 203:printf.c      ****     }
 861              		.loc 1 203 18 is_stmt 0 view .LVU264
 862 0354 5822     		movs	r2, #88
 863 0356 8BF80020 		strb	r2, [fp]
 864              	.LVL93:
 208:printf.c      ****       buf[len++] = '0';
 865              		.loc 1 208 5 is_stmt 1 view .LVU265
 209:printf.c      ****     }
 866              		.loc 1 209 7 view .LVU266
 209:printf.c      ****     }
 867              		.loc 1 209 18 is_stmt 0 view .LVU267
 868 035a 3022     		movs	r2, #48
 869 035c 8BF80120 		strb	r2, [fp, #1]
 213:printf.c      ****     if (negative) {
 870              		.loc 1 213 3 is_stmt 1 view .LVU268
 871              	.L77:
 209:printf.c      ****     }
 872              		.loc 1 209 14 is_stmt 0 view .LVU269
 873 0360 0224     		movs	r4, #2
 874 0362 00F00302 		and	r2, r0, #3
 214:printf.c      ****       buf[len++] = '-';
 875              		.loc 1 214 5 is_stmt 1 view .LVU270
 214:printf.c      ****       buf[len++] = '-';
 876              		.loc 1 214 8 is_stmt 0 view .LVU271
 877 0366 002E     		cmp	r6, #0
 878 0368 3FF458AF 		beq	.L84
 879 036c EAE6     		b	.L256
 880              	.LVL94:
 881              	.L251:
 196:printf.c      ****       }
 882              		.loc 1 196 9 is_stmt 1 view .LVU272
 199:printf.c      ****       buf[len++] = 'x';
 883              		.loc 1 199 23 is_stmt 0 discriminator 1 view .LVU273
 884 036e 8506     		lsls	r5, r0, #26
 885              	.LVL95:
 196:printf.c      ****       }
 886              		.loc 1 196 12 view .LVU274
 887 0370 A4F10202 		sub	r2, r4, #2
 888              	.LVL96:
 199:printf.c      ****       buf[len++] = 'x';
 889              		.loc 1 199 5 is_stmt 1 view .LVU275
 199:printf.c      ****       buf[len++] = 'x';
 890              		.loc 1 199 23 is_stmt 0 discriminator 1 view .LVU276
 891 0374 0AD4     		bmi	.L258
 200:printf.c      ****     }
 892              		.loc 1 200 7 is_stmt 1 view .LVU277
 200:printf.c      ****     }
 893              		.loc 1 200 18 is_stmt 0 view .LVU278
 894 0376 7825     		movs	r5, #120
 895 0378 0BF80250 		strb	r5, [fp, r2]
 896              	.LVL97:
 200:printf.c      ****     }
 897              		.loc 1 200 14 view .LVU279
 898 037c 013C     		subs	r4, r4, #1
 899              	.LVL98:
 208:printf.c      ****       buf[len++] = '0';
 900              		.loc 1 208 5 is_stmt 1 view .LVU280
 901 037e 00F00302 		and	r2, r0, #3
 902 0382 13E7     		b	.L78
 903              	.LVL99:
 904              	.L250:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 905              		.loc 1 192 3 view .LVU281
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 906              		.loc 1 192 6 is_stmt 0 view .LVU282
 907 0384 C206     		lsls	r2, r0, #27
 908 0386 12D4     		bmi	.L28
 909              	.LVL100:
 910              	.L231:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 911              		.loc 1 192 6 view .LVU283
 912 0388 2046     		mov	r0, r4
 913 038a B3E7     		b	.L233
 914              	.LVL101:
 915              	.L258:
 203:printf.c      ****     }
 916              		.loc 1 203 18 view .LVU284
 917 038c 5825     		movs	r5, #88
 918 038e 0BF80250 		strb	r5, [fp, r2]
 919              	.LVL102:
 203:printf.c      ****     }
 920              		.loc 1 203 14 view .LVU285
 921 0392 013C     		subs	r4, r4, #1
 922              	.LVL103:
 203:printf.c      ****     }
 923              		.loc 1 203 7 is_stmt 1 view .LVU286
 208:printf.c      ****       buf[len++] = '0';
 924              		.loc 1 208 5 view .LVU287
 925 0394 00F00302 		and	r2, r0, #3
 926 0398 08E7     		b	.L78
 927              	.LVL104:
 928              	.L55:
 200:printf.c      ****     }
 929              		.loc 1 200 7 view .LVU288
 200:printf.c      ****     }
 930              		.loc 1 200 18 is_stmt 0 view .LVU289
 931 039a 7822     		movs	r2, #120
 932 039c 8BF80020 		strb	r2, [fp]
 208:printf.c      ****       buf[len++] = '0';
 933              		.loc 1 208 5 is_stmt 1 view .LVU290
 934              	.LVL105:
 209:printf.c      ****     }
 935              		.loc 1 209 7 view .LVU291
 209:printf.c      ****     }
 936              		.loc 1 209 18 is_stmt 0 view .LVU292
 937 03a0 3022     		movs	r2, #48
 938 03a2 8BF80120 		strb	r2, [fp, #1]
 213:printf.c      ****     if (negative) {
 939              		.loc 1 213 3 is_stmt 1 view .LVU293
 940 03a6 DBE7     		b	.L77
 941              	.LVL106:
 942              	.L25:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 943              		.loc 1 192 3 view .LVU294
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 944              		.loc 1 192 6 is_stmt 0 view .LVU295
 945 03a8 C406     		lsls	r4, r0, #27
 946 03aa 7FF574AF 		bpl	.L229
 947              	.L28:
 193:printf.c      ****       len--;
 948              		.loc 1 193 5 is_stmt 1 view .LVU296
 193:printf.c      ****       len--;
 949              		.loc 1 193 8 is_stmt 0 view .LVU297
 950 03ae 4205     		lsls	r2, r0, #21
 951 03b0 BFD4     		bmi	.L214
 193:printf.c      ****       len--;
 952              		.loc 1 193 43 discriminator 2 view .LVU298
 953 03b2 202D     		cmp	r5, #32
 954 03b4 11D0     		beq	.L132
 955 03b6 2024     		movs	r4, #32
 956 03b8 08E7     		b	.L106
 957              	.L37:
 199:printf.c      ****       buf[len++] = 'x';
 958              		.loc 1 199 5 is_stmt 1 view .LVU299
 199:printf.c      ****       buf[len++] = 'x';
 959              		.loc 1 199 8 is_stmt 0 view .LVU300
 960 03ba 119B     		ldr	r3, [sp, #68]
 961 03bc 102B     		cmp	r3, #16
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 962              		.loc 1 226 29 view .LVU301
 963 03be 00F00305 		and	r5, r0, #3
 199:printf.c      ****       buf[len++] = 'x';
 964              		.loc 1 199 8 view .LVU302
 965 03c2 3FF40FAF 		beq	.L66
 205:printf.c      ****       buf[len++] = 'b';
 966              		.loc 1 205 10 is_stmt 1 view .LVU303
 205:printf.c      ****       buf[len++] = 'b';
 967              		.loc 1 205 13 is_stmt 0 view .LVU304
 968 03c6 022B     		cmp	r3, #2
 969 03c8 3FF40CAF 		beq	.L66
 208:printf.c      ****       buf[len++] = '0';
 970              		.loc 1 208 5 is_stmt 1 view .LVU305
 226:printf.c      ****     for (size_t i = len; i < width; i++) {
 971              		.loc 1 226 29 is_stmt 0 view .LVU306
 972 03cc 2A46     		mov	r2, r5
 973 03ce 5BE6     		b	.L103
 974              	.LVL107:
 975              	.L90:
 976              	.LBB37:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 977              		.loc 1 233 25 is_stmt 1 discriminator 1 view .LVU307
 978 03d0 2CB1     		cbz	r4, .L126
 979 03d2 2046     		mov	r0, r4
 980              	.LVL108:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 981              		.loc 1 233 25 is_stmt 0 discriminator 1 view .LVU308
 982 03d4 0E46     		mov	r6, r1
 983 03d6 013C     		subs	r4, r4, #1
 984              	.LVL109:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 985              		.loc 1 233 25 discriminator 1 view .LVU309
 986 03d8 79E6     		b	.L20
 987              	.LVL110:
 988              	.L132:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 989              		.loc 1 233 25 discriminator 1 view .LVU310
 990              	.LBE37:
 193:printf.c      ****       len--;
 991              		.loc 1 193 43 discriminator 2 view .LVU311
 992 03da 2C46     		mov	r4, r5
 993 03dc D6E6     		b	.L222
 994              	.LVL111:
 995              	.L126:
 996              	.LBB38:
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 997              		.loc 1 233 25 discriminator 1 view .LVU312
 998 03de 0E46     		mov	r6, r1
 233:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 999              		.loc 1 233 25 discriminator 1 view .LVU313
 1000              	.LBE38:
 244:printf.c      **** }
 1001              		.loc 1 244 3 is_stmt 1 view .LVU314
 244:printf.c      **** }
 1002              		.loc 1 244 10 is_stmt 0 view .LVU315
 1003 03e0 99E6     		b	.L5
 1004              	.LVL112:
 1005              	.L246:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 1006              		.loc 1 192 3 is_stmt 1 view .LVU316
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 1007              		.loc 1 192 6 is_stmt 0 view .LVU317
 1008 03e2 C306     		lsls	r3, r0, #27
 1009 03e4 3FF50DAF 		bmi	.L41
 1010 03e8 55E7     		b	.L229
 1011              	.LVL113:
 1012              	.L18:
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 1013              		.loc 1 192 3 is_stmt 1 view .LVU318
 192:printf.c      ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 1014              		.loc 1 192 6 is_stmt 0 view .LVU319
 1015 03ea C306     		lsls	r3, r0, #27
 1016 03ec 3FF529AF 		bmi	.L23
 1017 03f0 2046     		mov	r0, r4
 1018 03f2 7FE7     		b	.L233
 1019              		.cfi_endproc
 1020              	.LFE7:
 1022              		.section	.text._out_char,"ax",%progbits
 1023              		.align	1
 1024              		.p2align 2,,3
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1029              	_out_char:
 1030              	.LVL114:
 1031              	.LFB2:
 125:printf.c      ****   (void)buffer; (void)idx; (void)maxlen;
 1032              		.loc 1 125 1 is_stmt 1 view -0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 0
 1035              		@ frame_needed = 0, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
 126:printf.c      ****   if (character) {
 1037              		.loc 1 126 3 view .LVU321
 126:printf.c      ****   if (character) {
 1038              		.loc 1 126 17 view .LVU322
 126:printf.c      ****   if (character) {
 1039              		.loc 1 126 28 view .LVU323
 127:printf.c      ****     _putchar(character);
 1040              		.loc 1 127 3 view .LVU324
 127:printf.c      ****     _putchar(character);
 1041              		.loc 1 127 6 is_stmt 0 view .LVU325
 1042 0000 00B9     		cbnz	r0, .L261
 130:printf.c      **** 
 1043              		.loc 1 130 1 view .LVU326
 1044 0002 7047     		bx	lr
 1045              	.L261:
 128:printf.c      ****   }
 1046              		.loc 1 128 5 is_stmt 1 view .LVU327
 1047 0004 FFF7FEBF 		b	_putchar
 1048              	.LVL115:
 128:printf.c      ****   }
 1049              		.loc 1 128 5 is_stmt 0 view .LVU328
 1050              		.cfi_endproc
 1051              	.LFE2:
 1053              		.section	.text._out_fct,"ax",%progbits
 1054              		.align	1
 1055              		.p2align 2,,3
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1060              	_out_fct:
 1061              	.LVL116:
 1062              	.LFB3:
 135:printf.c      ****   (void)idx; (void)maxlen;
 1063              		.loc 1 135 1 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067              		@ link register save eliminated.
 136:printf.c      ****   if (character) {
 1068              		.loc 1 136 3 view .LVU330
 136:printf.c      ****   if (character) {
 1069              		.loc 1 136 14 view .LVU331
 137:printf.c      ****     // buffer is the output fct pointer
 1070              		.loc 1 137 3 view .LVU332
 137:printf.c      ****     // buffer is the output fct pointer
 1071              		.loc 1 137 6 is_stmt 0 view .LVU333
 1072 0000 10B1     		cbz	r0, .L262
 1073              	.LVL117:
 1074              	.LBB41:
 1075              	.LBI41:
 134:printf.c      **** {
 1076              		.loc 1 134 20 is_stmt 1 view .LVU334
 1077              	.LBB42:
 139:printf.c      ****   }
 1078              		.loc 1 139 5 view .LVU335
 139:printf.c      ****   }
 1079              		.loc 1 139 6 is_stmt 0 view .LVU336
 1080 0002 D1E90031 		ldrd	r3, r1, [r1]
 1081              	.LVL118:
 139:printf.c      ****   }
 1082              		.loc 1 139 6 view .LVU337
 1083 0006 1847     		bx	r3	@ indirect register sibling call
 1084              	.LVL119:
 1085              	.L262:
 139:printf.c      ****   }
 1086              		.loc 1 139 6 view .LVU338
 1087              	.LBE42:
 1088              	.LBE41:
 141:printf.c      **** 
 1089              		.loc 1 141 1 view .LVU339
 1090 0008 7047     		bx	lr
 1091              		.cfi_endproc
 1092              	.LFE3:
 1094              		.global	__aeabi_uldivmod
 1095              		.global	__aeabi_dcmpeq
 1096              		.global	__aeabi_dcmplt
 1097              		.global	__aeabi_dsub
 1098              		.global	__aeabi_d2iz
 1099              		.global	__aeabi_i2d
 1100              		.global	__aeabi_dmul
 1101              		.global	__aeabi_d2uiz
 1102              		.global	__aeabi_ui2d
 1103              		.global	__aeabi_dcmpgt
 1104              		.global	__aeabi_dcmpge
 1105 000a 00BF     		.section	.text._vsnprintf,"ax",%progbits
 1106              		.align	1
 1107              		.p2align 2,,3
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1112              	_vsnprintf:
 1113              	.LVL120:
 1114              	.LFB11:
 246:printf.c      **** 
 247:printf.c      **** 
 248:printf.c      **** // internal itoa for 'long' type
 249:printf.c      **** static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long v
 250:printf.c      **** {
 251:printf.c      ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 252:printf.c      ****   size_t len = 0U;
 253:printf.c      **** 
 254:printf.c      ****   // no hash for 0 values
 255:printf.c      ****   if (!value) {
 256:printf.c      ****     flags &= ~FLAGS_HASH;
 257:printf.c      ****   }
 258:printf.c      **** 
 259:printf.c      ****   // write if precision != 0 and value is != 0
 260:printf.c      ****   if (!(flags & FLAGS_PRECISION) || value) {
 261:printf.c      ****     do {
 262:printf.c      ****       const char digit = (char)(value % base);
 263:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 264:printf.c      ****       value /= base;
 265:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 266:printf.c      ****   }
 267:printf.c      **** 
 268:printf.c      ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 269:printf.c      **** }
 270:printf.c      **** 
 271:printf.c      **** 
 272:printf.c      **** // internal itoa for 'long long' type
 273:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 274:printf.c      **** static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned l
 275:printf.c      **** {
 276:printf.c      ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 277:printf.c      ****   size_t len = 0U;
 278:printf.c      **** 
 279:printf.c      ****   // no hash for 0 values
 280:printf.c      ****   if (!value) {
 281:printf.c      ****     flags &= ~FLAGS_HASH;
 282:printf.c      ****   }
 283:printf.c      **** 
 284:printf.c      ****   // write if precision != 0 and value is != 0
 285:printf.c      ****   if (!(flags & FLAGS_PRECISION) || value) {
 286:printf.c      ****     do {
 287:printf.c      ****       const char digit = (char)(value % base);
 288:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 289:printf.c      ****       value /= base;
 290:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 291:printf.c      ****   }
 292:printf.c      **** 
 293:printf.c      ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 294:printf.c      **** }
 295:printf.c      **** #endif  // PRINTF_SUPPORT_LONG_LONG
 296:printf.c      **** 
 297:printf.c      **** 
 298:printf.c      **** #if defined(PRINTF_SUPPORT_FLOAT)
 299:printf.c      **** static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 300:printf.c      **** {
 301:printf.c      ****   const size_t start_idx = idx;
 302:printf.c      **** 
 303:printf.c      ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 304:printf.c      ****   size_t len  = 0U;
 305:printf.c      ****   double diff = 0.0;
 306:printf.c      **** 
 307:printf.c      ****   // if input is larger than thres_max, revert to exponential
 308:printf.c      ****   const double thres_max = (double)0x7FFFFFFF;
 309:printf.c      **** 
 310:printf.c      ****   // powers of 10
 311:printf.c      ****   static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 10
 312:printf.c      **** 
 313:printf.c      ****   // test for NaN
 314:printf.c      ****   if (value != value) {
 315:printf.c      ****     out('n', buffer, idx++, maxlen);
 316:printf.c      ****     out('a', buffer, idx++, maxlen);
 317:printf.c      ****     out('n', buffer, idx++, maxlen);
 318:printf.c      ****     return idx;
 319:printf.c      ****   }
 320:printf.c      **** 
 321:printf.c      ****   // test for negative
 322:printf.c      ****   bool negative = false;
 323:printf.c      ****   if (value < 0) {
 324:printf.c      ****     negative = true;
 325:printf.c      ****     value = 0 - value;
 326:printf.c      ****   }
 327:printf.c      **** 
 328:printf.c      ****   // set default precision to 6, if not set explicitly
 329:printf.c      ****   if (!(flags & FLAGS_PRECISION)) {
 330:printf.c      ****     prec = 6U;
 331:printf.c      ****   }
 332:printf.c      ****   // limit precision to 9, cause a prec >= 10 can lead to overflow errors
 333:printf.c      ****   while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 334:printf.c      ****     buf[len++] = '0';
 335:printf.c      ****     prec--;
 336:printf.c      ****   }
 337:printf.c      **** 
 338:printf.c      ****   int whole = (int)value;
 339:printf.c      ****   double tmp = (value - whole) * pow10[prec];
 340:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 341:printf.c      ****   diff = tmp - frac;
 342:printf.c      **** 
 343:printf.c      ****   if (diff > 0.5) {
 344:printf.c      ****     ++frac;
 345:printf.c      ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 346:printf.c      ****     if (frac >= pow10[prec]) {
 347:printf.c      ****       frac = 0;
 348:printf.c      ****       ++whole;
 349:printf.c      ****     }
 350:printf.c      ****   }
 351:printf.c      ****   else if (diff < 0.5) {
 352:printf.c      ****   }
 353:printf.c      ****   else if ((frac == 0U) || (frac & 1U)) {
 354:printf.c      ****     // if halfway, round up if odd OR if last digit is 0
 355:printf.c      ****     ++frac;
 356:printf.c      ****   }
 357:printf.c      **** 
 358:printf.c      ****   // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to wri
 359:printf.c      ****   // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters ov
 360:printf.c      ****   if (value > thres_max) {
 361:printf.c      ****     return 0U;
 362:printf.c      ****   }
 363:printf.c      **** 
 364:printf.c      ****   if (prec == 0U) {
 365:printf.c      ****     diff = value - (double)whole;
 366:printf.c      ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 367:printf.c      ****       // exactly 0.5 and ODD, then round up
 368:printf.c      ****       // 1.5 -> 2, but 2.5 -> 2
 369:printf.c      ****       ++whole;
 370:printf.c      ****     }
 371:printf.c      ****   }
 372:printf.c      ****   else {
 373:printf.c      ****     unsigned int count = prec;
 374:printf.c      ****     // now do fractional part, as an unsigned number
 375:printf.c      ****     while (len < PRINTF_FTOA_BUFFER_SIZE) {
 376:printf.c      ****       --count;
 377:printf.c      ****       buf[len++] = (char)(48U + (frac % 10U));
 378:printf.c      ****       if (!(frac /= 10U)) {
 379:printf.c      ****         break;
 380:printf.c      ****       }
 381:printf.c      ****     }
 382:printf.c      ****     // add extra 0s
 383:printf.c      ****     while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 384:printf.c      ****       buf[len++] = '0';
 385:printf.c      ****     }
 386:printf.c      ****     if (len < PRINTF_FTOA_BUFFER_SIZE) {
 387:printf.c      ****       // add decimal
 388:printf.c      ****       buf[len++] = '.';
 389:printf.c      ****     }
 390:printf.c      ****   }
 391:printf.c      **** 
 392:printf.c      ****   // do whole part, number is reversed
 393:printf.c      ****   while (len < PRINTF_FTOA_BUFFER_SIZE) {
 394:printf.c      ****     buf[len++] = (char)(48 + (whole % 10));
 395:printf.c      ****     if (!(whole /= 10)) {
 396:printf.c      ****       break;
 397:printf.c      ****     }
 398:printf.c      ****   }
 399:printf.c      **** 
 400:printf.c      ****   // pad leading zeros
 401:printf.c      ****   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 402:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 403:printf.c      ****       width--;
 404:printf.c      ****     }
 405:printf.c      ****     while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 406:printf.c      ****       buf[len++] = '0';
 407:printf.c      ****     }
 408:printf.c      ****   }
 409:printf.c      **** 
 410:printf.c      ****   if (len < PRINTF_FTOA_BUFFER_SIZE) {
 411:printf.c      ****     if (negative) {
 412:printf.c      ****       buf[len++] = '-';
 413:printf.c      ****     }
 414:printf.c      ****     else if (flags & FLAGS_PLUS) {
 415:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 416:printf.c      ****     }
 417:printf.c      ****     else if (flags & FLAGS_SPACE) {
 418:printf.c      ****       buf[len++] = ' ';
 419:printf.c      ****     }
 420:printf.c      ****   }
 421:printf.c      **** 
 422:printf.c      ****   // pad spaces up to given width
 423:printf.c      ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 424:printf.c      ****     for (size_t i = len; i < width; i++) {
 425:printf.c      ****       out(' ', buffer, idx++, maxlen);
 426:printf.c      ****     }
 427:printf.c      ****   }
 428:printf.c      **** 
 429:printf.c      ****   // reverse string
 430:printf.c      ****   for (size_t i = 0U; i < len; i++) {
 431:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 432:printf.c      ****   }
 433:printf.c      **** 
 434:printf.c      ****   // append pad spaces up to given width
 435:printf.c      ****   if (flags & FLAGS_LEFT) {
 436:printf.c      ****     while (idx - start_idx < width) {
 437:printf.c      ****       out(' ', buffer, idx++, maxlen);
 438:printf.c      ****     }
 439:printf.c      ****   }
 440:printf.c      **** 
 441:printf.c      ****   return idx;
 442:printf.c      **** }
 443:printf.c      **** #endif  // PRINTF_SUPPORT_FLOAT
 444:printf.c      **** 
 445:printf.c      **** 
 446:printf.c      **** // internal vsnprintf
 447:printf.c      **** static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_l
 448:printf.c      **** {
 1115              		.loc 1 448 1 is_stmt 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 4, pretend = 0, frame = 80
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              		.loc 1 448 1 is_stmt 0 view .LVU341
 1120 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1121              		.cfi_def_cfa_offset 36
 1122              		.cfi_offset 4, -36
 1123              		.cfi_offset 5, -32
 1124              		.cfi_offset 6, -28
 1125              		.cfi_offset 7, -24
 1126              		.cfi_offset 8, -20
 1127              		.cfi_offset 9, -16
 1128              		.cfi_offset 10, -12
 1129              		.cfi_offset 11, -8
 1130              		.cfi_offset 14, -4
 1131 0004 9DB0     		sub	sp, sp, #116
 1132              		.cfi_def_cfa_offset 152
 1133              		.loc 1 448 1 view .LVU342
 1134 0006 9A46     		mov	r10, r3
 449:printf.c      ****   unsigned int flags, width, precision, n;
 450:printf.c      ****   size_t idx = 0U;
 451:printf.c      **** 
 452:printf.c      ****   if (!buffer) {
 453:printf.c      ****     // use null output function
 454:printf.c      ****     out = _out_null;
 1135              		.loc 1 454 9 view .LVU343
 1136 0008 0B1E     		subs	r3, r1, #0
 1137              	.LVL121:
 1138              		.loc 1 454 9 view .LVU344
 1139 000a 0893     		str	r3, [sp, #32]
 1140 000c 269B     		ldr	r3, [sp, #152]
 1141 000e 0A93     		str	r3, [sp, #40]
 1142 0010 18BF     		it	ne
 1143 0012 8346     		movne	fp, r0
 1144 0014 974B     		ldr	r3, .L612
 455:printf.c      ****   }
 456:printf.c      **** 
 457:printf.c      ****   while (*format)
 1145              		.loc 1 457 10 view .LVU345
 1146 0016 9AF80000 		ldrb	r0, [r10]	@ zero_extendqisi2
 1147              	.LVL122:
 448:printf.c      ****   unsigned int flags, width, precision, n;
 1148              		.loc 1 448 1 view .LVU346
 1149 001a 9046     		mov	r8, r2
 1150              	.LVL123:
 449:printf.c      ****   unsigned int flags, width, precision, n;
 1151              		.loc 1 449 3 is_stmt 1 view .LVU347
 450:printf.c      **** 
 1152              		.loc 1 450 3 view .LVU348
 452:printf.c      ****     // use null output function
 1153              		.loc 1 452 3 view .LVU349
 454:printf.c      ****   }
 1154              		.loc 1 454 9 is_stmt 0 view .LVU350
 1155 001c 08BF     		it	eq
 1156 001e 9B46     		moveq	fp, r3
 1157              	.LVL124:
 1158              		.loc 1 457 10 is_stmt 1 view .LVU351
 1159 0020 0028     		cmp	r0, #0
 1160 0022 00F04083 		beq	.L539
 1161 0026 4FF00009 		mov	r9, #0
 1162 002a 0992     		str	r2, [sp, #36]
 1163 002c 0AE0     		b	.L430
 1164              	.LVL125:
 1165              	.L577:
 458:printf.c      ****   {
 459:printf.c      ****     // format specifier?  %[flags][width][.precision][length]
 460:printf.c      ****     if (*format != '%') {
 461:printf.c      ****       // no
 462:printf.c      ****       out(*format, buffer, idx++, maxlen);
 1166              		.loc 1 462 7 view .LVU352
 1167 002e 4A46     		mov	r2, r9
 1168 0030 099B     		ldr	r3, [sp, #36]
 1169 0032 0899     		ldr	r1, [sp, #32]
 1170 0034 09F10109 		add	r9, r9, #1
 1171              	.LVL126:
 1172              		.loc 1 462 7 is_stmt 0 view .LVU353
 1173 0038 D847     		blx	fp
 1174              	.LVL127:
 463:printf.c      ****       format++;
 1175              		.loc 1 463 7 is_stmt 1 view .LVU354
 464:printf.c      ****       continue;
 1176              		.loc 1 464 7 view .LVU355
 1177              	.L268:
 457:printf.c      ****   {
 1178              		.loc 1 457 10 view .LVU356
 1179 003a 9AF80000 		ldrb	r0, [r10]	@ zero_extendqisi2
 1180 003e 0028     		cmp	r0, #0
 1181 0040 00F08E80 		beq	.L576
 1182              	.LVL128:
 1183              	.L430:
 460:printf.c      ****       // no
 1184              		.loc 1 460 5 view .LVU357
 460:printf.c      ****       // no
 1185              		.loc 1 460 8 is_stmt 0 view .LVU358
 1186 0044 2528     		cmp	r0, #37
 463:printf.c      ****       continue;
 1187              		.loc 1 463 13 view .LVU359
 1188 0046 0AF1010A 		add	r10, r10, #1
 1189              	.LVL129:
 460:printf.c      ****       // no
 1190              		.loc 1 460 8 view .LVU360
 1191 004a F0D1     		bne	.L577
 465:printf.c      ****     }
 466:printf.c      ****     else {
 467:printf.c      ****       // yes, evaluate it
 468:printf.c      ****       format++;
 469:printf.c      ****     }
 470:printf.c      **** 
 471:printf.c      ****     // evaluate flags
 472:printf.c      ****     flags = 0U;
 1192              		.loc 1 472 11 view .LVU361
 1193 004c 0024     		movs	r4, #0
 1194              	.LVL130:
 1195              	.L267:
 473:printf.c      ****     do {
 1196              		.loc 1 473 5 is_stmt 1 view .LVU362
 474:printf.c      ****       switch (*format) {
 1197              		.loc 1 474 7 view .LVU363
 1198              		.loc 1 474 15 is_stmt 0 view .LVU364
 1199 004e 5346     		mov	r3, r10
 1200 0050 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 1201              		.loc 1 474 7 view .LVU365
 1202 0054 A0F12002 		sub	r2, r0, #32
 1203 0058 102A     		cmp	r2, #16
 1204 005a 0AD8     		bhi	.L269
 1205 005c DFE802F0 		tbb	[pc, r2]
 1206              	.L271:
 1207 0060 40       		.byte	(.L275-.L271)/2
 1208 0061 09       		.byte	(.L269-.L271)/2
 1209 0062 09       		.byte	(.L269-.L271)/2
 1210 0063 3C       		.byte	(.L274-.L271)/2
 1211 0064 09       		.byte	(.L269-.L271)/2
 1212 0065 09       		.byte	(.L269-.L271)/2
 1213 0066 09       		.byte	(.L269-.L271)/2
 1214 0067 09       		.byte	(.L269-.L271)/2
 1215 0068 09       		.byte	(.L269-.L271)/2
 1216 0069 09       		.byte	(.L269-.L271)/2
 1217 006a 09       		.byte	(.L269-.L271)/2
 1218 006b 38       		.byte	(.L273-.L271)/2
 1219 006c 09       		.byte	(.L269-.L271)/2
 1220 006d 34       		.byte	(.L272-.L271)/2
 1221 006e 09       		.byte	(.L269-.L271)/2
 1222 006f 09       		.byte	(.L269-.L271)/2
 1223 0070 30       		.byte	(.L270-.L271)/2
 1224 0071 00       		.p2align 1
 1225              	.L269:
 1226              	.LVL131:
 475:printf.c      ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 476:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 477:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 478:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 479:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 480:printf.c      ****         default :                                   n = 0U; break;
 481:printf.c      ****       }
 482:printf.c      ****     } while (n);
 1227              		.loc 1 482 14 is_stmt 1 view .LVU366
 483:printf.c      **** 
 484:printf.c      ****     // evaluate width field
 485:printf.c      ****     width = 0U;
 1228              		.loc 1 485 5 view .LVU367
 486:printf.c      ****     if (_is_digit(*format)) {
 1229              		.loc 1 486 5 view .LVU368
 1230              	.LBB93:
 1231              	.LBI93:
 156:printf.c      **** {
 1232              		.loc 1 156 20 view .LVU369
 1233              	.LBB94:
 158:printf.c      **** }
 1234              		.loc 1 158 3 view .LVU370
 158:printf.c      **** }
 1235              		.loc 1 158 3 is_stmt 0 view .LVU371
 1236              	.LBE94:
 1237              	.LBE93:
 1238              		.loc 1 486 8 discriminator 1 view .LVU372
 1239 0072 A0F13002 		sub	r2, r0, #48
 1240 0076 092A     		cmp	r2, #9
 1241 0078 40F2B580 		bls	.L578
 487:printf.c      ****       width = _atoi(&format);
 488:printf.c      ****     }
 489:printf.c      ****     else if (*format == '*') {
 1242              		.loc 1 489 10 is_stmt 1 view .LVU373
 1243              		.loc 1 489 13 is_stmt 0 view .LVU374
 1244 007c 2A28     		cmp	r0, #42
 1245 007e 00F0D780 		beq	.L579
 485:printf.c      ****     if (_is_digit(*format)) {
 1246              		.loc 1 485 11 view .LVU375
 1247 0082 0022     		movs	r2, #0
 1248 0084 0B92     		str	r2, [sp, #44]
 1249              	.LVL132:
 1250              	.L279:
 490:printf.c      ****       const int w = va_arg(va, int);
 491:printf.c      ****       if (w < 0) {
 492:printf.c      ****         flags |= FLAGS_LEFT;    // reverse padding
 493:printf.c      ****         width = (unsigned int)-w;
 494:printf.c      ****       }
 495:printf.c      ****       else {
 496:printf.c      ****         width = (unsigned int)w;
 497:printf.c      ****       }
 498:printf.c      ****       format++;
 499:printf.c      ****     }
 500:printf.c      **** 
 501:printf.c      ****     // evaluate precision field
 502:printf.c      ****     precision = 0U;
 1251              		.loc 1 502 5 is_stmt 1 view .LVU376
 503:printf.c      ****     if (*format == '.') {
 1252              		.loc 1 503 5 view .LVU377
 1253              		.loc 1 503 8 is_stmt 0 view .LVU378
 1254 0086 2E28     		cmp	r0, #46
 1255 0088 00F0C280 		beq	.L580
 1256              	.LVL133:
 1257              	.L566:
 502:printf.c      ****     if (*format == '.') {
 1258              		.loc 1 502 15 view .LVU379
 1259 008c 0026     		movs	r6, #0
 1260              	.LVL134:
 1261              	.L282:
 504:printf.c      ****       flags |= FLAGS_PRECISION;
 505:printf.c      ****       format++;
 506:printf.c      ****       if (_is_digit(*format)) {
 507:printf.c      ****         precision = _atoi(&format);
 508:printf.c      ****       }
 509:printf.c      ****       else if (*format == '*') {
 510:printf.c      ****         const int prec = (int)va_arg(va, int);
 511:printf.c      ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 512:printf.c      ****         format++;
 513:printf.c      ****       }
 514:printf.c      ****     }
 515:printf.c      **** 
 516:printf.c      ****     // evaluate length field
 517:printf.c      ****     switch (*format) {
 1262              		.loc 1 517 5 is_stmt 1 view .LVU380
 1263 008e A0F16802 		sub	r2, r0, #104
 1264 0092 122A     		cmp	r2, #18
 1265 0094 2DD8     		bhi	.L285
 1266 0096 DFE812F0 		tbh	[pc, r2, lsl #1]
 1267              	.L287:
 1268 009a 3701     		.2byte	(.L290-.L287)/2
 1269 009c 2C00     		.2byte	(.L285-.L287)/2
 1270 009e 3101     		.2byte	(.L289-.L287)/2
 1271 00a0 2C00     		.2byte	(.L285-.L287)/2
 1272 00a2 2501     		.2byte	(.L288-.L287)/2
 1273 00a4 2C00     		.2byte	(.L285-.L287)/2
 1274 00a6 2C00     		.2byte	(.L285-.L287)/2
 1275 00a8 2C00     		.2byte	(.L285-.L287)/2
 1276 00aa 2C00     		.2byte	(.L285-.L287)/2
 1277 00ac 2C00     		.2byte	(.L285-.L287)/2
 1278 00ae 2C00     		.2byte	(.L285-.L287)/2
 1279 00b0 2C00     		.2byte	(.L285-.L287)/2
 1280 00b2 2700     		.2byte	(.L286-.L287)/2
 1281 00b4 2C00     		.2byte	(.L285-.L287)/2
 1282 00b6 2C00     		.2byte	(.L285-.L287)/2
 1283 00b8 2C00     		.2byte	(.L285-.L287)/2
 1284 00ba 2C00     		.2byte	(.L285-.L287)/2
 1285 00bc 2C00     		.2byte	(.L285-.L287)/2
 1286 00be 2700     		.2byte	(.L286-.L287)/2
 1287              	.LVL135:
 1288              		.p2align 1
 1289              	.L270:
 475:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 1290              		.loc 1 475 19 view .LVU381
 475:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 1291              		.loc 1 475 25 is_stmt 0 view .LVU382
 1292 00c0 44F00104 		orr	r4, r4, #1
 1293              	.LVL136:
 475:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 1294              		.loc 1 475 43 is_stmt 1 view .LVU383
 475:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 1295              		.loc 1 475 53 view .LVU384
 475:printf.c      ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 1296              		.loc 1 475 61 view .LVU385
 457:printf.c      ****   {
 1297              		.loc 1 457 10 is_stmt 0 view .LVU386
 1298 00c4 9A46     		mov	r10, r3
 1299 00c6 C2E7     		b	.L267
 1300              	.LVL137:
 1301              	.L272:
 476:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 1302              		.loc 1 476 19 is_stmt 1 view .LVU387
 476:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 1303              		.loc 1 476 25 is_stmt 0 view .LVU388
 1304 00c8 44F00204 		orr	r4, r4, #2
 1305              	.LVL138:
 476:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 1306              		.loc 1 476 43 is_stmt 1 view .LVU389
 476:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 1307              		.loc 1 476 53 view .LVU390
 476:printf.c      ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 1308              		.loc 1 476 61 view .LVU391
 457:printf.c      ****   {
 1309              		.loc 1 457 10 is_stmt 0 view .LVU392
 1310 00cc 9A46     		mov	r10, r3
 1311 00ce BEE7     		b	.L267
 1312              	.LVL139:
 1313              	.L273:
 477:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 1314              		.loc 1 477 19 is_stmt 1 view .LVU393
 477:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 1315              		.loc 1 477 25 is_stmt 0 view .LVU394
 1316 00d0 44F00404 		orr	r4, r4, #4
 1317              	.LVL140:
 477:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 1318              		.loc 1 477 43 is_stmt 1 view .LVU395
 477:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 1319              		.loc 1 477 53 view .LVU396
 477:printf.c      ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 1320              		.loc 1 477 61 view .LVU397
 457:printf.c      ****   {
 1321              		.loc 1 457 10 is_stmt 0 view .LVU398
 1322 00d4 9A46     		mov	r10, r3
 1323 00d6 BAE7     		b	.L267
 1324              	.LVL141:
 1325              	.L274:
 479:printf.c      ****         default :                                   n = 0U; break;
 1326              		.loc 1 479 19 is_stmt 1 view .LVU399
 479:printf.c      ****         default :                                   n = 0U; break;
 1327              		.loc 1 479 25 is_stmt 0 view .LVU400
 1328 00d8 44F01004 		orr	r4, r4, #16
 1329              	.LVL142:
 479:printf.c      ****         default :                                   n = 0U; break;
 1330              		.loc 1 479 43 is_stmt 1 view .LVU401
 479:printf.c      ****         default :                                   n = 0U; break;
 1331              		.loc 1 479 53 view .LVU402
 479:printf.c      ****         default :                                   n = 0U; break;
 1332              		.loc 1 479 61 view .LVU403
 457:printf.c      ****   {
 1333              		.loc 1 457 10 is_stmt 0 view .LVU404
 1334 00dc 9A46     		mov	r10, r3
 1335 00de B6E7     		b	.L267
 1336              	.LVL143:
 1337              	.L275:
 478:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 1338              		.loc 1 478 19 is_stmt 1 view .LVU405
 478:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 1339              		.loc 1 478 25 is_stmt 0 view .LVU406
 1340 00e0 44F00804 		orr	r4, r4, #8
 1341              	.LVL144:
 478:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 1342              		.loc 1 478 43 is_stmt 1 view .LVU407
 478:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 1343              		.loc 1 478 53 view .LVU408
 478:printf.c      ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 1344              		.loc 1 478 61 view .LVU409
 457:printf.c      ****   {
 1345              		.loc 1 457 10 is_stmt 0 view .LVU410
 1346 00e4 9A46     		mov	r10, r3
 1347 00e6 B2E7     		b	.L267
 1348              	.LVL145:
 1349              	.L286:
 518:printf.c      ****       case 'l' :
 519:printf.c      ****         flags |= FLAGS_LONG;
 520:printf.c      ****         format++;
 521:printf.c      ****         if (*format == 'l') {
 522:printf.c      ****           flags |= FLAGS_LONG_LONG;
 523:printf.c      ****           format++;
 524:printf.c      ****         }
 525:printf.c      ****         break;
 526:printf.c      ****       case 'h' :
 527:printf.c      ****         flags |= FLAGS_SHORT;
 528:printf.c      ****         format++;
 529:printf.c      ****         if (*format == 'h') {
 530:printf.c      ****           flags |= FLAGS_CHAR;
 531:printf.c      ****           format++;
 532:printf.c      ****         }
 533:printf.c      ****         break;
 534:printf.c      **** #if defined(PRINTF_SUPPORT_PTRDIFF_T)
 535:printf.c      ****       case 't' :
 536:printf.c      ****         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 537:printf.c      ****         format++;
 538:printf.c      ****         break;
 539:printf.c      **** #endif
 540:printf.c      ****       case 'j' :
 541:printf.c      ****         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 542:printf.c      ****         format++;
 543:printf.c      ****         break;
 544:printf.c      ****       case 'z' :
 545:printf.c      ****         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 1350              		.loc 1 545 9 is_stmt 1 view .LVU411
 521:printf.c      ****           flags |= FLAGS_LONG_LONG;
 1351              		.loc 1 521 13 is_stmt 0 view .LVU412
 1352 00e8 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 1353              	.LVL146:
 1354              	.L567:
 1355              		.loc 1 545 15 view .LVU413
 1356 00ec 44F48074 		orr	r4, r4, #256
 1357              	.LVL147:
 546:printf.c      ****         format++;
 1358              		.loc 1 546 9 is_stmt 1 view .LVU414
 547:printf.c      ****         break;
 1359              		.loc 1 547 9 view .LVU415
 1360              		.loc 1 547 9 is_stmt 0 view .LVU416
 1361 00f0 0133     		adds	r3, r3, #1
 1362              	.LVL148:
 1363              	.L285:
 548:printf.c      ****       default :
 549:printf.c      ****         break;
 550:printf.c      ****     }
 551:printf.c      **** 
 552:printf.c      ****     // evaluate specifier
 553:printf.c      ****     switch (*format) {
 1364              		.loc 1 553 5 is_stmt 1 view .LVU417
 1365              		.loc 1 553 5 is_stmt 0 view .LVU418
 1366 00f2 6628     		cmp	r0, #102
 1367              	.LBB95:
 554:printf.c      ****       case 'd' :
 555:printf.c      ****       case 'i' :
 556:printf.c      ****       case 'u' :
 557:printf.c      ****       case 'x' :
 558:printf.c      ****       case 'X' :
 559:printf.c      ****       case 'o' :
 560:printf.c      ****       case 'b' : {
 561:printf.c      ****         // set the base
 562:printf.c      ****         unsigned int base;
 563:printf.c      ****         if (*format == 'x' || *format == 'X') {
 564:printf.c      ****           base = 16U;
 565:printf.c      ****         }
 566:printf.c      ****         else if (*format == 'o') {
 567:printf.c      ****           base =  8U;
 568:printf.c      ****         }
 569:printf.c      ****         else if (*format == 'b') {
 570:printf.c      ****           base =  2U;
 571:printf.c      ****         }
 572:printf.c      ****         else {
 573:printf.c      ****           base = 10U;
 574:printf.c      ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 575:printf.c      ****         }
 576:printf.c      ****         // uppercase
 577:printf.c      ****         if (*format == 'X') {
 578:printf.c      ****           flags |= FLAGS_UPPERCASE;
 579:printf.c      ****         }
 580:printf.c      **** 
 581:printf.c      ****         // no plus or space flag for u, x, X, o, b
 582:printf.c      ****         if ((*format != 'i') && (*format != 'd')) {
 583:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 584:printf.c      ****         }
 585:printf.c      **** 
 586:printf.c      ****         // ignore '0' flag when precision is given
 587:printf.c      ****         if (flags & FLAGS_PRECISION) {
 588:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 589:printf.c      ****         }
 590:printf.c      **** 
 591:printf.c      ****         // convert the integer
 592:printf.c      ****         if ((*format == 'i') || (*format == 'd')) {
 593:printf.c      ****           // signed
 594:printf.c      ****           if (flags & FLAGS_LONG_LONG) {
 595:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 596:printf.c      ****             const long long value = va_arg(va, long long);
 597:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 598:printf.c      **** #endif
 599:printf.c      ****           }
 600:printf.c      ****           else if (flags & FLAGS_LONG) {
 601:printf.c      ****             const long value = va_arg(va, long);
 602:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 603:printf.c      ****           }
 604:printf.c      ****           else {
 605:printf.c      ****             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) 
 606:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 607:printf.c      ****           }
 608:printf.c      ****         }
 609:printf.c      ****         else {
 610:printf.c      ****           // unsigned
 611:printf.c      ****           if (flags & FLAGS_LONG_LONG) {
 612:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 613:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, 
 614:printf.c      **** #endif
 615:printf.c      ****           }
 616:printf.c      ****           else if (flags & FLAGS_LONG) {
 617:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 618:printf.c      ****           }
 619:printf.c      ****           else {
 620:printf.c      ****             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned in
 621:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 622:printf.c      ****           }
 623:printf.c      ****         }
 624:printf.c      ****         format++;
 1368              		.loc 1 624 15 view .LVU419
 1369 00f4 9A46     		mov	r10, r3
 1370              	.LBE95:
 553:printf.c      ****       case 'd' :
 1371              		.loc 1 553 5 view .LVU420
 1372 00f6 43D8     		bhi	.L293
 553:printf.c      ****       case 'd' :
 1373              		.loc 1 553 5 view .LVU421
 1374 00f8 4528     		cmp	r0, #69
 1375 00fa 26D9     		bls	.L296
 1376 00fc A0F14603 		sub	r3, r0, #70
 1377              	.LVL149:
 553:printf.c      ****       case 'd' :
 1378              		.loc 1 553 5 view .LVU422
 1379 0100 202B     		cmp	r3, #32
 1380 0102 22D8     		bhi	.L296
 1381 0104 DFE813F0 		tbh	[pc, r3, lsl #1]
 1382              	.L301:
 1383 0108 0901     		.2byte	(.L300-.L301)/2
 1384 010a 2100     		.2byte	(.L296-.L301)/2
 1385 010c 2100     		.2byte	(.L296-.L301)/2
 1386 010e 2100     		.2byte	(.L296-.L301)/2
 1387 0110 2100     		.2byte	(.L296-.L301)/2
 1388 0112 2100     		.2byte	(.L296-.L301)/2
 1389 0114 2100     		.2byte	(.L296-.L301)/2
 1390 0116 2100     		.2byte	(.L296-.L301)/2
 1391 0118 2100     		.2byte	(.L296-.L301)/2
 1392 011a 2100     		.2byte	(.L296-.L301)/2
 1393 011c 2100     		.2byte	(.L296-.L301)/2
 1394 011e 2100     		.2byte	(.L296-.L301)/2
 1395 0120 2100     		.2byte	(.L296-.L301)/2
 1396 0122 2100     		.2byte	(.L296-.L301)/2
 1397 0124 2100     		.2byte	(.L296-.L301)/2
 1398 0126 2100     		.2byte	(.L296-.L301)/2
 1399 0128 2100     		.2byte	(.L296-.L301)/2
 1400 012a 2100     		.2byte	(.L296-.L301)/2
 1401 012c 4302     		.2byte	(.L302-.L301)/2
 1402 012e 2100     		.2byte	(.L296-.L301)/2
 1403 0130 2100     		.2byte	(.L296-.L301)/2
 1404 0132 2100     		.2byte	(.L296-.L301)/2
 1405 0134 2100     		.2byte	(.L296-.L301)/2
 1406 0136 2100     		.2byte	(.L296-.L301)/2
 1407 0138 2100     		.2byte	(.L296-.L301)/2
 1408 013a 2100     		.2byte	(.L296-.L301)/2
 1409 013c 2100     		.2byte	(.L296-.L301)/2
 1410 013e 2100     		.2byte	(.L296-.L301)/2
 1411 0140 4302     		.2byte	(.L302-.L301)/2
 1412 0142 D801     		.2byte	(.L303-.L301)/2
 1413 0144 4302     		.2byte	(.L302-.L301)/2
 1414 0146 2100     		.2byte	(.L296-.L301)/2
 1415 0148 0901     		.2byte	(.L300-.L301)/2
 1416              		.p2align 1
 1417              	.L296:
 625:printf.c      ****         break;
 626:printf.c      ****       }
 627:printf.c      **** #if defined(PRINTF_SUPPORT_FLOAT)
 628:printf.c      ****       case 'f' :
 629:printf.c      ****       case 'F' :
 630:printf.c      ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 631:printf.c      ****         format++;
 632:printf.c      ****         break;
 633:printf.c      **** #endif  // PRINTF_SUPPORT_FLOAT
 634:printf.c      ****       case 'c' : {
 635:printf.c      ****         unsigned int l = 1U;
 636:printf.c      ****         // pre padding
 637:printf.c      ****         if (!(flags & FLAGS_LEFT)) {
 638:printf.c      ****           while (l++ < width) {
 639:printf.c      ****             out(' ', buffer, idx++, maxlen);
 640:printf.c      ****           }
 641:printf.c      ****         }
 642:printf.c      ****         // char output
 643:printf.c      ****         out((char)va_arg(va, int), buffer, idx++, maxlen);
 644:printf.c      ****         // post padding
 645:printf.c      ****         if (flags & FLAGS_LEFT) {
 646:printf.c      ****           while (l++ < width) {
 647:printf.c      ****             out(' ', buffer, idx++, maxlen);
 648:printf.c      ****           }
 649:printf.c      ****         }
 650:printf.c      ****         format++;
 651:printf.c      ****         break;
 652:printf.c      ****       }
 653:printf.c      **** 
 654:printf.c      ****       case 's' : {
 655:printf.c      ****         const char* p = va_arg(va, char*);
 656:printf.c      ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 657:printf.c      ****         // pre padding
 658:printf.c      ****         if (flags & FLAGS_PRECISION) {
 659:printf.c      ****           l = (l < precision ? l : precision);
 660:printf.c      ****         }
 661:printf.c      ****         if (!(flags & FLAGS_LEFT)) {
 662:printf.c      ****           while (l++ < width) {
 663:printf.c      ****             out(' ', buffer, idx++, maxlen);
 664:printf.c      ****           }
 665:printf.c      ****         }
 666:printf.c      ****         // string output
 667:printf.c      ****         while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 668:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 669:printf.c      ****         }
 670:printf.c      ****         // post padding
 671:printf.c      ****         if (flags & FLAGS_LEFT) {
 672:printf.c      ****           while (l++ < width) {
 673:printf.c      ****             out(' ', buffer, idx++, maxlen);
 674:printf.c      ****           }
 675:printf.c      ****         }
 676:printf.c      ****         format++;
 677:printf.c      ****         break;
 678:printf.c      ****       }
 679:printf.c      **** 
 680:printf.c      ****       case 'p' : {
 681:printf.c      ****         width = sizeof(void*) * 2U;
 682:printf.c      ****         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 683:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 684:printf.c      ****         const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 685:printf.c      ****         if (is_ll) {
 686:printf.c      ****           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U,
 687:printf.c      ****         }
 688:printf.c      ****         else {
 689:printf.c      **** #endif
 690:printf.c      ****           idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)),
 691:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 692:printf.c      ****         }
 693:printf.c      **** #endif
 694:printf.c      ****         format++;
 695:printf.c      ****         break;
 696:printf.c      ****       }
 697:printf.c      **** 
 698:printf.c      ****       case '%' :
 699:printf.c      ****         out('%', buffer, idx++, maxlen);
 700:printf.c      ****         format++;
 701:printf.c      ****         break;
 702:printf.c      **** 
 703:printf.c      ****       default :
 704:printf.c      ****         out(*format, buffer, idx++, maxlen);
 1418              		.loc 1 704 9 is_stmt 1 view .LVU423
 1419 014a 4A46     		mov	r2, r9
 1420 014c 099B     		ldr	r3, [sp, #36]
 1421 014e 0899     		ldr	r1, [sp, #32]
 1422 0150 D847     		blx	fp
 1423              	.LVL150:
 457:printf.c      ****   {
 1424              		.loc 1 457 10 is_stmt 0 view .LVU424
 1425 0152 9AF80000 		ldrb	r0, [r10]	@ zero_extendqisi2
 1426              		.loc 1 704 9 view .LVU425
 1427 0156 09F10109 		add	r9, r9, #1
 1428              	.LVL151:
 705:printf.c      ****         format++;
 1429              		.loc 1 705 9 is_stmt 1 view .LVU426
 706:printf.c      ****         break;
 1430              		.loc 1 706 9 view .LVU427
 457:printf.c      ****   {
 1431              		.loc 1 457 10 view .LVU428
 1432 015a 0028     		cmp	r0, #0
 1433 015c 7FF472AF 		bne	.L430
 1434              	.LVL152:
 1435              	.L576:
 707:printf.c      ****     }
 708:printf.c      ****   }
 709:printf.c      **** 
 710:printf.c      ****   // termination
 711:printf.c      ****   out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 712:printf.c      **** 
 713:printf.c      ****   // return written chars without terminating \0
 714:printf.c      ****   return (int)idx;
 1436              		.loc 1 714 10 is_stmt 0 view .LVU429
 1437 0160 DDF82480 		ldr	r8, [sp, #36]
 1438 0164 4C46     		mov	r4, r9
 1439              	.LVL153:
 1440              	.L431:
 711:printf.c      **** 
 1441              		.loc 1 711 3 is_stmt 1 view .LVU430
 1442 0166 C845     		cmp	r8, r9
 1443 0168 01D8     		bhi	.L432
 711:printf.c      **** 
 1444              		.loc 1 711 3 is_stmt 0 discriminator 1 view .LVU431
 1445 016a 08F1FF39 		add	r9, r8, #-1
 1446              	.L432:
 711:printf.c      **** 
 1447              		.loc 1 711 3 discriminator 4 view .LVU432
 1448 016e 0899     		ldr	r1, [sp, #32]
 1449 0170 4346     		mov	r3, r8
 1450 0172 4A46     		mov	r2, r9
 1451 0174 0020     		movs	r0, #0
 1452 0176 D847     		blx	fp
 1453              	.LVL154:
 1454              		.loc 1 714 3 is_stmt 1 view .LVU433
 715:printf.c      **** }
 1455              		.loc 1 715 1 is_stmt 0 view .LVU434
 1456 0178 2046     		mov	r0, r4
 1457 017a 1DB0     		add	sp, sp, #116
 1458              		.cfi_remember_state
 1459              		.cfi_def_cfa_offset 36
 1460              		@ sp needed
 1461 017c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1462              	.LVL155:
 1463              	.L293:
 1464              		.cfi_restore_state
 553:printf.c      ****       case 'd' :
 1465              		.loc 1 553 5 view .LVU435
 1466 0180 A0F16902 		sub	r2, r0, #105
 1467 0184 D2B2     		uxtb	r2, r2
 1468 0186 0F2A     		cmp	r2, #15
 1469 0188 DFD8     		bhi	.L296
 1470 018a 0123     		movs	r3, #1
 1471              	.LVL156:
 553:printf.c      ****       case 'd' :
 1472              		.loc 1 553 5 view .LVU436
 1473 018c 9340     		lsls	r3, r3, r2
 1474 018e 49F24101 		movw	r1, #36929
 1475 0192 13EA0108 		ands	r8, r3, r1
 1476 0196 40F0AD81 		bne	.L297
 1477 019a 0A2A     		cmp	r2, #10
 1478 019c 59D0     		beq	.L298
 1479 019e 072A     		cmp	r2, #7
 1480 01a0 D3D1     		bne	.L296
 1481              	.LBB170:
 681:printf.c      ****         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 1482              		.loc 1 681 9 is_stmt 1 view .LVU437
 1483              	.LVL157:
 682:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1484              		.loc 1 682 9 view .LVU438
 684:printf.c      ****         if (is_ll) {
 1485              		.loc 1 684 9 view .LVU439
 685:printf.c      ****           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U,
 1486              		.loc 1 685 9 view .LVU440
 690:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1487              		.loc 1 690 11 view .LVU441
 690:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1488              		.loc 1 690 81 is_stmt 0 view .LVU442
 1489 01a2 0A9D     		ldr	r5, [sp, #40]
 1490              	.LVL158:
 690:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1491              		.loc 1 690 81 view .LVU443
 1492 01a4 55F8043B 		ldr	r3, [r5], #4
 1493              	.LVL159:
 1494              	.LBB171:
 1495              	.LBI171:
 249:printf.c      **** {
 1496              		.loc 1 249 15 is_stmt 1 view .LVU444
 1497              	.LBB172:
 251:printf.c      ****   size_t len = 0U;
 1498              		.loc 1 251 3 view .LVU445
 252:printf.c      **** 
 1499              		.loc 1 252 3 view .LVU446
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 1500              		.loc 1 255 3 view .LVU447
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 1501              		.loc 1 255 6 is_stmt 0 view .LVU448
 1502 01a8 002B     		cmp	r3, #0
 1503 01aa 00F0D381 		beq	.L424
 1504              	.LBE172:
 1505              	.LBE171:
 682:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1506              		.loc 1 682 15 view .LVU449
 1507 01ae 44F02100 		orr	r0, r4, #33
 1508              	.LVL160:
 1509              	.L425:
 682:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1510              		.loc 1 682 15 view .LVU450
 1511 01b2 0DF1500E 		add	lr, sp, #80
 1512 01b6 7446     		mov	r4, lr
 1513              	.LVL161:
 682:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1514              		.loc 1 682 15 view .LVU451
 1515 01b8 04E0     		b	.L429
 1516              	.LVL162:
 1517              	.L581:
 1518              	.LBB179:
 1519              	.LBB176:
 265:printf.c      ****   }
 1520              		.loc 1 265 20 discriminator 1 view .LVU452
 1521 01ba B8F1200F 		cmp	r8, #32
 1522 01be 00F0D381 		beq	.L426
 1523              	.LBB173:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1524              		.loc 1 264 13 view .LVU453
 1525 01c2 1346     		mov	r3, r2
 1526              	.LVL163:
 1527              	.L429:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1528              		.loc 1 264 13 view .LVU454
 1529              	.LBE173:
 261:printf.c      ****       const char digit = (char)(value % base);
 1530              		.loc 1 261 5 is_stmt 1 view .LVU455
 1531              	.LBB174:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1532              		.loc 1 262 7 view .LVU456
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1533              		.loc 1 262 39 is_stmt 0 view .LVU457
 1534 01c4 03F00F02 		and	r2, r3, #15
 263:printf.c      ****       value /= base;
 1535              		.loc 1 263 18 view .LVU458
 1536 01c8 092A     		cmp	r2, #9
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1537              		.loc 1 262 18 view .LVU459
 1538 01ca 1146     		mov	r1, r2
 1539              	.LVL164:
 263:printf.c      ****       value /= base;
 1540              		.loc 1 263 7 is_stmt 1 view .LVU460
 263:printf.c      ****       value /= base;
 1541              		.loc 1 263 18 is_stmt 0 discriminator 7 view .LVU461
 1542 01cc 8CBF     		ite	hi
 1543 01ce 01F13702 		addhi	r2, r1, #55
 1544              	.LVL165:
 263:printf.c      ****       value /= base;
 1545              		.loc 1 263 18 discriminator 1 view .LVU462
 1546 01d2 3032     		addls	r2, r2, #48
 1547              	.LBE174:
 265:printf.c      ****   }
 1548              		.loc 1 265 20 view .LVU463
 1549 01d4 0F2B     		cmp	r3, #15
 1550              	.LBB175:
 263:printf.c      ****       value /= base;
 1551              		.loc 1 263 18 discriminator 8 view .LVU464
 1552 01d6 04F8012B 		strb	r2, [r4], #1
 263:printf.c      ****       value /= base;
 1553              		.loc 1 263 14 discriminator 8 view .LVU465
 1554 01da 08F10108 		add	r8, r8, #1
 1555              	.LVL166:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1556              		.loc 1 264 7 is_stmt 1 view .LVU466
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1557              		.loc 1 264 13 is_stmt 0 view .LVU467
 1558 01de 4FEA1312 		lsr	r2, r3, #4
 1559              	.LVL167:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1560              		.loc 1 264 13 view .LVU468
 1561              	.LBE175:
 265:printf.c      ****   }
 1562              		.loc 1 265 20 is_stmt 1 view .LVU469
 1563 01e2 EAD8     		bhi	.L581
 1564 01e4 C0E1     		b	.L426
 1565              	.LVL168:
 1566              	.L578:
 265:printf.c      ****   }
 1567              		.loc 1 265 20 is_stmt 0 view .LVU470
 1568              	.LBE176:
 1569              	.LBE179:
 1570              	.LBE170:
 1571              	.LBB182:
 1572              	.LBB183:
 165:printf.c      ****   while (_is_digit(**str)) {
 1573              		.loc 1 165 16 view .LVU471
 1574 01e6 0022     		movs	r2, #0
 1575 01e8 00E0     		b	.L276
 1576              	.LVL169:
 1577              	.L489:
 165:printf.c      ****   while (_is_digit(**str)) {
 1578              		.loc 1 165 16 view .LVU472
 1579 01ea 0133     		adds	r3, r3, #1
 1580              	.LVL170:
 1581              	.L276:
 167:printf.c      ****   }
 1582              		.loc 1 167 5 is_stmt 1 view .LVU473
 167:printf.c      ****   }
 1583              		.loc 1 167 11 is_stmt 0 view .LVU474
 1584 01ec 02EB8202 		add	r2, r2, r2, lsl #2
 1585              	.LVL171:
 167:printf.c      ****   }
 1586              		.loc 1 167 17 view .LVU475
 1587 01f0 00EB4202 		add	r2, r0, r2, lsl #1
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 1588              		.loc 1 166 10 view .LVU476
 1589 01f4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 1590              		.loc 1 166 10 discriminator 1 view .LVU477
 1591 01f6 A0F13001 		sub	r1, r0, #48
 1592 01fa 0929     		cmp	r1, #9
 167:printf.c      ****   }
 1593              		.loc 1 167 42 view .LVU478
 1594 01fc 9A46     		mov	r10, r3
 167:printf.c      ****   }
 1595              		.loc 1 167 7 view .LVU479
 1596 01fe A2F13002 		sub	r2, r2, #48
 1597              	.LVL172:
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 1598              		.loc 1 166 10 is_stmt 1 view .LVU480
 1599              	.LBB184:
 1600              	.LBI184:
 156:printf.c      **** {
 1601              		.loc 1 156 20 view .LVU481
 1602              	.LBB185:
 158:printf.c      **** }
 1603              		.loc 1 158 3 view .LVU482
 158:printf.c      **** }
 1604              		.loc 1 158 3 is_stmt 0 view .LVU483
 1605              	.LBE185:
 1606              	.LBE184:
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 1607              		.loc 1 166 10 discriminator 1 view .LVU484
 1608 0202 F2D9     		bls	.L489
 1609              	.LBE183:
 1610              	.LBE182:
 503:printf.c      ****       flags |= FLAGS_PRECISION;
 1611              		.loc 1 503 8 view .LVU485
 1612 0204 2E28     		cmp	r0, #46
 1613 0206 0B92     		str	r2, [sp, #44]
 1614 0208 03F10103 		add	r3, r3, #1
 1615              	.LVL173:
 502:printf.c      ****     if (*format == '.') {
 1616              		.loc 1 502 5 is_stmt 1 view .LVU486
 503:printf.c      ****       flags |= FLAGS_PRECISION;
 1617              		.loc 1 503 5 view .LVU487
 503:printf.c      ****       flags |= FLAGS_PRECISION;
 1618              		.loc 1 503 8 is_stmt 0 view .LVU488
 1619 020c 7FF43EAF 		bne	.L566
 1620              	.LVL174:
 1621              	.L580:
 506:printf.c      ****         precision = _atoi(&format);
 1622              		.loc 1 506 11 view .LVU489
 1623 0210 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 506:printf.c      ****         precision = _atoi(&format);
 1624              		.loc 1 506 10 discriminator 1 view .LVU490
 1625 0214 A0F13001 		sub	r1, r0, #48
 1626 0218 0929     		cmp	r1, #9
 504:printf.c      ****       format++;
 1627              		.loc 1 504 13 view .LVU491
 1628 021a 44F48064 		orr	r4, r4, #1024
 1629              	.LVL175:
 505:printf.c      ****       if (_is_digit(*format)) {
 1630              		.loc 1 505 13 view .LVU492
 1631 021e 1A46     		mov	r2, r3
 504:printf.c      ****       format++;
 1632              		.loc 1 504 7 is_stmt 1 view .LVU493
 1633              	.LVL176:
 505:printf.c      ****       if (_is_digit(*format)) {
 1634              		.loc 1 505 7 view .LVU494
 506:printf.c      ****         precision = _atoi(&format);
 1635              		.loc 1 506 7 view .LVU495
 1636              	.LBB186:
 1637              	.LBI186:
 156:printf.c      **** {
 1638              		.loc 1 156 20 view .LVU496
 1639              	.LBB187:
 158:printf.c      **** }
 1640              		.loc 1 158 3 view .LVU497
 158:printf.c      **** }
 1641              		.loc 1 158 3 is_stmt 0 view .LVU498
 1642              	.LBE187:
 1643              	.LBE186:
 506:printf.c      ****         precision = _atoi(&format);
 1644              		.loc 1 506 10 discriminator 1 view .LVU499
 1645 0220 40F27581 		bls	.L582
 509:printf.c      ****         const int prec = (int)va_arg(va, int);
 1646              		.loc 1 509 12 is_stmt 1 view .LVU500
 509:printf.c      ****         const int prec = (int)va_arg(va, int);
 1647              		.loc 1 509 15 is_stmt 0 view .LVU501
 1648 0224 2A28     		cmp	r0, #42
 1649 0226 00F08281 		beq	.L583
 1650              	.LVL177:
 505:printf.c      ****       if (_is_digit(*format)) {
 1651              		.loc 1 505 13 view .LVU502
 1652 022a 9A46     		mov	r10, r3
 1653 022c 0133     		adds	r3, r3, #1
 1654 022e 2DE7     		b	.L566
 1655              	.LVL178:
 1656              	.L579:
 1657              	.LBB188:
 490:printf.c      ****       if (w < 0) {
 1658              		.loc 1 490 7 is_stmt 1 view .LVU503
 490:printf.c      ****       if (w < 0) {
 1659              		.loc 1 490 17 is_stmt 0 view .LVU504
 1660 0230 0A9A     		ldr	r2, [sp, #40]
 1661              	.LVL179:
 490:printf.c      ****       if (w < 0) {
 1662              		.loc 1 490 17 view .LVU505
 1663              	.LBE188:
 503:printf.c      ****       flags |= FLAGS_PRECISION;
 1664              		.loc 1 503 9 view .LVU506
 1665 0232 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 1666              	.LBB189:
 490:printf.c      ****       if (w < 0) {
 1667              		.loc 1 490 17 view .LVU507
 1668 0236 52F8045B 		ldr	r5, [r2], #4
 1669              	.LVL180:
 491:printf.c      ****         flags |= FLAGS_LEFT;    // reverse padding
 1670              		.loc 1 491 7 is_stmt 1 view .LVU508
 490:printf.c      ****       if (w < 0) {
 1671              		.loc 1 490 17 is_stmt 0 view .LVU509
 1672 023a 0A92     		str	r2, [sp, #40]
 491:printf.c      ****         flags |= FLAGS_LEFT;    // reverse padding
 1673              		.loc 1 491 10 view .LVU510
 1674 023c 002D     		cmp	r5, #0
 492:printf.c      ****         width = (unsigned int)-w;
 1675              		.loc 1 492 9 is_stmt 1 view .LVU511
 493:printf.c      ****       }
 1676              		.loc 1 493 31 is_stmt 0 view .LVU512
 1677 023e B8BF     		it	lt
 1678 0240 6942     		rsblt	r1, r5, #0
 498:printf.c      ****     }
 1679              		.loc 1 498 13 view .LVU513
 1680 0242 9A46     		mov	r10, r3
 492:printf.c      ****         width = (unsigned int)-w;
 1681              		.loc 1 492 15 view .LVU514
 1682 0244 BABF     		itte	lt
 1683 0246 44F00204 		orrlt	r4, r4, #2
 1684              	.LVL181:
 493:printf.c      ****       }
 1685              		.loc 1 493 9 is_stmt 1 view .LVU515
 493:printf.c      ****       }
 1686              		.loc 1 493 31 is_stmt 0 view .LVU516
 1687 024a 0B91     		strlt	r1, [sp, #44]
 1688              	.LVL182:
 496:printf.c      ****       }
 1689              		.loc 1 496 9 is_stmt 1 view .LVU517
 496:printf.c      ****       }
 1690              		.loc 1 496 15 is_stmt 0 view .LVU518
 1691 024c 0B95     		strge	r5, [sp, #44]
 1692              	.LVL183:
 498:printf.c      ****     }
 1693              		.loc 1 498 7 is_stmt 1 view .LVU519
 498:printf.c      ****     }
 1694              		.loc 1 498 7 is_stmt 0 view .LVU520
 1695 024e 0133     		adds	r3, r3, #1
 1696 0250 19E7     		b	.L279
 1697              	.LVL184:
 1698              	.L298:
 498:printf.c      ****     }
 1699              		.loc 1 498 7 view .LVU521
 1700              	.LBE189:
 1701              	.LBB190:
 655:printf.c      ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 1702              		.loc 1 655 9 is_stmt 1 view .LVU522
 655:printf.c      ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 1703              		.loc 1 655 21 is_stmt 0 view .LVU523
 1704 0252 DDF828C0 		ldr	ip, [sp, #40]
 1705              	.LVL185:
 655:printf.c      ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 1706              		.loc 1 655 21 view .LVU524
 1707 0256 5CF8047B 		ldr	r7, [ip], #4
 1708              	.LVL186:
 656:printf.c      ****         // pre padding
 1709              		.loc 1 656 9 is_stmt 1 view .LVU525
 1710              	.LBB191:
 1711              	.LBB192:
 149:printf.c      ****   return (unsigned int)(s - str);
 1712              		.loc 1 149 17 is_stmt 0 discriminator 1 view .LVU526
 1713 025a 3978     		ldrb	r1, [r7]	@ zero_extendqisi2
 1714 025c 0846     		mov	r0, r1
 1715              	.LBE192:
 1716              	.LBE191:
 656:printf.c      ****         // pre padding
 1717              		.loc 1 656 26 view .LVU527
 1718 025e 002E     		cmp	r6, #0
 1719 0260 40F07281 		bne	.L584
 1720              	.LVL187:
 1721              	.LBB195:
 1722              	.LBB193:
 149:printf.c      ****   return (unsigned int)(s - str);
 1723              		.loc 1 149 20 is_stmt 1 discriminator 1 view .LVU528
 1724 0264 81B1     		cbz	r1, .L406
 149:printf.c      ****   return (unsigned int)(s - str);
 1725              		.loc 1 149 30 is_stmt 0 discriminator 3 view .LVU529
 1726 0266 6FF0010E 		mvn	lr, #1
 1727              	.LVL188:
 1728              	.L407:
 149:printf.c      ****   return (unsigned int)(s - str);
 1729              		.loc 1 149 30 discriminator 3 view .LVU530
 1730 026a 0EF1010E 		add	lr, lr, #1
 1731 026e BE44     		add	lr, lr, r7
 1732 0270 3B46     		mov	r3, r7
 1733 0272 03E0     		b	.L409
 1734              	.L613:
 1735              		.align	2
 1736              	.L612:
 1737 0274 00000000 		.word	_out_null
 1738              	.LVL189:
 1739              	.L408:
 149:printf.c      ****   return (unsigned int)(s - str);
 1740              		.loc 1 149 20 discriminator 3 view .LVU531
 1741 0278 7345     		cmp	r3, lr
 1742 027a 03D0     		beq	.L571
 1743              	.LVL190:
 1744              	.L409:
 149:printf.c      ****   return (unsigned int)(s - str);
 1745              		.loc 1 149 34 is_stmt 1 discriminator 4 view .LVU532
 149:printf.c      ****   return (unsigned int)(s - str);
 1746              		.loc 1 149 20 discriminator 1 view .LVU533
 1747 027c 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 1748              	.LVL191:
 149:printf.c      ****   return (unsigned int)(s - str);
 1749              		.loc 1 149 20 is_stmt 0 discriminator 1 view .LVU534
 1750 0280 002A     		cmp	r2, #0
 1751 0282 F9D1     		bne	.L408
 1752              	.L571:
 150:printf.c      **** }
 1753              		.loc 1 150 27 view .LVU535
 1754 0284 A3EB0708 		sub	r8, r3, r7
 1755              	.LVL192:
 1756              	.L406:
 150:printf.c      **** }
 1757              		.loc 1 150 3 is_stmt 1 view .LVU536
 150:printf.c      **** }
 1758              		.loc 1 150 3 is_stmt 0 view .LVU537
 1759              	.LBE193:
 1760              	.LBE195:
 658:printf.c      ****           l = (l < precision ? l : precision);
 1761              		.loc 1 658 9 is_stmt 1 view .LVU538
 658:printf.c      ****           l = (l < precision ? l : precision);
 1762              		.loc 1 658 12 is_stmt 0 view .LVU539
 1763 0288 14F48063 		ands	r3, r4, #1024
 1764 028c 02D0     		beq	.L410
 659:printf.c      ****         }
 1765              		.loc 1 659 11 is_stmt 1 view .LVU540
 659:printf.c      ****         }
 1766              		.loc 1 659 13 is_stmt 0 view .LVU541
 1767 028e B045     		cmp	r8, r6
 1768 0290 28BF     		it	cs
 1769 0292 B046     		movcs	r8, r6
 1770              	.LVL193:
 1771              	.L410:
 661:printf.c      ****           while (l++ < width) {
 1772              		.loc 1 661 9 is_stmt 1 view .LVU542
 661:printf.c      ****           while (l++ < width) {
 1773              		.loc 1 661 12 is_stmt 0 view .LVU543
 1774 0294 14F00204 		ands	r4, r4, #2
 1775              	.LVL194:
 661:printf.c      ****           while (l++ < width) {
 1776              		.loc 1 661 12 view .LVU544
 1777 0298 00F03982 		beq	.L585
 1778              	.LVL195:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1779              		.loc 1 667 26 is_stmt 1 view .LVU545
 1780 029c 0029     		cmp	r1, #0
 1781 029e 00F0C481 		beq	.L572
 1782              	.LVL196:
 1783              	.L416:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1784              		.loc 1 667 26 is_stmt 0 view .LVU546
 1785 02a2 002B     		cmp	r3, #0
 1786 02a4 00F0D681 		beq	.L419
 1787 02a8 0A94     		str	r4, [sp, #40]
 1788 02aa CDF83080 		str	r8, [sp, #48]
 1789 02ae DDE90845 		ldrd	r4, r5, [sp, #32]
 1790 02b2 4E44     		add	r6, r6, r9
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 1791              		.loc 1 662 22 view .LVU547
 1792 02b4 4A46     		mov	r2, r9
 1793 02b6 E046     		mov	r8, ip
 1794 02b8 06E0     		b	.L420
 1795              	.LVL197:
 1796              	.L586:
 668:printf.c      ****         }
 1797              		.loc 1 668 11 view .LVU548
 1798 02ba D847     		blx	fp
 1799              	.LVL198:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1800              		.loc 1 667 17 view .LVU549
 1801 02bc 17F8010F 		ldrb	r0, [r7, #1]!	@ zero_extendqisi2
 668:printf.c      ****         }
 1802              		.loc 1 668 11 view .LVU550
 1803 02c0 09F10109 		add	r9, r9, #1
 1804              	.LVL199:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1805              		.loc 1 667 26 is_stmt 1 view .LVU551
 668:printf.c      ****         }
 1806              		.loc 1 668 11 is_stmt 0 view .LVU552
 1807 02c4 4A46     		mov	r2, r9
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1808              		.loc 1 667 26 view .LVU553
 1809 02c6 18B1     		cbz	r0, .L563
 1810              	.LVL200:
 1811              	.L420:
 668:printf.c      ****         }
 1812              		.loc 1 668 11 is_stmt 1 view .LVU554
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1813              		.loc 1 667 57 is_stmt 0 discriminator 2 view .LVU555
 1814 02c8 4E45     		cmp	r6, r9
 668:printf.c      ****         }
 1815              		.loc 1 668 11 view .LVU556
 1816 02ca 2B46     		mov	r3, r5
 1817 02cc 2146     		mov	r1, r4
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1818              		.loc 1 667 57 discriminator 2 view .LVU557
 1819 02ce F4D1     		bne	.L586
 1820              	.LVL201:
 1821              	.L563:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 1822              		.loc 1 667 57 discriminator 2 view .LVU558
 1823 02d0 C446     		mov	ip, r8
 1824 02d2 0A9C     		ldr	r4, [sp, #40]
 1825 02d4 DDF83080 		ldr	r8, [sp, #48]
 1826              	.LVL202:
 1827              	.L415:
 671:printf.c      ****           while (l++ < width) {
 1828              		.loc 1 671 9 is_stmt 1 view .LVU559
 671:printf.c      ****           while (l++ < width) {
 1829              		.loc 1 671 12 is_stmt 0 view .LVU560
 1830 02d8 002C     		cmp	r4, #0
 1831 02da 40F0A681 		bne	.L572
 1832              	.LVL203:
 1833              	.L418:
 676:printf.c      ****         break;
 1834              		.loc 1 676 9 is_stmt 1 view .LVU561
 677:printf.c      ****       }
 1835              		.loc 1 677 9 view .LVU562
 655:printf.c      ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 1836              		.loc 1 655 21 is_stmt 0 view .LVU563
 1837 02de CDF828C0 		str	ip, [sp, #40]
 677:printf.c      ****       }
 1838              		.loc 1 677 9 view .LVU564
 1839 02e2 AAE6     		b	.L268
 1840              	.LVL204:
 1841              	.L288:
 677:printf.c      ****       }
 1842              		.loc 1 677 9 view .LVU565
 1843              	.LBE190:
 519:printf.c      ****         format++;
 1844              		.loc 1 519 9 is_stmt 1 view .LVU566
 520:printf.c      ****         if (*format == 'l') {
 1845              		.loc 1 520 9 view .LVU567
 521:printf.c      ****           flags |= FLAGS_LONG_LONG;
 1846              		.loc 1 521 9 view .LVU568
 521:printf.c      ****           flags |= FLAGS_LONG_LONG;
 1847              		.loc 1 521 13 is_stmt 0 view .LVU569
 1848 02e4 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 521:printf.c      ****           flags |= FLAGS_LONG_LONG;
 1849              		.loc 1 521 12 view .LVU570
 1850 02e8 6C28     		cmp	r0, #108
 1851 02ea 7FF4FFAE 		bne	.L567
 522:printf.c      ****           format++;
 1852              		.loc 1 522 11 is_stmt 1 view .LVU571
 553:printf.c      ****       case 'd' :
 1853              		.loc 1 553 13 is_stmt 0 view .LVU572
 1854 02ee 9AF80200 		ldrb	r0, [r10, #2]	@ zero_extendqisi2
 522:printf.c      ****           format++;
 1855              		.loc 1 522 17 view .LVU573
 1856 02f2 44F44074 		orr	r4, r4, #768
 1857              	.LVL205:
 523:printf.c      ****         }
 1858              		.loc 1 523 11 is_stmt 1 view .LVU574
 523:printf.c      ****         }
 1859              		.loc 1 523 11 is_stmt 0 view .LVU575
 1860 02f6 0AF10303 		add	r3, r10, #3
 1861 02fa FAE6     		b	.L285
 1862              	.LVL206:
 1863              	.L289:
 541:printf.c      ****         format++;
 1864              		.loc 1 541 9 is_stmt 1 view .LVU576
 521:printf.c      ****           flags |= FLAGS_LONG_LONG;
 1865              		.loc 1 521 13 is_stmt 0 view .LVU577
 1866 02fc 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 541:printf.c      ****         format++;
 1867              		.loc 1 541 15 view .LVU578
 1868 0300 44F40074 		orr	r4, r4, #512
 1869              	.LVL207:
 542:printf.c      ****         break;
 1870              		.loc 1 542 9 is_stmt 1 view .LVU579
 543:printf.c      ****       case 'z' :
 1871              		.loc 1 543 9 view .LVU580
 543:printf.c      ****       case 'z' :
 1872              		.loc 1 543 9 is_stmt 0 view .LVU581
 1873 0304 0133     		adds	r3, r3, #1
 1874              	.LVL208:
 543:printf.c      ****       case 'z' :
 1875              		.loc 1 543 9 view .LVU582
 1876 0306 F4E6     		b	.L285
 1877              	.LVL209:
 1878              	.L290:
 527:printf.c      ****         format++;
 1879              		.loc 1 527 9 is_stmt 1 view .LVU583
 528:printf.c      ****         if (*format == 'h') {
 1880              		.loc 1 528 9 view .LVU584
 529:printf.c      ****           flags |= FLAGS_CHAR;
 1881              		.loc 1 529 9 view .LVU585
 529:printf.c      ****           flags |= FLAGS_CHAR;
 1882              		.loc 1 529 13 is_stmt 0 view .LVU586
 1883 0308 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 529:printf.c      ****           flags |= FLAGS_CHAR;
 1884              		.loc 1 529 12 view .LVU587
 1885 030c 6828     		cmp	r0, #104
 1886 030e 00F0BF81 		beq	.L292
 527:printf.c      ****         format++;
 1887              		.loc 1 527 15 view .LVU588
 1888 0312 44F08004 		orr	r4, r4, #128
 1889              	.LVL210:
 527:printf.c      ****         format++;
 1890              		.loc 1 527 15 view .LVU589
 1891 0316 0133     		adds	r3, r3, #1
 1892              	.LVL211:
 527:printf.c      ****         format++;
 1893              		.loc 1 527 15 view .LVU590
 1894 0318 EBE6     		b	.L285
 1895              	.LVL212:
 1896              	.L300:
 630:printf.c      ****         format++;
 1897              		.loc 1 630 9 is_stmt 1 view .LVU591
 630:printf.c      ****         format++;
 1898              		.loc 1 630 15 is_stmt 0 view .LVU592
 1899 031a 0A9B     		ldr	r3, [sp, #40]
 1900 031c 0733     		adds	r3, r3, #7
 1901 031e 23F00703 		bic	r3, r3, #7
 1902              	.LVL213:
 630:printf.c      ****         format++;
 1903              		.loc 1 630 15 view .LVU593
 1904 0322 B3EC027B 		vldmia.64	r3!, {d7}
 1905              	.LVL214:
 1906              	.LBB197:
 1907              	.LBB198:
 314:printf.c      ****     out('n', buffer, idx++, maxlen);
 1908              		.loc 1 314 6 view .LVU594
 1909 0326 51EC170B 		vmov	r0, r1, d7
 1910              	.LBE198:
 1911              	.LBE197:
 630:printf.c      ****         format++;
 1912              		.loc 1 630 15 view .LVU595
 1913 032a 0A93     		str	r3, [sp, #40]
 1914              	.LVL215:
 1915              	.LBB218:
 1916              	.LBI197:
 299:printf.c      **** {
 1917              		.loc 1 299 15 is_stmt 1 view .LVU596
 1918              	.LBB206:
 301:printf.c      **** 
 1919              		.loc 1 301 3 view .LVU597
 303:printf.c      ****   size_t len  = 0U;
 1920              		.loc 1 303 3 view .LVU598
 304:printf.c      ****   double diff = 0.0;
 1921              		.loc 1 304 3 view .LVU599
 305:printf.c      **** 
 1922              		.loc 1 305 3 view .LVU600
 308:printf.c      **** 
 1923              		.loc 1 308 3 view .LVU601
 311:printf.c      **** 
 1924              		.loc 1 311 3 view .LVU602
 314:printf.c      ****     out('n', buffer, idx++, maxlen);
 1925              		.loc 1 314 3 view .LVU603
 314:printf.c      ****     out('n', buffer, idx++, maxlen);
 1926              		.loc 1 314 6 is_stmt 0 view .LVU604
 1927 032c 0246     		mov	r2, r0
 1928 032e 0B46     		mov	r3, r1
 1929              	.LVL216:
 314:printf.c      ****     out('n', buffer, idx++, maxlen);
 1930              		.loc 1 314 6 view .LVU605
 1931              	.LBE206:
 1932              	.LBE218:
 630:printf.c      ****         format++;
 1933              		.loc 1 630 15 view .LVU606
 1934 0330 8DED0C7B 		vstr.64	d7, [sp, #48]
 1935              	.LBB219:
 1936              	.LBB207:
 314:printf.c      ****     out('n', buffer, idx++, maxlen);
 1937              		.loc 1 314 6 view .LVU607
 1938 0334 FFF7FEFF 		bl	__aeabi_dcmpeq
 1939              	.LVL217:
 1940 0338 0028     		cmp	r0, #0
 1941 033a 00F0BC81 		beq	.L587
 322:printf.c      ****   if (value < 0) {
 1942              		.loc 1 322 3 is_stmt 1 view .LVU608
 1943              	.LVL218:
 323:printf.c      ****     negative = true;
 1944              		.loc 1 323 3 view .LVU609
 323:printf.c      ****     negative = true;
 1945              		.loc 1 323 6 is_stmt 0 view .LVU610
 1946 033e DDE90C78 		ldrd	r7, [sp, #48]
 1947 0342 0022     		movs	r2, #0
 1948 0344 0023     		movs	r3, #0
 1949 0346 3846     		mov	r0, r7
 1950 0348 4146     		mov	r1, r8
 1951 034a FFF7FEFF 		bl	__aeabi_dcmplt
 1952              	.LVL219:
 1953 034e 0028     		cmp	r0, #0
 1954 0350 40F05D81 		bne	.L588
 322:printf.c      ****   if (value < 0) {
 1955              		.loc 1 322 8 view .LVU611
 1956 0354 1290     		str	r0, [sp, #72]
 1957              	.LVL220:
 1958              	.L358:
 329:printf.c      ****     prec = 6U;
 1959              		.loc 1 329 3 is_stmt 1 view .LVU612
 329:printf.c      ****     prec = 6U;
 1960              		.loc 1 329 6 is_stmt 0 view .LVU613
 1961 0356 14F48067 		ands	r7, r4, #1024
 1962 035a 00F0D181 		beq	.L456
 333:printf.c      ****     buf[len++] = '0';
 1963              		.loc 1 333 42 is_stmt 1 view .LVU614
 333:printf.c      ****     buf[len++] = '0';
 1964              		.loc 1 333 42 is_stmt 0 discriminator 1 view .LVU615
 1965 035e 092E     		cmp	r6, #9
 1966 0360 40F2BB84 		bls	.L589
 1967 0364 14AA     		add	r2, sp, #80
 1968 0366 A6F10907 		sub	r7, r6, #9
 1969 036a 0023     		movs	r3, #0
 334:printf.c      ****     prec--;
 1970              		.loc 1 334 16 view .LVU616
 1971 036c 3021     		movs	r1, #48
 1972              	.LVL221:
 1973              	.L362:
 334:printf.c      ****     prec--;
 1974              		.loc 1 334 5 is_stmt 1 view .LVU617
 334:printf.c      ****     prec--;
 1975              		.loc 1 334 12 is_stmt 0 view .LVU618
 1976 036e 0133     		adds	r3, r3, #1
 1977              	.LVL222:
 333:printf.c      ****     buf[len++] = '0';
 1978              		.loc 1 333 42 view .LVU619
 1979 0370 202B     		cmp	r3, #32
 334:printf.c      ****     prec--;
 1980              		.loc 1 334 16 view .LVU620
 1981 0372 02F8011B 		strb	r1, [r2], #1
 335:printf.c      ****   }
 1982              		.loc 1 335 5 is_stmt 1 view .LVU621
 335:printf.c      ****   }
 1983              		.loc 1 335 9 is_stmt 0 view .LVU622
 1984 0376 A6EB0308 		sub	r8, r6, r3
 333:printf.c      ****     buf[len++] = '0';
 1985              		.loc 1 333 42 is_stmt 1 view .LVU623
 1986 037a 00F02782 		beq	.L457
 333:printf.c      ****     buf[len++] = '0';
 1987              		.loc 1 333 42 is_stmt 0 discriminator 1 view .LVU624
 1988 037e BB42     		cmp	r3, r7
 1989 0380 F5D1     		bne	.L362
 1990              	.L569:
 1991 0382 9FEDBD7B 		vldr.64	d7, .L614
 1992 0386 8DED0E7B 		vstr.64	d7, [sp, #56]
 1993              	.LVL223:
 1994              	.L360:
 338:printf.c      ****   double tmp = (value - whole) * pow10[prec];
 1995              		.loc 1 338 3 is_stmt 1 view .LVU625
 338:printf.c      ****   double tmp = (value - whole) * pow10[prec];
 1996              		.loc 1 338 7 is_stmt 0 view .LVU626
 1997 038a DDE90C01 		ldrd	r0, [sp, #48]
 1998 038e FFF7FEFF 		bl	__aeabi_d2iz
 1999              	.LVL224:
 2000 0392 0646     		mov	r6, r0
 2001              	.LVL225:
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 2002              		.loc 1 339 3 is_stmt 1 view .LVU627
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 2003              		.loc 1 339 23 is_stmt 0 view .LVU628
 2004 0394 FFF7FEFF 		bl	__aeabi_i2d
 2005              	.LVL226:
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 2006              		.loc 1 339 23 view .LVU629
 2007 0398 0246     		mov	r2, r0
 2008 039a 0B46     		mov	r3, r1
 2009 039c DDE90C01 		ldrd	r0, [sp, #48]
 2010 03a0 FFF7FEFF 		bl	__aeabi_dsub
 2011              	.LVL227:
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 2012              		.loc 1 339 10 view .LVU630
 2013 03a4 DDE90E23 		ldrd	r2, [sp, #56]
 2014 03a8 FFF7FEFF 		bl	__aeabi_dmul
 2015              	.LVL228:
 340:printf.c      ****   diff = tmp - frac;
 2016              		.loc 1 340 3 is_stmt 1 view .LVU631
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 2017              		.loc 1 339 10 is_stmt 0 view .LVU632
 2018 03ac 0246     		mov	r2, r0
 2019 03ae 0B46     		mov	r3, r1
 2020 03b0 CDE91023 		strd	r2, [sp, #64]
 2021              	.LVL229:
 340:printf.c      ****   diff = tmp - frac;
 2022              		.loc 1 340 17 view .LVU633
 2023 03b4 FFF7FEFF 		bl	__aeabi_d2uiz
 2024              	.LVL230:
 2025 03b8 0546     		mov	r5, r0
 2026              	.LVL231:
 341:printf.c      **** 
 2027              		.loc 1 341 3 is_stmt 1 view .LVU634
 341:printf.c      **** 
 2028              		.loc 1 341 14 is_stmt 0 view .LVU635
 2029 03ba FFF7FEFF 		bl	__aeabi_ui2d
 2030              	.LVL232:
 341:printf.c      **** 
 2031              		.loc 1 341 14 view .LVU636
 2032 03be 0246     		mov	r2, r0
 2033 03c0 0B46     		mov	r3, r1
 341:printf.c      **** 
 2034              		.loc 1 341 8 view .LVU637
 2035 03c2 DDE91001 		ldrd	r0, [sp, #64]
 2036 03c6 FFF7FEFF 		bl	__aeabi_dsub
 2037              	.LVL233:
 2038 03ca 0246     		mov	r2, r0
 2039 03cc 0B46     		mov	r3, r1
 2040 03ce CDE91023 		strd	r2, [sp, #64]
 2041              	.LVL234:
 343:printf.c      ****     ++frac;
 2042              		.loc 1 343 3 is_stmt 1 view .LVU638
 343:printf.c      ****     ++frac;
 2043              		.loc 1 343 6 is_stmt 0 view .LVU639
 2044 03d2 AD4B     		ldr	r3, .L614+16
 2045 03d4 0022     		movs	r2, #0
 2046              	.LVL235:
 343:printf.c      ****     ++frac;
 2047              		.loc 1 343 6 view .LVU640
 2048 03d6 FFF7FEFF 		bl	__aeabi_dcmpgt
 2049              	.LVL236:
 2050 03da 0028     		cmp	r0, #0
 2051 03dc 00F08281 		beq	.L547
 344:printf.c      ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 2052              		.loc 1 344 5 is_stmt 1 view .LVU641
 2053 03e0 0135     		adds	r5, r5, #1
 2054              	.LVL237:
 346:printf.c      ****       frac = 0;
 2055              		.loc 1 346 5 view .LVU642
 346:printf.c      ****       frac = 0;
 2056              		.loc 1 346 14 is_stmt 0 view .LVU643
 2057 03e2 2846     		mov	r0, r5
 2058 03e4 FFF7FEFF 		bl	__aeabi_ui2d
 2059              	.LVL238:
 346:printf.c      ****       frac = 0;
 2060              		.loc 1 346 8 view .LVU644
 2061 03e8 DDE90E23 		ldrd	r2, [sp, #56]
 2062 03ec FFF7FEFF 		bl	__aeabi_dcmpge
 2063              	.LVL239:
 2064 03f0 08B1     		cbz	r0, .L365
 347:printf.c      ****       ++whole;
 2065              		.loc 1 347 7 is_stmt 1 view .LVU645
 2066              	.LVL240:
 348:printf.c      ****     }
 2067              		.loc 1 348 7 view .LVU646
 2068 03f2 0136     		adds	r6, r6, #1
 2069              	.LVL241:
 347:printf.c      ****       ++whole;
 2070              		.loc 1 347 12 is_stmt 0 view .LVU647
 2071 03f4 0025     		movs	r5, #0
 2072              	.LVL242:
 2073              	.L365:
 360:printf.c      ****     return 0U;
 2074              		.loc 1 360 3 is_stmt 1 view .LVU648
 360:printf.c      ****     return 0U;
 2075              		.loc 1 360 6 is_stmt 0 view .LVU649
 2076 03f6 A2A3     		adr	r3, .L614+8
 2077 03f8 D3E90023 		ldrd	r2, [r3]
 2078 03fc DDE90C01 		ldrd	r0, [sp, #48]
 2079 0400 FFF7FEFF 		bl	__aeabi_dcmpgt
 2080              	.LVL243:
 2081 0404 0028     		cmp	r0, #0
 2082 0406 40F0C181 		bne	.L458
 364:printf.c      ****     diff = value - (double)whole;
 2083              		.loc 1 364 3 is_stmt 1 view .LVU650
 364:printf.c      ****     diff = value - (double)whole;
 2084              		.loc 1 364 6 is_stmt 0 view .LVU651
 2085 040a B8F1000F 		cmp	r8, #0
 2086 040e 40F0C081 		bne	.L368
 365:printf.c      ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2087              		.loc 1 365 5 is_stmt 1 view .LVU652
 2088              	.LVL244:
 366:printf.c      ****       // exactly 0.5 and ODD, then round up
 2089              		.loc 1 366 5 view .LVU653
 365:printf.c      ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2090              		.loc 1 365 20 is_stmt 0 view .LVU654
 2091 0412 3046     		mov	r0, r6
 2092 0414 FFF7FEFF 		bl	__aeabi_i2d
 2093              	.LVL245:
 2094 0418 0246     		mov	r2, r0
 2095 041a 0B46     		mov	r3, r1
 365:printf.c      ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2096              		.loc 1 365 10 view .LVU655
 2097 041c DDE90C01 		ldrd	r0, [sp, #48]
 2098 0420 FFF7FEFF 		bl	__aeabi_dsub
 2099              	.LVL246:
 366:printf.c      ****       // exactly 0.5 and ODD, then round up
 2100              		.loc 1 366 8 view .LVU656
 2101 0424 984B     		ldr	r3, .L614+16
 2102 0426 0022     		movs	r2, #0
 2103 0428 FFF7FEFF 		bl	__aeabi_dcmplt
 2104              	.LVL247:
 2105 042c 0028     		cmp	r0, #0
 2106 042e 00F04682 		beq	.L548
 2107              	.LVL248:
 2108              	.L570:
 366:printf.c      ****       // exactly 0.5 and ODD, then round up
 2109              		.loc 1 366 8 view .LVU657
 2110 0432 0DF1500E 		add	lr, sp, #80
 2111              	.LVL249:
 2112              	.L369:
 366:printf.c      ****       // exactly 0.5 and ODD, then round up
 2113              		.loc 1 366 8 view .LVU658
 2114 0436 791E     		subs	r1, r7, #1
 394:printf.c      ****     if (!(whole /= 10)) {
 2115              		.loc 1 394 37 view .LVU659
 2116 0438 9448     		ldr	r0, .L614+20
 2117 043a 7144     		add	r1, r1, lr
 2118 043c 06E0     		b	.L377
 2119              	.LVL250:
 2120              	.L378:
 394:printf.c      ****     if (!(whole /= 10)) {
 2121              		.loc 1 394 16 view .LVU660
 2122 043e 01F8016F 		strb	r6, [r1, #1]!
 394:printf.c      ****     if (!(whole /= 10)) {
 2123              		.loc 1 394 12 view .LVU661
 2124 0442 0137     		adds	r7, r7, #1
 2125              	.LVL251:
 395:printf.c      ****       break;
 2126              		.loc 1 395 5 is_stmt 1 view .LVU662
 395:printf.c      ****       break;
 2127              		.loc 1 395 8 is_stmt 0 view .LVU663
 2128 0444 1E46     		mov	r6, r3
 2129 0446 002B     		cmp	r3, #0
 2130 0448 00F0C281 		beq	.L590
 2131              	.LVL252:
 2132              	.L377:
 394:printf.c      ****     if (!(whole /= 10)) {
 2133              		.loc 1 394 5 is_stmt 1 view .LVU664
 393:printf.c      ****     buf[len++] = (char)(48 + (whole % 10));
 2134              		.loc 1 393 14 view .LVU665
 394:printf.c      ****     if (!(whole /= 10)) {
 2135              		.loc 1 394 37 is_stmt 0 view .LVU666
 2136 044c 80FB0632 		smull	r3, r2, r0, r6
 2137 0450 F317     		asrs	r3, r6, #31
 2138 0452 C3EBA203 		rsb	r3, r3, r2, asr #2
 2139 0456 03EB8302 		add	r2, r3, r3, lsl #2
 2140 045a A6EB4206 		sub	r6, r6, r2, lsl #1
 2141              	.LVL253:
 393:printf.c      ****     buf[len++] = (char)(48 + (whole % 10));
 2142              		.loc 1 393 14 view .LVU667
 2143 045e 202F     		cmp	r7, #32
 394:printf.c      ****     if (!(whole /= 10)) {
 2144              		.loc 1 394 18 view .LVU668
 2145 0460 06F13006 		add	r6, r6, #48
 393:printf.c      ****     buf[len++] = (char)(48 + (whole % 10));
 2146              		.loc 1 393 14 view .LVU669
 2147 0464 EBD1     		bne	.L378
 2148              	.LVL254:
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2149              		.loc 1 401 3 is_stmt 1 view .LVU670
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2150              		.loc 1 401 29 is_stmt 0 view .LVU671
 2151 0466 04F00302 		and	r2, r4, #3
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2152              		.loc 1 401 6 view .LVU672
 2153 046a 012A     		cmp	r2, #1
 2154 046c 40F0CF83 		bne	.L471
 402:printf.c      ****       width--;
 2155              		.loc 1 402 5 is_stmt 1 view .LVU673
 402:printf.c      ****       width--;
 2156              		.loc 1 402 8 is_stmt 0 view .LVU674
 2157 0470 0B9B     		ldr	r3, [sp, #44]
 2158 0472 002B     		cmp	r3, #0
 2159 0474 00F03282 		beq	.L387
 2160              	.LVL255:
 2161              	.L435:
 402:printf.c      ****       width--;
 2162              		.loc 1 402 15 discriminator 1 view .LVU675
 2163 0478 129B     		ldr	r3, [sp, #72]
 2164 047a 13B9     		cbnz	r3, .L382
 402:printf.c      ****       width--;
 2165              		.loc 1 402 28 discriminator 2 view .LVU676
 2166 047c 14F00C0F 		tst	r4, #12
 2167 0480 02D0     		beq	.L383
 2168              	.L382:
 403:printf.c      ****     }
 2169              		.loc 1 403 7 is_stmt 1 view .LVU677
 403:printf.c      ****     }
 2170              		.loc 1 403 12 is_stmt 0 view .LVU678
 2171 0482 0B9B     		ldr	r3, [sp, #44]
 2172 0484 013B     		subs	r3, r3, #1
 2173 0486 0B93     		str	r3, [sp, #44]
 2174              	.LVL256:
 2175              	.L383:
 405:printf.c      ****       buf[len++] = '0';
 2176              		.loc 1 405 26 is_stmt 1 view .LVU679
 2177 0488 0B9B     		ldr	r3, [sp, #44]
 2178 048a BB42     		cmp	r3, r7
 2179 048c 0FD9     		bls	.L551
 405:printf.c      ****       buf[len++] = '0';
 2180              		.loc 1 405 26 is_stmt 0 discriminator 1 view .LVU680
 2181 048e 202F     		cmp	r7, #32
 2182 0490 00F02482 		beq	.L387
 2183 0494 1946     		mov	r1, r3
 2184 0496 7B1E     		subs	r3, r7, #1
 2185 0498 7344     		add	r3, r3, lr
 406:printf.c      ****     }
 2186              		.loc 1 406 18 view .LVU681
 2187 049a 3022     		movs	r2, #48
 2188 049c 02E0     		b	.L388
 2189              	.LVL257:
 2190              	.L384:
 405:printf.c      ****       buf[len++] = '0';
 2191              		.loc 1 405 26 discriminator 1 view .LVU682
 2192 049e 202F     		cmp	r7, #32
 2193 04a0 00F01C82 		beq	.L387
 2194              	.L388:
 406:printf.c      ****     }
 2195              		.loc 1 406 7 is_stmt 1 view .LVU683
 406:printf.c      ****     }
 2196              		.loc 1 406 14 is_stmt 0 view .LVU684
 2197 04a4 0137     		adds	r7, r7, #1
 2198              	.LVL258:
 405:printf.c      ****       buf[len++] = '0';
 2199              		.loc 1 405 26 view .LVU685
 2200 04a6 8F42     		cmp	r7, r1
 406:printf.c      ****     }
 2201              		.loc 1 406 18 view .LVU686
 2202 04a8 03F8012F 		strb	r2, [r3, #1]!
 405:printf.c      ****       buf[len++] = '0';
 2203              		.loc 1 405 26 is_stmt 1 view .LVU687
 2204 04ac F7D1     		bne	.L384
 2205              	.LVL259:
 2206              	.L551:
 410:printf.c      ****     if (negative) {
 2207              		.loc 1 410 3 view .LVU688
 410:printf.c      ****     if (negative) {
 2208              		.loc 1 410 6 is_stmt 0 view .LVU689
 2209 04ae 202F     		cmp	r7, #32
 2210 04b0 00F01482 		beq	.L387
 410:printf.c      ****     if (negative) {
 2211              		.loc 1 410 6 view .LVU690
 2212 04b4 0122     		movs	r2, #1
 2213 04b6 93E1     		b	.L389
 2214              	.LVL260:
 2215              	.L303:
 410:printf.c      ****     if (negative) {
 2216              		.loc 1 410 6 view .LVU691
 2217              	.LBE207:
 2218              	.LBE219:
 2219              	.LBB220:
 635:printf.c      ****         // pre padding
 2220              		.loc 1 635 9 is_stmt 1 view .LVU692
 637:printf.c      ****           while (l++ < width) {
 2221              		.loc 1 637 9 view .LVU693
 2222              	.LBE220:
 2223              	.LBB221:
 2224              	.LBB96:
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 2225              		.loc 1 601 24 is_stmt 0 view .LVU694
 2226 04b8 0A9B     		ldr	r3, [sp, #40]
 2227              	.LBE96:
 2228              	.LBE221:
 2229              	.LBB222:
 637:printf.c      ****           while (l++ < width) {
 2230              		.loc 1 637 12 view .LVU695
 2231 04ba A407     		lsls	r4, r4, #30
 2232              	.LVL261:
 637:printf.c      ****           while (l++ < width) {
 2233              		.loc 1 637 12 view .LVU696
 2234              	.LBE222:
 462:printf.c      ****       format++;
 2235              		.loc 1 462 7 view .LVU697
 2236 04bc 09F10106 		add	r6, r9, #1
 2237              	.LBB223:
 2238              	.LBB106:
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 2239              		.loc 1 601 24 view .LVU698
 2240 04c0 03F10407 		add	r7, r3, #4
 2241              	.LBE106:
 2242              	.LBE223:
 2243              	.LBB224:
 637:printf.c      ****           while (l++ < width) {
 2244              		.loc 1 637 12 view .LVU699
 2245 04c4 40F14681 		bpl	.L591
 643:printf.c      ****         // post padding
 2246              		.loc 1 643 9 is_stmt 1 view .LVU700
 2247              	.LVL262:
 643:printf.c      ****         // post padding
 2248              		.loc 1 643 9 is_stmt 0 discriminator 1 view .LVU701
 2249 04c8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2250 04ca 0899     		ldr	r1, [sp, #32]
 2251 04cc 099B     		ldr	r3, [sp, #36]
 2252 04ce 4A46     		mov	r2, r9
 2253 04d0 D847     		blx	fp
 2254              	.LVL263:
 645:printf.c      ****           while (l++ < width) {
 2255              		.loc 1 645 9 is_stmt 1 view .LVU702
 646:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2256              		.loc 1 646 22 view .LVU703
 646:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2257              		.loc 1 646 22 is_stmt 0 view .LVU704
 2258 04d2 0B9B     		ldr	r3, [sp, #44]
 2259 04d4 012B     		cmp	r3, #1
 2260 04d6 40F20B82 		bls	.L434
 2261 04da DDE90845 		ldrd	r4, r5, [sp, #32]
 2262 04de 9944     		add	r9, r9, r3
 2263              	.LVL264:
 2264              	.L404:
 647:printf.c      ****           }
 2265              		.loc 1 647 13 is_stmt 1 view .LVU705
 2266 04e0 3246     		mov	r2, r6
 2267 04e2 2B46     		mov	r3, r5
 2268 04e4 0136     		adds	r6, r6, #1
 2269              	.LVL265:
 647:printf.c      ****           }
 2270              		.loc 1 647 13 is_stmt 0 view .LVU706
 2271 04e6 2146     		mov	r1, r4
 2272 04e8 2020     		movs	r0, #32
 2273 04ea D847     		blx	fp
 2274              	.LVL266:
 646:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2275              		.loc 1 646 22 is_stmt 1 view .LVU707
 646:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2276              		.loc 1 646 22 is_stmt 0 view .LVU708
 2277 04ec 4E45     		cmp	r6, r9
 2278 04ee F7D1     		bne	.L404
 2279              	.LVL267:
 2280              	.L403:
 650:printf.c      ****         break;
 2281              		.loc 1 650 9 is_stmt 1 view .LVU709
 651:printf.c      ****       }
 2282              		.loc 1 651 9 view .LVU710
 643:printf.c      ****         // post padding
 2283              		.loc 1 643 19 is_stmt 0 view .LVU711
 2284 04f0 0A97     		str	r7, [sp, #40]
 651:printf.c      ****       }
 2285              		.loc 1 651 9 view .LVU712
 2286 04f2 A2E5     		b	.L268
 2287              	.LVL268:
 2288              	.L297:
 651:printf.c      ****       }
 2289              		.loc 1 651 9 view .LVU713
 2290              	.LBE224:
 2291              	.LBB225:
 562:printf.c      ****         if (*format == 'x' || *format == 'X') {
 2292              		.loc 1 562 9 is_stmt 1 view .LVU714
 563:printf.c      ****           base = 16U;
 2293              		.loc 1 563 9 view .LVU715
 2294 04f4 6F28     		cmp	r0, #111
 2295 04f6 00F09580 		beq	.L592
 2296 04fa 40F26182 		bls	.L593
 2297 04fe 7828     		cmp	r0, #120
 2298 0500 00F0DA81 		beq	.L446
 573:printf.c      ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 2299              		.loc 1 573 11 view .LVU716
 2300              	.LVL269:
 574:printf.c      ****         }
 2301              		.loc 1 574 11 view .LVU717
 574:printf.c      ****         }
 2302              		.loc 1 574 17 is_stmt 0 view .LVU718
 2303 0504 0A27     		movs	r7, #10
 2304 0506 24F01004 		bic	r4, r4, #16
 2305              	.LVL270:
 577:printf.c      ****           flags |= FLAGS_UPPERCASE;
 2306              		.loc 1 577 9 is_stmt 1 view .LVU719
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2307              		.loc 1 582 9 view .LVU720
 574:printf.c      ****         }
 2308              		.loc 1 574 17 is_stmt 0 view .LVU721
 2309 050a BC46     		mov	ip, r7
 2310 050c 47E0     		b	.L305
 2311              	.LVL271:
 2312              	.L582:
 574:printf.c      ****         }
 2313              		.loc 1 574 17 view .LVU722
 2314              	.LBE225:
 2315              	.LBB226:
 2316              	.LBB227:
 165:printf.c      ****   while (_is_digit(**str)) {
 2317              		.loc 1 165 16 view .LVU723
 2318 050e 0026     		movs	r6, #0
 2319              	.LVL272:
 2320              	.L284:
 167:printf.c      ****   }
 2321              		.loc 1 167 5 is_stmt 1 view .LVU724
 167:printf.c      ****   }
 2322              		.loc 1 167 11 is_stmt 0 view .LVU725
 2323 0510 06EB8606 		add	r6, r6, r6, lsl #2
 167:printf.c      ****   }
 2324              		.loc 1 167 17 view .LVU726
 2325 0514 00EB4600 		add	r0, r0, r6, lsl #1
 2326              	.LVL273:
 167:printf.c      ****   }
 2327              		.loc 1 167 7 view .LVU727
 2328 0518 A0F13006 		sub	r6, r0, #48
 2329              	.LVL274:
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 2330              		.loc 1 166 10 is_stmt 1 view .LVU728
 2331 051c 12F8010F 		ldrb	r0, [r2, #1]!	@ zero_extendqisi2
 2332              	.LVL275:
 2333              	.LBB228:
 2334              	.LBI228:
 156:printf.c      **** {
 2335              		.loc 1 156 20 view .LVU729
 2336              	.LBB229:
 158:printf.c      **** }
 2337              		.loc 1 158 3 view .LVU730
 158:printf.c      **** }
 2338              		.loc 1 158 3 is_stmt 0 view .LVU731
 2339              	.LBE229:
 2340              	.LBE228:
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 2341              		.loc 1 166 10 discriminator 1 view .LVU732
 2342 0520 A0F13003 		sub	r3, r0, #48
 2343 0524 092B     		cmp	r3, #9
 2344 0526 F3D9     		bls	.L284
 2345 0528 9246     		mov	r10, r2
 2346 052a 531C     		adds	r3, r2, #1
 2347 052c AFE5     		b	.L282
 2348              	.LVL276:
 2349              	.L583:
 166:printf.c      ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 2350              		.loc 1 166 10 discriminator 1 view .LVU733
 2351              	.LBE227:
 2352              	.LBE226:
 2353              	.LBB230:
 510:printf.c      ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2354              		.loc 1 510 9 is_stmt 1 view .LVU734
 510:printf.c      ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2355              		.loc 1 510 19 is_stmt 0 view .LVU735
 2356 052e 0A9B     		ldr	r3, [sp, #40]
 2357              	.LVL277:
 511:printf.c      ****         format++;
 2358              		.loc 1 511 9 is_stmt 1 view .LVU736
 2359              	.LBE230:
 517:printf.c      ****       case 'l' :
 2360              		.loc 1 517 13 is_stmt 0 view .LVU737
 2361 0530 9AF80200 		ldrb	r0, [r10, #2]	@ zero_extendqisi2
 2362              	.LBB231:
 511:printf.c      ****         format++;
 2363              		.loc 1 511 51 view .LVU738
 2364 0534 53F8046B 		ldr	r6, [r3], #4
 2365              	.LVL278:
 510:printf.c      ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2366              		.loc 1 510 19 view .LVU739
 2367 0538 0A93     		str	r3, [sp, #40]
 512:printf.c      ****       }
 2368              		.loc 1 512 15 view .LVU740
 2369 053a 0AF1020A 		add	r10, r10, #2
 511:printf.c      ****         format++;
 2370              		.loc 1 511 51 view .LVU741
 2371 053e 26EAE676 		bic	r6, r6, r6, asr #31
 2372              	.LVL279:
 512:printf.c      ****       }
 2373              		.loc 1 512 9 is_stmt 1 view .LVU742
 512:printf.c      ****       }
 2374              		.loc 1 512 9 is_stmt 0 view .LVU743
 2375 0542 0AF10103 		add	r3, r10, #1
 2376              	.LVL280:
 512:printf.c      ****       }
 2377              		.loc 1 512 9 view .LVU744
 2378 0546 A2E5     		b	.L282
 2379              	.LVL281:
 2380              	.L584:
 512:printf.c      ****       }
 2381              		.loc 1 512 9 view .LVU745
 2382              	.LBE231:
 2383              	.LBB232:
 2384              	.LBB196:
 2385              	.LBB194:
 149:printf.c      ****   return (unsigned int)(s - str);
 2386              		.loc 1 149 20 is_stmt 1 discriminator 1 view .LVU746
 2387 0548 0029     		cmp	r1, #0
 2388 054a 3FF49DAE 		beq	.L406
 149:printf.c      ****   return (unsigned int)(s - str);
 2389              		.loc 1 149 30 is_stmt 0 discriminator 3 view .LVU747
 2390 054e 06F1FF3E 		add	lr, r6, #-1
 2391              	.LVL282:
 149:printf.c      ****   return (unsigned int)(s - str);
 2392              		.loc 1 149 30 discriminator 3 view .LVU748
 2393 0552 8AE6     		b	.L407
 2394              	.LVL283:
 2395              	.L424:
 149:printf.c      ****   return (unsigned int)(s - str);
 2396              		.loc 1 149 30 discriminator 3 view .LVU749
 2397              	.LBE194:
 2398              	.LBE196:
 2399              	.LBE232:
 2400              	.LBB233:
 2401              	.LBB180:
 2402              	.LBB177:
 256:printf.c      ****   }
 2403              		.loc 1 256 5 is_stmt 1 view .LVU750
 256:printf.c      ****   }
 2404              		.loc 1 256 11 is_stmt 0 view .LVU751
 2405 0554 24F01000 		bic	r0, r4, #16
 260:printf.c      ****     do {
 2406              		.loc 1 260 6 view .LVU752
 2407 0558 14F48063 		ands	r3, r4, #1024
 2408              	.LVL284:
 256:printf.c      ****   }
 2409              		.loc 1 256 11 view .LVU753
 2410 055c 40F02100 		orr	r0, r0, #33
 2411              	.LVL285:
 260:printf.c      ****     do {
 2412              		.loc 1 260 3 is_stmt 1 view .LVU754
 260:printf.c      ****     do {
 2413              		.loc 1 260 6 is_stmt 0 view .LVU755
 2414 0560 3FF427AE 		beq	.L425
 2415 0564 0DF1500E 		add	lr, sp, #80
 2416              	.LVL286:
 2417              	.L426:
 268:printf.c      **** }
 2418              		.loc 1 268 3 is_stmt 1 view .LVU756
 268:printf.c      **** }
 2419              		.loc 1 268 10 is_stmt 0 view .LVU757
 2420 0568 0823     		movs	r3, #8
 2421 056a 0690     		str	r0, [sp, #24]
 2422 056c 0593     		str	r3, [sp, #20]
 2423 056e 1020     		movs	r0, #16
 2424 0570 0023     		movs	r3, #0
 2425 0572 CDE90230 		strd	r3, r0, [sp, #8]
 2426 0576 4A46     		mov	r2, r9
 2427 0578 CDE900E8 		strd	lr, r8, [sp]
 2428 057c DDE90813 		ldrd	r1, r3, [sp, #32]
 2429 0580 0496     		str	r6, [sp, #16]
 2430 0582 5846     		mov	r0, fp
 2431 0584 FFF7FEFF 		bl	_ntoa_format
 2432              	.LVL287:
 268:printf.c      **** }
 2433              		.loc 1 268 10 view .LVU758
 2434              	.LBE177:
 2435              	.LBE180:
 690:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2436              		.loc 1 690 81 view .LVU759
 2437 0588 0A95     		str	r5, [sp, #40]
 2438              	.LBB181:
 2439              	.LBB178:
 268:printf.c      **** }
 2440              		.loc 1 268 10 view .LVU760
 2441 058a 8146     		mov	r9, r0
 2442              	.LVL288:
 268:printf.c      **** }
 2443              		.loc 1 268 10 view .LVU761
 2444              	.LBE178:
 2445              	.LBE181:
 694:printf.c      ****         break;
 2446              		.loc 1 694 9 is_stmt 1 view .LVU762
 695:printf.c      ****       }
 2447              		.loc 1 695 9 view .LVU763
 2448 058c 55E5     		b	.L268
 2449              	.LVL289:
 2450              	.L302:
 695:printf.c      ****       }
 2451              		.loc 1 695 9 is_stmt 0 view .LVU764
 2452 058e 5828     		cmp	r0, #88
 2453 0590 00F08C80 		beq	.L307
 2454 0594 6228     		cmp	r0, #98
 2455 0596 40F05083 		bne	.L594
 2456              	.LBE233:
 553:printf.c      ****       case 'd' :
 2457              		.loc 1 553 5 view .LVU765
 2458 059a 0227     		movs	r7, #2
 2459 059c BC46     		mov	ip, r7
 2460              	.L305:
 2461              	.LVL290:
 2462              	.LBB234:
 583:printf.c      ****         }
 2463              		.loc 1 583 11 is_stmt 1 view .LVU766
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 2464              		.loc 1 587 9 view .LVU767
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 2465              		.loc 1 587 12 is_stmt 0 view .LVU768
 2466 059e 14F48063 		ands	r3, r4, #1024
 2467 05a2 7CD1     		bne	.L595
 583:printf.c      ****         }
 2468              		.loc 1 583 17 view .LVU769
 2469 05a4 24F00C02 		bic	r2, r4, #12
 2470              	.LVL291:
 583:printf.c      ****         }
 2471              		.loc 1 583 17 view .LVU770
 2472 05a8 0C92     		str	r2, [sp, #48]
 2473              	.L313:
 2474              	.LVL292:
 611:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2475              		.loc 1 611 11 is_stmt 1 view .LVU771
 611:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2476              		.loc 1 611 14 is_stmt 0 view .LVU772
 2477 05aa 12F40070 		ands	r0, r2, #512
 613:printf.c      **** #endif
 2478              		.loc 1 613 19 view .LVU773
 2479 05ae 0A9A     		ldr	r2, [sp, #40]
 611:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2480              		.loc 1 611 14 view .LVU774
 2481 05b0 40F0A381 		bne	.L596
 616:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2482              		.loc 1 616 16 is_stmt 1 view .LVU775
 2483              	.LBB107:
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 2484              		.loc 1 601 24 is_stmt 0 view .LVU776
 2485 05b4 141D     		adds	r4, r2, #4
 2486              	.LBE107:
 616:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2487              		.loc 1 616 19 view .LVU777
 2488 05b6 0C9A     		ldr	r2, [sp, #48]
 2489 05b8 12F48071 		ands	r1, r2, #256
 2490 05bc 40F02A83 		bne	.L597
 2491              	.LBB108:
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2492              		.loc 1 620 13 is_stmt 1 view .LVU778
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2493              		.loc 1 620 103 is_stmt 0 view .LVU779
 2494 05c0 5006     		lsls	r0, r2, #25
 2495 05c2 40F18081 		bpl	.L347
 2496              	.LVL293:
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2497              		.loc 1 620 103 view .LVU780
 2498 05c6 0A9A     		ldr	r2, [sp, #40]
 2499 05c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2500              	.LVL294:
 2501              	.L348:
 621:printf.c      ****           }
 2502              		.loc 1 621 13 is_stmt 1 view .LVU781
 2503              	.LBB109:
 2504              	.LBI109:
 249:printf.c      **** {
 2505              		.loc 1 249 15 view .LVU782
 2506              	.LBB110:
 251:printf.c      ****   size_t len = 0U;
 2507              		.loc 1 251 3 view .LVU783
 252:printf.c      **** 
 2508              		.loc 1 252 3 view .LVU784
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 2509              		.loc 1 255 3 view .LVU785
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 2510              		.loc 1 255 6 is_stmt 0 view .LVU786
 2511 05ca 002A     		cmp	r2, #0
 2512 05cc 40F0C781 		bne	.L350
 256:printf.c      ****   }
 2513              		.loc 1 256 5 is_stmt 1 view .LVU787
 256:printf.c      ****   }
 2514              		.loc 1 256 11 is_stmt 0 view .LVU788
 2515 05d0 0C98     		ldr	r0, [sp, #48]
 2516 05d2 20F01000 		bic	r0, r0, #16
 2517 05d6 0C90     		str	r0, [sp, #48]
 2518              	.LVL295:
 260:printf.c      ****     do {
 2519              		.loc 1 260 3 is_stmt 1 view .LVU789
 260:printf.c      ****     do {
 2520              		.loc 1 260 6 is_stmt 0 view .LVU790
 2521 05d8 002B     		cmp	r3, #0
 2522 05da 00F0C081 		beq	.L350
 252:printf.c      **** 
 2523              		.loc 1 252 10 view .LVU791
 2524 05de 1146     		mov	r1, r2
 2525 05e0 0DF1500E 		add	lr, sp, #80
 2526              	.LVL296:
 2527              	.L351:
 268:printf.c      **** }
 2528              		.loc 1 268 3 is_stmt 1 view .LVU792
 268:printf.c      **** }
 2529              		.loc 1 268 10 is_stmt 0 view .LVU793
 2530 05e4 0C9B     		ldr	r3, [sp, #48]
 2531 05e6 0693     		str	r3, [sp, #24]
 2532 05e8 0B9B     		ldr	r3, [sp, #44]
 2533 05ea CDF80CC0 		str	ip, [sp, #12]
 2534 05ee CDE90463 		strd	r6, r3, [sp, #16]
 2535 05f2 0191     		str	r1, [sp, #4]
 2536              	.LVL297:
 2537              	.L573:
 268:printf.c      **** }
 2538              		.loc 1 268 10 view .LVU794
 2539 05f4 0023     		movs	r3, #0
 2540 05f6 4A46     		mov	r2, r9
 2541 05f8 0293     		str	r3, [sp, #8]
 2542 05fa CDF800E0 		str	lr, [sp]
 2543 05fe DDE90813 		ldrd	r1, r3, [sp, #32]
 2544 0602 5846     		mov	r0, fp
 2545 0604 FFF7FEFF 		bl	_ntoa_format
 2546              	.LVL298:
 268:printf.c      **** }
 2547              		.loc 1 268 10 view .LVU795
 2548 0608 0A94     		str	r4, [sp, #40]
 2549 060a 8146     		mov	r9, r0
 2550              	.LVL299:
 268:printf.c      **** }
 2551              		.loc 1 268 10 view .LVU796
 2552              	.LBE110:
 2553              	.LBE109:
 2554              	.LBE108:
 624:printf.c      ****         break;
 2555              		.loc 1 624 9 is_stmt 1 view .LVU797
 625:printf.c      ****       }
 2556              		.loc 1 625 9 view .LVU798
 2557 060c 15E5     		b	.L268
 2558              	.LVL300:
 2559              	.L588:
 625:printf.c      ****       }
 2560              		.loc 1 625 9 is_stmt 0 view .LVU799
 2561              	.LBE234:
 2562              	.LBB235:
 2563              	.LBB208:
 324:printf.c      ****     value = 0 - value;
 2564              		.loc 1 324 5 is_stmt 1 view .LVU800
 325:printf.c      ****   }
 2565              		.loc 1 325 5 view .LVU801
 325:printf.c      ****   }
 2566              		.loc 1 325 11 is_stmt 0 view .LVU802
 2567 060e 4346     		mov	r3, r8
 2568 0610 3A46     		mov	r2, r7
 2569 0612 0020     		movs	r0, #0
 2570 0614 0021     		movs	r1, #0
 2571 0616 FFF7FEFF 		bl	__aeabi_dsub
 2572              	.LVL301:
 324:printf.c      ****     value = 0 - value;
 2573              		.loc 1 324 14 view .LVU803
 2574 061a 0123     		movs	r3, #1
 325:printf.c      ****   }
 2575              		.loc 1 325 11 view .LVU804
 2576 061c CDE90C01 		strd	r0, [sp, #48]
 2577              	.LVL302:
 324:printf.c      ****     value = 0 - value;
 2578              		.loc 1 324 14 view .LVU805
 2579 0620 1293     		str	r3, [sp, #72]
 2580 0622 98E6     		b	.L358
 2581              	.LVL303:
 2582              	.L592:
 324:printf.c      ****     value = 0 - value;
 2583              		.loc 1 324 14 view .LVU806
 2584              	.LBE208:
 2585              	.LBE235:
 553:printf.c      ****       case 'd' :
 2586              		.loc 1 553 5 view .LVU807
 2587 0624 0827     		movs	r7, #8
 2588 0626 BC46     		mov	ip, r7
 2589 0628 B9E7     		b	.L305
 2590              	.LVL304:
 2591              	.L572:
 2592              	.LBB236:
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2593              		.loc 1 672 22 view .LVU808
 2594 062a 0B9B     		ldr	r3, [sp, #44]
 2595 062c 4345     		cmp	r3, r8
 2596 062e 4C46     		mov	r4, r9
 2597              	.LVL305:
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2598              		.loc 1 672 22 is_stmt 1 view .LVU809
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2599              		.loc 1 672 22 is_stmt 0 view .LVU810
 2600 0630 7FF655AE 		bls	.L418
 2601 0634 DDE90856 		ldrd	r5, r6, [sp, #32]
 2602 0638 4B44     		add	r3, r3, r9
 2603 063a A3EB0809 		sub	r9, r3, r8
 2604 063e 6746     		mov	r7, ip
 2605              	.LVL306:
 2606              	.L423:
 673:printf.c      ****           }
 2607              		.loc 1 673 13 is_stmt 1 view .LVU811
 2608 0640 2246     		mov	r2, r4
 2609 0642 3346     		mov	r3, r6
 2610 0644 0134     		adds	r4, r4, #1
 2611              	.LVL307:
 673:printf.c      ****           }
 2612              		.loc 1 673 13 is_stmt 0 view .LVU812
 2613 0646 2946     		mov	r1, r5
 2614 0648 2020     		movs	r0, #32
 2615 064a D847     		blx	fp
 2616              	.LVL308:
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2617              		.loc 1 672 22 is_stmt 1 view .LVU813
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2618              		.loc 1 672 22 is_stmt 0 view .LVU814
 2619 064c 4C45     		cmp	r4, r9
 2620 064e F7D1     		bne	.L423
 2621 0650 BC46     		mov	ip, r7
 2622 0652 44E6     		b	.L418
 2623              	.LVL309:
 2624              	.L419:
 672:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2625              		.loc 1 672 22 view .LVU815
 2626 0654 0A94     		str	r4, [sp, #40]
 2627 0656 DDE90845 		ldrd	r4, r5, [sp, #32]
 2628 065a 6646     		mov	r6, ip
 2629              	.LVL310:
 2630              	.L422:
 668:printf.c      ****         }
 2631              		.loc 1 668 11 is_stmt 1 view .LVU816
 668:printf.c      ****         }
 2632              		.loc 1 668 11 is_stmt 0 view .LVU817
 2633 065c 4A46     		mov	r2, r9
 2634              	.LVL311:
 668:printf.c      ****         }
 2635              		.loc 1 668 11 view .LVU818
 2636 065e 2B46     		mov	r3, r5
 2637 0660 2146     		mov	r1, r4
 2638 0662 D847     		blx	fp
 2639              	.LVL312:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 2640              		.loc 1 667 17 view .LVU819
 2641 0664 17F8010F 		ldrb	r0, [r7, #1]!	@ zero_extendqisi2
 668:printf.c      ****         }
 2642              		.loc 1 668 11 view .LVU820
 2643 0668 09F10109 		add	r9, r9, #1
 2644              	.LVL313:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 2645              		.loc 1 667 26 is_stmt 1 view .LVU821
 2646 066c 0028     		cmp	r0, #0
 2647 066e F5D1     		bne	.L422
 2648 0670 0A9C     		ldr	r4, [sp, #40]
 2649 0672 B446     		mov	ip, r6
 2650 0674 30E6     		b	.L415
 2651              	.L615:
 2652 0676 00BF     		.align	3
 2653              	.L614:
 2654 0678 00000000 		.word	0
 2655 067c 65CDCD41 		.word	1104006501
 2656 0680 0000C0FF 		.word	-4194304
 2657 0684 FFFFDF41 		.word	1105199103
 2658 0688 0000E03F 		.word	1071644672
 2659 068c 67666666 		.word	1717986919
 2660              	.LVL314:
 2661              	.L292:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 2662              		.loc 1 667 26 is_stmt 0 view .LVU822
 2663              	.LBE236:
 530:printf.c      ****           format++;
 2664              		.loc 1 530 11 is_stmt 1 view .LVU823
 553:printf.c      ****       case 'd' :
 2665              		.loc 1 553 13 is_stmt 0 view .LVU824
 2666 0690 9AF80200 		ldrb	r0, [r10, #2]	@ zero_extendqisi2
 530:printf.c      ****           format++;
 2667              		.loc 1 530 17 view .LVU825
 2668 0694 44F0C004 		orr	r4, r4, #192
 2669              	.LVL315:
 531:printf.c      ****         }
 2670              		.loc 1 531 11 is_stmt 1 view .LVU826
 531:printf.c      ****         }
 2671              		.loc 1 531 11 is_stmt 0 view .LVU827
 2672 0698 0AF10303 		add	r3, r10, #3
 2673 069c 29E5     		b	.L285
 2674              	.LVL316:
 2675              	.L595:
 2676              	.LBB237:
 588:printf.c      ****         }
 2677              		.loc 1 588 11 is_stmt 1 view .LVU828
 588:printf.c      ****         }
 2678              		.loc 1 588 17 is_stmt 0 view .LVU829
 2679 069e 24F00D02 		bic	r2, r4, #13
 2680 06a2 0C92     		str	r2, [sp, #48]
 2681              	.LVL317:
 592:printf.c      ****           // signed
 2682              		.loc 1 592 9 is_stmt 1 view .LVU830
 2683 06a4 81E7     		b	.L313
 2684              	.LVL318:
 2685              	.L539:
 592:printf.c      ****           // signed
 2686              		.loc 1 592 9 is_stmt 0 view .LVU831
 2687              	.LBE237:
 457:printf.c      ****   {
 2688              		.loc 1 457 10 view .LVU832
 2689 06a6 0446     		mov	r4, r0
 2690 06a8 8146     		mov	r9, r0
 2691 06aa 5CE5     		b	.L431
 2692              	.LVL319:
 2693              	.L307:
 2694              	.LBB238:
 578:printf.c      ****         }
 2695              		.loc 1 578 11 is_stmt 1 view .LVU833
 578:printf.c      ****         }
 2696              		.loc 1 578 17 is_stmt 0 view .LVU834
 2697 06ac 1027     		movs	r7, #16
 2698 06ae 44F02004 		orr	r4, r4, #32
 2699              	.LVL320:
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2700              		.loc 1 582 9 is_stmt 1 view .LVU835
 578:printf.c      ****         }
 2701              		.loc 1 578 17 is_stmt 0 view .LVU836
 2702 06b2 BC46     		mov	ip, r7
 2703 06b4 73E7     		b	.L305
 2704              	.LVL321:
 2705              	.L587:
 578:printf.c      ****         }
 2706              		.loc 1 578 17 view .LVU837
 2707              	.LBE238:
 2708              	.LBB239:
 2709              	.LBB209:
 315:printf.c      ****     out('a', buffer, idx++, maxlen);
 2710              		.loc 1 315 5 is_stmt 1 view .LVU838
 315:printf.c      ****     out('a', buffer, idx++, maxlen);
 2711              		.loc 1 315 5 is_stmt 0 view .LVU839
 2712 06b6 099E     		ldr	r6, [sp, #36]
 2713 06b8 089D     		ldr	r5, [sp, #32]
 2714 06ba 3346     		mov	r3, r6
 2715 06bc 4A46     		mov	r2, r9
 2716 06be 2946     		mov	r1, r5
 2717 06c0 6E20     		movs	r0, #110
 2718 06c2 D847     		blx	fp
 2719              	.LVL322:
 316:printf.c      ****     out('n', buffer, idx++, maxlen);
 2720              		.loc 1 316 5 is_stmt 1 view .LVU840
 2721 06c4 09F10204 		add	r4, r9, #2
 2722              	.LVL323:
 316:printf.c      ****     out('n', buffer, idx++, maxlen);
 2723              		.loc 1 316 5 is_stmt 0 view .LVU841
 2724 06c8 3346     		mov	r3, r6
 2725 06ca 09F10102 		add	r2, r9, #1
 2726 06ce 2946     		mov	r1, r5
 2727 06d0 6120     		movs	r0, #97
 2728 06d2 D847     		blx	fp
 2729              	.LVL324:
 317:printf.c      ****     return idx;
 2730              		.loc 1 317 5 is_stmt 1 view .LVU842
 317:printf.c      ****     return idx;
 2731              		.loc 1 317 5 is_stmt 0 view .LVU843
 2732 06d4 2246     		mov	r2, r4
 2733 06d6 3346     		mov	r3, r6
 2734 06d8 2946     		mov	r1, r5
 2735 06da 6E20     		movs	r0, #110
 2736 06dc 09F10309 		add	r9, r9, #3
 2737              	.LVL325:
 317:printf.c      ****     return idx;
 2738              		.loc 1 317 5 view .LVU844
 2739 06e0 D847     		blx	fp
 2740              	.LVL326:
 318:printf.c      ****   }
 2741              		.loc 1 318 5 is_stmt 1 view .LVU845
 318:printf.c      ****   }
 2742              		.loc 1 318 12 is_stmt 0 view .LVU846
 2743 06e2 AAE4     		b	.L268
 2744              	.LVL327:
 2745              	.L547:
 351:printf.c      ****   }
 2746              		.loc 1 351 8 is_stmt 1 view .LVU847
 351:printf.c      ****   }
 2747              		.loc 1 351 11 is_stmt 0 view .LVU848
 2748 06e4 DDE91001 		ldrd	r0, [sp, #64]
 2749 06e8 B34B     		ldr	r3, .L616+8
 2750 06ea 0022     		movs	r2, #0
 2751 06ec FFF7FEFF 		bl	__aeabi_dcmplt
 2752              	.LVL328:
 2753 06f0 0028     		cmp	r0, #0
 2754 06f2 7FF480AE 		bne	.L365
 353:printf.c      ****     // if halfway, round up if odd OR if last digit is 0
 2755              		.loc 1 353 8 is_stmt 1 view .LVU849
 353:printf.c      ****     // if halfway, round up if odd OR if last digit is 0
 2756              		.loc 1 353 11 is_stmt 0 view .LVU850
 2757 06f6 002D     		cmp	r5, #0
 2758 06f8 40F0EC80 		bne	.L598
 2759              	.L367:
 355:printf.c      ****   }
 2760              		.loc 1 355 5 is_stmt 1 view .LVU851
 2761 06fc 0135     		adds	r5, r5, #1
 2762              	.LVL329:
 355:printf.c      ****   }
 2763              		.loc 1 355 5 is_stmt 0 view .LVU852
 2764 06fe 7AE6     		b	.L365
 2765              	.LVL330:
 2766              	.L456:
 355:printf.c      ****   }
 2767              		.loc 1 355 5 view .LVU853
 2768 0700 9FEDAB7B 		vldr.64	d7, .L616
 330:printf.c      ****   }
 2769              		.loc 1 330 10 view .LVU854
 2770 0704 4FF00608 		mov	r8, #6
 2771 0708 8DED0E7B 		vstr.64	d7, [sp, #56]
 2772 070c 3DE6     		b	.L360
 2773              	.LVL331:
 2774              	.L585:
 330:printf.c      ****   }
 2775              		.loc 1 330 10 view .LVU855
 2776              	.LBE209:
 2777              	.LBE239:
 2778              	.LBB240:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2779              		.loc 1 662 22 is_stmt 1 view .LVU856
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2780              		.loc 1 662 22 is_stmt 0 view .LVU857
 2781 070e 0B9A     		ldr	r2, [sp, #44]
 2782 0710 4245     		cmp	r2, r8
 2783 0712 40F2DB82 		bls	.L412
 2784 0716 0C94     		str	r4, [sp, #48]
 2785 0718 DDE90845 		ldrd	r4, r5, [sp, #32]
 2786 071c 4A44     		add	r2, r2, r9
 2787 071e 0E97     		str	r7, [sp, #56]
 2788 0720 A2EB0808 		sub	r8, r2, r8
 2789 0724 0A93     		str	r3, [sp, #40]
 2790 0726 6746     		mov	r7, ip
 2791              	.LVL332:
 2792              	.L413:
 663:printf.c      ****           }
 2793              		.loc 1 663 13 is_stmt 1 view .LVU858
 2794 0728 4A46     		mov	r2, r9
 2795              	.LVL333:
 663:printf.c      ****           }
 2796              		.loc 1 663 13 is_stmt 0 view .LVU859
 2797 072a 2B46     		mov	r3, r5
 2798 072c 09F10109 		add	r9, r9, #1
 2799              	.LVL334:
 663:printf.c      ****           }
 2800              		.loc 1 663 13 view .LVU860
 2801 0730 2146     		mov	r1, r4
 2802 0732 2020     		movs	r0, #32
 2803 0734 D847     		blx	fp
 2804              	.LVL335:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2805              		.loc 1 662 22 is_stmt 1 view .LVU861
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2806              		.loc 1 662 22 is_stmt 0 view .LVU862
 2807 0736 C145     		cmp	r9, r8
 2808 0738 F6D1     		bne	.L413
 2809 073a BC46     		mov	ip, r7
 2810 073c 0E9F     		ldr	r7, [sp, #56]
 2811              	.LVL336:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2812              		.loc 1 662 22 view .LVU863
 2813 073e 0B9A     		ldr	r2, [sp, #44]
 2814 0740 0A9B     		ldr	r3, [sp, #40]
 2815 0742 0C9C     		ldr	r4, [sp, #48]
 2816 0744 3978     		ldrb	r1, [r7]	@ zero_extendqisi2
 2817 0746 02F10108 		add	r8, r2, #1
 2818              	.LVL337:
 2819              	.L414:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 2820              		.loc 1 667 26 is_stmt 1 view .LVU864
 2821 074a 0846     		mov	r0, r1
 2822 074c 0029     		cmp	r1, #0
 2823 074e 7FF4A8AD 		bne	.L416
 2824 0752 C4E5     		b	.L418
 2825              	.LVL338:
 2826              	.L591:
 667:printf.c      ****           out(*(p++), buffer, idx++, maxlen);
 2827              		.loc 1 667 26 is_stmt 0 view .LVU865
 2828              	.LBE240:
 2829              	.LBB241:
 638:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2830              		.loc 1 638 22 is_stmt 1 view .LVU866
 638:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2831              		.loc 1 638 22 is_stmt 0 view .LVU867
 2832 0754 0B9B     		ldr	r3, [sp, #44]
 2833 0756 012B     		cmp	r3, #1
 2834 0758 40F2C480 		bls	.L401
 2835 075c DDE90858 		ldrd	r5, r8, [sp, #32]
 2836 0760 09F1FF36 		add	r6, r9, #-1
 2837 0764 1E44     		add	r6, r6, r3
 2838 0766 4C46     		mov	r4, r9
 2839              	.LVL339:
 2840              	.L402:
 639:printf.c      ****           }
 2841              		.loc 1 639 13 is_stmt 1 view .LVU868
 2842 0768 2246     		mov	r2, r4
 2843 076a 4346     		mov	r3, r8
 2844 076c 0134     		adds	r4, r4, #1
 2845              	.LVL340:
 639:printf.c      ****           }
 2846              		.loc 1 639 13 is_stmt 0 view .LVU869
 2847 076e 2946     		mov	r1, r5
 2848 0770 2020     		movs	r0, #32
 2849 0772 D847     		blx	fp
 2850              	.LVL341:
 638:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2851              		.loc 1 638 22 is_stmt 1 view .LVU870
 638:printf.c      ****             out(' ', buffer, idx++, maxlen);
 2852              		.loc 1 638 22 is_stmt 0 view .LVU871
 2853 0774 B442     		cmp	r4, r6
 2854 0776 F7D1     		bne	.L402
 643:printf.c      ****         // post padding
 2855              		.loc 1 643 9 is_stmt 1 view .LVU872
 2856              	.LVL342:
 643:printf.c      ****         // post padding
 2857              		.loc 1 643 9 is_stmt 0 discriminator 1 view .LVU873
 2858 0778 0B9B     		ldr	r3, [sp, #44]
 2859 077a 9944     		add	r9, r9, r3
 2860              	.LVL343:
 643:printf.c      ****         // post padding
 2861              		.loc 1 643 9 discriminator 1 view .LVU874
 2862 077c 0A9B     		ldr	r3, [sp, #40]
 2863 077e 2246     		mov	r2, r4
 2864 0780 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2865 0782 DDE90813 		ldrd	r1, r3, [sp, #32]
 2866 0786 D847     		blx	fp
 2867              	.LVL344:
 645:printf.c      ****           while (l++ < width) {
 2868              		.loc 1 645 9 is_stmt 1 view .LVU875
 650:printf.c      ****         break;
 2869              		.loc 1 650 9 view .LVU876
 651:printf.c      ****       }
 2870              		.loc 1 651 9 view .LVU877
 643:printf.c      ****         // post padding
 2871              		.loc 1 643 19 is_stmt 0 view .LVU878
 2872 0788 0A97     		str	r7, [sp, #40]
 2873              	.LVL345:
 643:printf.c      ****         // post padding
 2874              		.loc 1 643 19 view .LVU879
 2875 078a 56E4     		b	.L268
 2876              	.LVL346:
 2877              	.L458:
 643:printf.c      ****         // post padding
 2878              		.loc 1 643 19 view .LVU880
 2879              	.LBE241:
 2880              	.LBB242:
 2881              	.LBB210:
 361:printf.c      ****   }
 2882              		.loc 1 361 12 view .LVU881
 2883 078c 4FF00009 		mov	r9, #0
 2884 0790 53E4     		b	.L268
 2885              	.LVL347:
 2886              	.L368:
 361:printf.c      ****   }
 2887              		.loc 1 361 12 view .LVU882
 2888 0792 0DF1500E 		add	lr, sp, #80
 2889 0796 781E     		subs	r0, r7, #1
 2890              	.LBB199:
 377:printf.c      ****       if (!(frac /= 10U)) {
 2891              		.loc 1 377 39 view .LVU883
 2892 0798 DFF820C2 		ldr	ip, .L616+12
 2893 079c 7044     		add	r0, r0, lr
 2894 079e 0DE0     		b	.L370
 2895              	.LVL348:
 2896              	.L374:
 377:printf.c      ****       if (!(frac /= 10U)) {
 2897              		.loc 1 377 39 view .LVU884
 2898 07a0 ACFB0531 		umull	r3, r1, ip, r5
 2899 07a4 C908     		lsrs	r1, r1, #3
 2900 07a6 01EB8103 		add	r3, r1, r1, lsl #2
 2901 07aa A5EB4303 		sub	r3, r5, r3, lsl #1
 377:printf.c      ****       if (!(frac /= 10U)) {
 2902              		.loc 1 377 20 view .LVU885
 2903 07ae 3033     		adds	r3, r3, #48
 378:printf.c      ****         break;
 2904              		.loc 1 378 10 view .LVU886
 2905 07b0 092D     		cmp	r5, #9
 377:printf.c      ****       if (!(frac /= 10U)) {
 2906              		.loc 1 377 18 view .LVU887
 2907 07b2 00F8013F 		strb	r3, [r0, #1]!
 378:printf.c      ****         break;
 2908              		.loc 1 378 7 is_stmt 1 view .LVU888
 2909              	.LVL349:
 378:printf.c      ****         break;
 2910              		.loc 1 378 10 is_stmt 0 view .LVU889
 2911 07b6 63D9     		bls	.L599
 378:printf.c      ****         break;
 2912              		.loc 1 378 18 view .LVU890
 2913 07b8 0D46     		mov	r5, r1
 377:printf.c      ****       if (!(frac /= 10U)) {
 2914              		.loc 1 377 14 view .LVU891
 2915 07ba 1746     		mov	r7, r2
 2916              	.LVL350:
 2917              	.L370:
 376:printf.c      ****       buf[len++] = (char)(48U + (frac % 10U));
 2918              		.loc 1 376 7 is_stmt 1 view .LVU892
 375:printf.c      ****       --count;
 2919              		.loc 1 375 16 view .LVU893
 2920 07bc 202F     		cmp	r7, #32
 377:printf.c      ****       if (!(frac /= 10U)) {
 2921              		.loc 1 377 14 is_stmt 0 view .LVU894
 2922 07be 07F10102 		add	r2, r7, #1
 376:printf.c      ****       buf[len++] = (char)(48U + (frac % 10U));
 2923              		.loc 1 376 7 view .LVU895
 2924 07c2 08F1FF38 		add	r8, r8, #-1
 2925              	.LVL351:
 377:printf.c      ****       if (!(frac /= 10U)) {
 2926              		.loc 1 377 7 is_stmt 1 view .LVU896
 375:printf.c      ****       --count;
 2927              		.loc 1 375 16 is_stmt 0 view .LVU897
 2928 07c6 EBD1     		bne	.L374
 2929              	.LVL352:
 2930              	.L371:
 377:printf.c      ****       if (!(frac /= 10U)) {
 2931              		.loc 1 377 14 view .LVU898
 2932 07c8 2027     		movs	r7, #32
 2933 07ca 34E6     		b	.L369
 2934              	.LVL353:
 2935              	.L457:
 377:printf.c      ****       if (!(frac /= 10U)) {
 2936              		.loc 1 377 14 view .LVU899
 2937              	.LBE199:
 2938 07cc 1F46     		mov	r7, r3
 2939 07ce D8E5     		b	.L569
 2940              	.LVL354:
 2941              	.L590:
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2942              		.loc 1 401 3 is_stmt 1 view .LVU900
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2943              		.loc 1 401 29 is_stmt 0 view .LVU901
 2944 07d0 04F00302 		and	r2, r4, #3
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2945              		.loc 1 401 6 view .LVU902
 2946 07d4 012A     		cmp	r2, #1
 2947 07d6 00F08B82 		beq	.L600
 410:printf.c      ****     if (negative) {
 2948              		.loc 1 410 3 is_stmt 1 view .LVU903
 410:printf.c      ****     if (negative) {
 2949              		.loc 1 410 6 is_stmt 0 view .LVU904
 2950 07da 202F     		cmp	r7, #32
 2951 07dc 00F01782 		beq	.L471
 2952              	.LVL355:
 2953              	.L389:
 411:printf.c      ****       buf[len++] = '-';
 2954              		.loc 1 411 5 is_stmt 1 view .LVU905
 411:printf.c      ****       buf[len++] = '-';
 2955              		.loc 1 411 8 is_stmt 0 view .LVU906
 2956 07e0 129B     		ldr	r3, [sp, #72]
 2957 07e2 002B     		cmp	r3, #0
 2958 07e4 5ED1     		bne	.L601
 414:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2959              		.loc 1 414 10 is_stmt 1 view .LVU907
 414:printf.c      ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2960              		.loc 1 414 13 is_stmt 0 view .LVU908
 2961 07e6 6307     		lsls	r3, r4, #29
 2962 07e8 40F12E82 		bpl	.L393
 415:printf.c      ****     }
 2963              		.loc 1 415 7 is_stmt 1 view .LVU909
 415:printf.c      ****     }
 2964              		.loc 1 415 18 is_stmt 0 view .LVU910
 2965 07ec 07F17003 		add	r3, r7, #112
 2966 07f0 6B44     		add	r3, sp, r3
 415:printf.c      ****     }
 2967              		.loc 1 415 14 view .LVU911
 2968 07f2 07F10108 		add	r8, r7, #1
 415:printf.c      ****     }
 2969              		.loc 1 415 18 view .LVU912
 2970 07f6 2B21     		movs	r1, #43
 2971 07f8 03F8201C 		strb	r1, [r3, #-32]
 415:printf.c      ****     }
 2972              		.loc 1 415 14 view .LVU913
 2973 07fc 4346     		mov	r3, r8
 2974              	.LVL356:
 2975              	.L391:
 423:printf.c      ****     for (size_t i = len; i < width; i++) {
 2976              		.loc 1 423 3 is_stmt 1 view .LVU914
 423:printf.c      ****     for (size_t i = len; i < width; i++) {
 2977              		.loc 1 423 6 is_stmt 0 view .LVU915
 2978 07fe 002A     		cmp	r2, #0
 2979 0800 6ED1     		bne	.L390
 2980              	.LVL357:
 2981              	.LBB200:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 2982              		.loc 1 424 28 is_stmt 1 discriminator 1 view .LVU916
 2983 0802 0B9A     		ldr	r2, [sp, #44]
 2984 0804 9342     		cmp	r3, r2
 2985 0806 6BD2     		bcs	.L390
 2986 0808 0C94     		str	r4, [sp, #48]
 2987              	.LVL358:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 2988              		.loc 1 424 28 is_stmt 0 discriminator 1 view .LVU917
 2989 080a DDE90845 		ldrd	r4, r5, [sp, #32]
 2990              	.LVL359:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 2991              		.loc 1 424 28 discriminator 1 view .LVU918
 2992 080e 09EB0207 		add	r7, r9, r2
 2993 0812 FF1A     		subs	r7, r7, r3
 2994 0814 4E46     		mov	r6, r9
 2995 0816 0E93     		str	r3, [sp, #56]
 2996 0818 CDF840E0 		str	lr, [sp, #64]
 2997              	.LVL360:
 2998              	.L397:
 425:printf.c      ****     }
 2999              		.loc 1 425 7 is_stmt 1 view .LVU919
 3000 081c 3246     		mov	r2, r6
 3001 081e 2B46     		mov	r3, r5
 3002 0820 0136     		adds	r6, r6, #1
 3003              	.LVL361:
 425:printf.c      ****     }
 3004              		.loc 1 425 7 is_stmt 0 view .LVU920
 3005 0822 2146     		mov	r1, r4
 3006 0824 2020     		movs	r0, #32
 3007 0826 D847     		blx	fp
 3008              	.LVL362:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3009              		.loc 1 424 38 is_stmt 1 discriminator 3 view .LVU921
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3010              		.loc 1 424 28 discriminator 1 view .LVU922
 3011 0828 BE42     		cmp	r6, r7
 3012 082a F7D1     		bne	.L397
 3013 082c 0C9C     		ldr	r4, [sp, #48]
 3014 082e 0E9B     		ldr	r3, [sp, #56]
 3015 0830 DDF840E0 		ldr	lr, [sp, #64]
 3016              	.LVL363:
 3017              	.L396:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3018              		.loc 1 424 28 is_stmt 0 discriminator 1 view .LVU923
 3019 0834 0C94     		str	r4, [sp, #48]
 3020 0836 DDE90845 		ldrd	r4, r5, [sp, #32]
 3021 083a F044     		add	r8, r8, lr
 3022 083c DE19     		adds	r6, r3, r7
 3023              	.L398:
 3024              	.LVL364:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3025              		.loc 1 424 28 discriminator 1 view .LVU924
 3026              	.LBE200:
 3027              	.LBB201:
 431:printf.c      ****   }
 3028              		.loc 1 431 5 is_stmt 1 view .LVU925
 3029 083e 3A46     		mov	r2, r7
 3030 0840 18F8010D 		ldrb	r0, [r8, #-1]!	@ zero_extendqisi2
 3031 0844 0137     		adds	r7, r7, #1
 3032              	.LVL365:
 431:printf.c      ****   }
 3033              		.loc 1 431 5 is_stmt 0 view .LVU926
 3034 0846 2B46     		mov	r3, r5
 3035 0848 2146     		mov	r1, r4
 3036 084a D847     		blx	fp
 3037              	.LVL366:
 430:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 3038              		.loc 1 430 33 is_stmt 1 discriminator 3 view .LVU927
 430:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 3039              		.loc 1 430 25 discriminator 1 view .LVU928
 3040 084c B742     		cmp	r7, r6
 3041 084e F6D1     		bne	.L398
 3042              	.LBE201:
 435:printf.c      ****     while (idx - start_idx < width) {
 3043              		.loc 1 435 3 view .LVU929
 435:printf.c      ****     while (idx - start_idx < width) {
 3044              		.loc 1 435 6 is_stmt 0 view .LVU930
 3045 0850 0C9C     		ldr	r4, [sp, #48]
 3046 0852 A507     		lsls	r5, r4, #30
 3047 0854 4ED5     		bpl	.L462
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3048              		.loc 1 436 28 is_stmt 1 view .LVU931
 3049 0856 0B9D     		ldr	r5, [sp, #44]
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3050              		.loc 1 436 16 is_stmt 0 view .LVU932
 3051 0858 A7EB0904 		sub	r4, r7, r9
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3052              		.loc 1 436 28 view .LVU933
 3053 085c AC42     		cmp	r4, r5
 3054 085e B946     		mov	r9, r7
 3055 0860 BFF4EBAB 		bcs	.L268
 3056 0864 DDE90867 		ldrd	r6, r7, [sp, #32]
 3057              	.LVL367:
 3058              	.L399:
 437:printf.c      ****     }
 3059              		.loc 1 437 7 is_stmt 1 view .LVU934
 3060 0868 4A46     		mov	r2, r9
 3061              	.LVL368:
 437:printf.c      ****     }
 3062              		.loc 1 437 7 is_stmt 0 view .LVU935
 3063 086a 3B46     		mov	r3, r7
 3064 086c 3146     		mov	r1, r6
 3065 086e 2020     		movs	r0, #32
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3066              		.loc 1 436 28 view .LVU936
 3067 0870 0134     		adds	r4, r4, #1
 437:printf.c      ****     }
 3068              		.loc 1 437 7 view .LVU937
 3069 0872 D847     		blx	fp
 3070              	.LVL369:
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3071              		.loc 1 436 28 view .LVU938
 3072 0874 AC42     		cmp	r4, r5
 437:printf.c      ****     }
 3073              		.loc 1 437 7 view .LVU939
 3074 0876 09F10109 		add	r9, r9, #1
 3075              	.LVL370:
 436:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3076              		.loc 1 436 28 is_stmt 1 view .LVU940
 3077 087a F5D3     		bcc	.L399
 3078 087c FFF7DDBB 		b	.L268
 3079              	.LVL371:
 3080              	.L599:
 3081              	.LBB202:
 383:printf.c      ****       buf[len++] = '0';
 3082              		.loc 1 383 44 view .LVU941
 3083 0880 202A     		cmp	r2, #32
 3084 0882 A1D0     		beq	.L371
 3085              	.LVL372:
 383:printf.c      ****       buf[len++] = '0';
 3086              		.loc 1 383 44 is_stmt 0 discriminator 1 view .LVU942
 3087 0884 B8F1000F 		cmp	r8, #0
 3088 0888 61D0     		beq	.L373
 3089 088a 7744     		add	r7, r7, lr
 3090 088c 08EB0203 		add	r3, r8, r2
 384:printf.c      ****     }
 3091              		.loc 1 384 18 view .LVU943
 3092 0890 3021     		movs	r1, #48
 3093              	.LVL373:
 384:printf.c      ****     }
 3094              		.loc 1 384 18 view .LVU944
 3095 0892 01E0     		b	.L375
 3096              	.L602:
 383:printf.c      ****       buf[len++] = '0';
 3097              		.loc 1 383 44 discriminator 1 view .LVU945
 3098 0894 9A42     		cmp	r2, r3
 3099 0896 5AD0     		beq	.L373
 3100              	.LVL374:
 3101              	.L375:
 384:printf.c      ****     }
 3102              		.loc 1 384 7 is_stmt 1 view .LVU946
 384:printf.c      ****     }
 3103              		.loc 1 384 14 is_stmt 0 view .LVU947
 3104 0898 0132     		adds	r2, r2, #1
 3105              	.LVL375:
 383:printf.c      ****       buf[len++] = '0';
 3106              		.loc 1 383 44 view .LVU948
 3107 089a 202A     		cmp	r2, #32
 384:printf.c      ****     }
 3108              		.loc 1 384 18 view .LVU949
 3109 089c 07F8011F 		strb	r1, [r7, #1]!
 383:printf.c      ****       buf[len++] = '0';
 3110              		.loc 1 383 44 is_stmt 1 view .LVU950
 3111 08a0 F8D1     		bne	.L602
 3112 08a2 91E7     		b	.L371
 3113              	.LVL376:
 3114              	.L601:
 383:printf.c      ****       buf[len++] = '0';
 3115              		.loc 1 383 44 is_stmt 0 view .LVU951
 3116              	.LBE202:
 412:printf.c      ****     }
 3117              		.loc 1 412 7 is_stmt 1 view .LVU952
 412:printf.c      ****     }
 3118              		.loc 1 412 18 is_stmt 0 view .LVU953
 3119 08a4 07F17003 		add	r3, r7, #112
 3120 08a8 6B44     		add	r3, sp, r3
 412:printf.c      ****     }
 3121              		.loc 1 412 14 view .LVU954
 3122 08aa 07F10108 		add	r8, r7, #1
 412:printf.c      ****     }
 3123              		.loc 1 412 18 view .LVU955
 3124 08ae 2D21     		movs	r1, #45
 3125 08b0 03F8201C 		strb	r1, [r3, #-32]
 412:printf.c      ****     }
 3126              		.loc 1 412 14 view .LVU956
 3127 08b4 4346     		mov	r3, r8
 3128              	.LVL377:
 412:printf.c      ****     }
 3129              		.loc 1 412 14 view .LVU957
 3130 08b6 A2E7     		b	.L391
 3131              	.LVL378:
 3132              	.L446:
 412:printf.c      ****     }
 3133              		.loc 1 412 14 view .LVU958
 3134              	.LBE210:
 3135              	.LBE242:
 553:printf.c      ****       case 'd' :
 3136              		.loc 1 553 5 view .LVU959
 3137 08b8 1027     		movs	r7, #16
 3138 08ba BC46     		mov	ip, r7
 3139 08bc 6FE6     		b	.L305
 3140              	.LVL379:
 3141              	.L548:
 3142              	.LBB243:
 3143              	.LBB211:
 366:printf.c      ****       // exactly 0.5 and ODD, then round up
 3144              		.loc 1 366 41 discriminator 3 view .LVU960
 3145 08be F207     		lsls	r2, r6, #31
 369:printf.c      ****     }
 3146              		.loc 1 369 7 is_stmt 1 view .LVU961
 3147 08c0 48BF     		it	mi
 3148 08c2 0136     		addmi	r6, r6, #1
 3149              	.LVL380:
 369:printf.c      ****     }
 3150              		.loc 1 369 7 is_stmt 0 view .LVU962
 3151 08c4 B5E5     		b	.L570
 3152              	.LVL381:
 3153              	.L347:
 369:printf.c      ****     }
 3154              		.loc 1 369 7 view .LVU963
 3155              	.LBE211:
 3156              	.LBE243:
 3157              	.LBB244:
 3158              	.LBB117:
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3159              		.loc 1 620 174 discriminator 2 view .LVU964
 3160 08c6 12F0800F 		tst	r2, #128
 3161 08ca 0A9A     		ldr	r2, [sp, #40]
 3162 08cc 14BF     		ite	ne
 3163 08ce 1288     		ldrhne	r2, [r2]
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3164              		.loc 1 620 174 discriminator 5 view .LVU965
 3165 08d0 1268     		ldreq	r2, [r2]
 3166 08d2 7AE6     		b	.L348
 3167              	.LVL382:
 3168              	.L598:
 620:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3169              		.loc 1 620 174 discriminator 5 view .LVU966
 3170              	.LBE117:
 3171              	.LBE244:
 3172              	.LBB245:
 3173              	.LBB212:
 353:printf.c      ****     // if halfway, round up if odd OR if last digit is 0
 3174              		.loc 1 353 25 discriminator 1 view .LVU967
 3175 08d4 E907     		lsls	r1, r5, #31
 3176 08d6 7FF58EAD 		bpl	.L365
 3177 08da 0FE7     		b	.L367
 3178              	.LVL383:
 3179              	.L387:
 410:printf.c      ****     if (negative) {
 3180              		.loc 1 410 6 view .LVU968
 3181 08dc 2023     		movs	r3, #32
 3182 08de 9846     		mov	r8, r3
 3183              	.L390:
 3184              	.LVL384:
 3185              	.LBB203:
 430:printf.c      ****     out(buf[len - i - 1U], buffer, idx++, maxlen);
 3186              		.loc 1 430 25 is_stmt 1 discriminator 1 view .LVU969
 3187              	.LBE203:
 3188              	.LBB204:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3189              		.loc 1 424 28 is_stmt 0 discriminator 1 view .LVU970
 3190 08e0 4F46     		mov	r7, r9
 3191 08e2 A7E7     		b	.L396
 3192              	.LVL385:
 3193              	.L401:
 424:printf.c      ****       out(' ', buffer, idx++, maxlen);
 3194              		.loc 1 424 28 discriminator 1 view .LVU971
 3195              	.LBE204:
 3196              	.LBE212:
 3197              	.LBE245:
 3198              	.LBB246:
 643:printf.c      ****         // post padding
 3199              		.loc 1 643 9 is_stmt 1 view .LVU972
 643:printf.c      ****         // post padding
 3200              		.loc 1 643 9 is_stmt 0 discriminator 1 view .LVU973
 3201 08e4 0A9B     		ldr	r3, [sp, #40]
 3202 08e6 4A46     		mov	r2, r9
 3203 08e8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3204 08ea DDE90813 		ldrd	r1, r3, [sp, #32]
 3205 08ee D847     		blx	fp
 3206              	.LVL386:
 645:printf.c      ****           while (l++ < width) {
 3207              		.loc 1 645 9 is_stmt 1 view .LVU974
 3208              	.L434:
 643:printf.c      ****         // post padding
 3209              		.loc 1 643 9 is_stmt 0 discriminator 1 view .LVU975
 3210 08f0 B146     		mov	r9, r6
 3211 08f2 FDE5     		b	.L403
 3212              	.LVL387:
 3213              	.L462:
 643:printf.c      ****         // post padding
 3214              		.loc 1 643 9 discriminator 1 view .LVU976
 3215              	.LBE246:
 3216              	.LBB247:
 3217              	.LBB213:
 3218 08f4 B946     		mov	r9, r7
 3219 08f6 FFF7A0BB 		b	.L268
 3220              	.LVL388:
 3221              	.L596:
 643:printf.c      ****         // post padding
 3222              		.loc 1 643 9 discriminator 1 view .LVU977
 3223              	.LBE213:
 3224              	.LBE247:
 3225              	.LBB248:
 613:printf.c      **** #endif
 3226              		.loc 1 613 13 is_stmt 1 view .LVU978
 613:printf.c      **** #endif
 3227              		.loc 1 613 19 is_stmt 0 view .LVU979
 3228 08fa 0732     		adds	r2, r2, #7
 3229 08fc 22F00702 		bic	r2, r2, #7
 3230              	.LVL389:
 613:printf.c      **** #endif
 3231              		.loc 1 613 19 view .LVU980
 3232 0900 5468     		ldr	r4, [r2, #4]
 3233              	.LVL390:
 3234              	.LBB118:
 3235              	.LBI118:
 274:printf.c      **** {
 3236              		.loc 1 274 15 is_stmt 1 view .LVU981
 3237              	.LBB119:
 276:printf.c      ****   size_t len = 0U;
 3238              		.loc 1 276 3 view .LVU982
 277:printf.c      **** 
 3239              		.loc 1 277 3 view .LVU983
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3240              		.loc 1 280 3 view .LVU984
 3241              	.LBE119:
 3242              	.LBE118:
 613:printf.c      **** #endif
 3243              		.loc 1 613 19 is_stmt 0 view .LVU985
 3244 0902 52F8085B 		ldr	r5, [r2], #8
 3245              	.LVL391:
 613:printf.c      **** #endif
 3246              		.loc 1 613 19 view .LVU986
 3247 0906 0A92     		str	r2, [sp, #40]
 3248              	.LBB127:
 3249              	.LBB125:
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3250              		.loc 1 280 6 view .LVU987
 3251 0908 55EA0402 		orrs	r2, r5, r4
 3252              	.LVL392:
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3253              		.loc 1 280 6 view .LVU988
 3254 090c 40F04381 		bne	.L336
 281:printf.c      ****   }
 3255              		.loc 1 281 5 is_stmt 1 view .LVU989
 281:printf.c      ****   }
 3256              		.loc 1 281 11 is_stmt 0 view .LVU990
 3257 0910 0C9A     		ldr	r2, [sp, #48]
 3258 0912 22F01002 		bic	r2, r2, #16
 3259 0916 0C92     		str	r2, [sp, #48]
 3260              	.LVL393:
 285:printf.c      ****     do {
 3261              		.loc 1 285 3 is_stmt 1 view .LVU991
 285:printf.c      ****     do {
 3262              		.loc 1 285 6 is_stmt 0 view .LVU992
 3263 0918 002B     		cmp	r3, #0
 3264 091a 00F03C81 		beq	.L336
 277:printf.c      **** 
 3265              		.loc 1 277 10 view .LVU993
 3266 091e 4FF00008 		mov	r8, #0
 3267 0922 0DF1500E 		add	lr, sp, #80
 3268              	.LVL394:
 3269              	.L337:
 293:printf.c      **** }
 3270              		.loc 1 293 3 is_stmt 1 view .LVU994
 293:printf.c      **** }
 3271              		.loc 1 293 10 is_stmt 0 view .LVU995
 3272 0926 0C9B     		ldr	r3, [sp, #48]
 3273 0928 0693     		str	r3, [sp, #24]
 3274 092a 0B9B     		ldr	r3, [sp, #44]
 3275 092c CDF80CC0 		str	ip, [sp, #12]
 3276 0930 CDE900E8 		strd	lr, r8, [sp]
 3277 0934 CDE90463 		strd	r6, r3, [sp, #16]
 3278 0938 0023     		movs	r3, #0
 3279 093a 4A46     		mov	r2, r9
 3280 093c 0293     		str	r3, [sp, #8]
 3281              	.LVL395:
 3282              	.L574:
 293:printf.c      **** }
 3283              		.loc 1 293 10 view .LVU996
 3284 093e DDE90813 		ldrd	r1, r3, [sp, #32]
 3285 0942 5846     		mov	r0, fp
 3286 0944 FFF7FEFF 		bl	_ntoa_format
 3287              	.LVL396:
 293:printf.c      **** }
 3288              		.loc 1 293 10 view .LVU997
 3289 0948 8146     		mov	r9, r0
 293:printf.c      **** }
 3290              		.loc 1 293 10 view .LVU998
 3291              	.LBE125:
 3292              	.LBE127:
 3293 094a FFF776BB 		b	.L268
 3294              	.LVL397:
 3295              	.L373:
 293:printf.c      **** }
 3296              		.loc 1 293 10 view .LVU999
 3297              	.LBE248:
 3298              	.LBB249:
 3299              	.LBB214:
 3300              	.LBB205:
 388:printf.c      ****     }
 3301              		.loc 1 388 7 is_stmt 1 view .LVU1000
 388:printf.c      ****     }
 3302              		.loc 1 388 18 is_stmt 0 view .LVU1001
 3303 094e 02F17003 		add	r3, r2, #112
 3304 0952 6B44     		add	r3, sp, r3
 388:printf.c      ****     }
 3305              		.loc 1 388 14 view .LVU1002
 3306 0954 571C     		adds	r7, r2, #1
 3307              	.LVL398:
 388:printf.c      ****     }
 3308              		.loc 1 388 18 view .LVU1003
 3309 0956 2E22     		movs	r2, #46
 3310 0958 03F8202C 		strb	r2, [r3, #-32]
 3311 095c 6BE5     		b	.L369
 3312              	.LVL399:
 3313              	.L350:
 388:printf.c      ****     }
 3314              		.loc 1 388 18 view .LVU1004
 3315 095e 0C9B     		ldr	r3, [sp, #48]
 3316 0960 13F0200F 		tst	r3, #32
 3317 0964 14BF     		ite	ne
 3318 0966 4123     		movne	r3, #65
 3319 0968 6123     		moveq	r3, #97
 3320 096a 0DF1500E 		add	lr, sp, #80
 3321              	.LBE205:
 3322              	.LBE214:
 3323              	.LBE249:
 3324              	.LBB250:
 3325              	.LBB128:
 3326              	.LBB116:
 3327              	.LBB115:
 3328              	.LBB111:
 263:printf.c      ****       value /= base;
 3329              		.loc 1 263 18 discriminator 7 view .LVU1005
 3330 096e A3F10A05 		sub	r5, r3, #10
 3331 0972 7746     		mov	r7, lr
 3332 0974 03E0     		b	.L354
 3333              	.LVL400:
 3334              	.L603:
 263:printf.c      ****       value /= base;
 3335              		.loc 1 263 18 discriminator 7 view .LVU1006
 3336              	.LBE111:
 265:printf.c      ****   }
 3337              		.loc 1 265 20 discriminator 1 view .LVU1007
 3338 0976 2029     		cmp	r1, #32
 3339 0978 3FF434AE 		beq	.L351
 3340              	.LBB112:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3341              		.loc 1 264 13 view .LVU1008
 3342 097c 0246     		mov	r2, r0
 3343              	.LVL401:
 3344              	.L354:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3345              		.loc 1 264 13 view .LVU1009
 3346              	.LBE112:
 261:printf.c      ****       const char digit = (char)(value % base);
 3347              		.loc 1 261 5 is_stmt 1 view .LVU1010
 3348              	.LBB113:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3349              		.loc 1 262 7 view .LVU1011
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3350              		.loc 1 262 39 is_stmt 0 view .LVU1012
 3351 097e B2FBFCF0 		udiv	r0, r2, ip
 3352 0982 0CFB1028 		mls	r8, ip, r0, r2
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3353              		.loc 1 262 18 view .LVU1013
 3354 0986 5FFA88F3 		uxtb	r3, r8
 3355              	.LVL402:
 263:printf.c      ****       value /= base;
 3356              		.loc 1 263 7 is_stmt 1 view .LVU1014
 263:printf.c      ****       value /= base;
 3357              		.loc 1 263 18 is_stmt 0 view .LVU1015
 3358 098a B8F1090F 		cmp	r8, #9
 263:printf.c      ****       value /= base;
 3359              		.loc 1 263 18 discriminator 1 view .LVU1016
 3360 098e 03F13008 		add	r8, r3, #48
 263:printf.c      ****       value /= base;
 3361              		.loc 1 263 18 discriminator 7 view .LVU1017
 3362 0992 8ABF     		itet	hi
 3363 0994 5B19     		addhi	r3, r3, r5
 3364              	.LVL403:
 263:printf.c      ****       value /= base;
 3365              		.loc 1 263 18 discriminator 1 view .LVU1018
 3366 0996 5FFA88F3 		uxtbls	r3, r8
 263:printf.c      ****       value /= base;
 3367              		.loc 1 263 18 discriminator 7 view .LVU1019
 3368 099a DBB2     		uxtbhi	r3, r3
 3369              	.LBE113:
 265:printf.c      ****   }
 3370              		.loc 1 265 20 view .LVU1020
 3371 099c 6245     		cmp	r2, ip
 3372              	.LBB114:
 263:printf.c      ****       value /= base;
 3373              		.loc 1 263 18 discriminator 8 view .LVU1021
 3374 099e 07F8013B 		strb	r3, [r7], #1
 263:printf.c      ****       value /= base;
 3375              		.loc 1 263 14 discriminator 8 view .LVU1022
 3376 09a2 01F10101 		add	r1, r1, #1
 3377              	.LVL404:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3378              		.loc 1 264 7 is_stmt 1 view .LVU1023
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3379              		.loc 1 264 7 is_stmt 0 view .LVU1024
 3380              	.LBE114:
 265:printf.c      ****   }
 3381              		.loc 1 265 20 is_stmt 1 view .LVU1025
 3382 09a6 E6D2     		bcs	.L603
 3383 09a8 1CE6     		b	.L351
 3384              	.L617:
 3385 09aa 00BFAFF3 		.align	3
 3385      0080
 3386              	.L616:
 3387 09b0 00000000 		.word	0
 3388 09b4 80842E41 		.word	1093567616
 3389 09b8 0000E03F 		.word	1071644672
 3390 09bc CDCCCCCC 		.word	-858993459
 3391              	.LVL405:
 3392              	.L593:
 265:printf.c      ****   }
 3393              		.loc 1 265 20 is_stmt 0 view .LVU1026
 3394              	.LBE115:
 3395              	.LBE116:
 3396              	.LBE128:
 573:printf.c      ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 3397              		.loc 1 573 11 is_stmt 1 view .LVU1027
 574:printf.c      ****         }
 3398              		.loc 1 574 11 view .LVU1028
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3399              		.loc 1 582 12 is_stmt 0 view .LVU1029
 3400 09c0 6928     		cmp	r0, #105
 574:printf.c      ****         }
 3401              		.loc 1 574 17 view .LVU1030
 3402 09c2 24F01001 		bic	r1, r4, #16
 3403              	.LVL406:
 577:printf.c      ****           flags |= FLAGS_UPPERCASE;
 3404              		.loc 1 577 9 is_stmt 1 view .LVU1031
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3405              		.loc 1 582 9 view .LVU1032
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3406              		.loc 1 582 12 is_stmt 0 view .LVU1033
 3407 09c6 40F08481 		bne	.L604
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 3408              		.loc 1 587 9 is_stmt 1 view .LVU1034
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 3409              		.loc 1 587 12 is_stmt 0 view .LVU1035
 3410 09ca 14F48063 		ands	r3, r4, #1024
 3411 09ce 03D0     		beq	.L311
 3412              	.LVL407:
 3413              	.L310:
 588:printf.c      ****         }
 3414              		.loc 1 588 11 is_stmt 1 view .LVU1036
 588:printf.c      ****         }
 3415              		.loc 1 588 17 is_stmt 0 view .LVU1037
 3416 09d0 24F01101 		bic	r1, r4, #17
 3417              	.LVL408:
 592:printf.c      ****           // signed
 3418              		.loc 1 592 9 is_stmt 1 view .LVU1038
 588:printf.c      ****         }
 3419              		.loc 1 588 17 is_stmt 0 view .LVU1039
 3420 09d4 4FF48063 		mov	r3, #1024
 3421              	.LVL409:
 3422              	.L311:
 594:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3423              		.loc 1 594 11 is_stmt 1 view .LVU1040
 594:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3424              		.loc 1 594 14 is_stmt 0 view .LVU1041
 3425 09d8 11F40074 		ands	r4, r1, #512
 3426              	.LBB129:
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3427              		.loc 1 596 29 view .LVU1042
 3428 09dc 0A9A     		ldr	r2, [sp, #40]
 3429              	.LBE129:
 594:printf.c      **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3430              		.loc 1 594 14 view .LVU1043
 3431 09de 3ED1     		bne	.L605
 600:printf.c      ****             const long value = va_arg(va, long);
 3432              		.loc 1 600 16 is_stmt 1 view .LVU1044
 600:printf.c      ****             const long value = va_arg(va, long);
 3433              		.loc 1 600 19 is_stmt 0 view .LVU1045
 3434 09e0 11F48070 		ands	r0, r1, #256
 3435              	.LBB143:
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3436              		.loc 1 601 24 view .LVU1046
 3437 09e4 02F10408 		add	r8, r2, #4
 3438              	.LBE143:
 600:printf.c      ****             const long value = va_arg(va, long);
 3439              		.loc 1 600 19 view .LVU1047
 3440 09e8 40F09A80 		bne	.L606
 3441              	.LBB144:
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3442              		.loc 1 605 13 is_stmt 1 view .LVU1048
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3443              		.loc 1 605 76 is_stmt 0 view .LVU1049
 3444 09ec 4D06     		lsls	r5, r1, #25
 3445 09ee 40F1C780 		bpl	.L328
 3446              	.LVL410:
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3447              		.loc 1 605 76 view .LVU1050
 3448 09f2 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 3449 09f4 2746     		mov	r7, r4
 3450              	.LVL411:
 3451              	.L329:
 606:printf.c      ****           }
 3452              		.loc 1 606 13 is_stmt 1 view .LVU1051
 606:printf.c      ****           }
 3453              		.loc 1 606 19 is_stmt 0 view .LVU1052
 3454 09f6 E20F     		lsrs	r2, r4, #31
 3455              	.LVL412:
 3456              	.LBB145:
 3457              	.LBI145:
 249:printf.c      **** {
 3458              		.loc 1 249 15 is_stmt 1 view .LVU1053
 3459              	.LBB146:
 251:printf.c      ****   size_t len = 0U;
 3460              		.loc 1 251 3 view .LVU1054
 252:printf.c      **** 
 3461              		.loc 1 252 3 view .LVU1055
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3462              		.loc 1 255 3 view .LVU1056
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3463              		.loc 1 255 6 is_stmt 0 view .LVU1057
 3464 09f8 002C     		cmp	r4, #0
 3465 09fa 00F0BB80 		beq	.L331
 3466              	.LBE146:
 3467              	.LBE145:
 606:printf.c      ****           }
 3468              		.loc 1 606 19 view .LVU1058
 3469 09fe 3B46     		mov	r3, r7
 3470              	.L332:
 3471              	.LVL413:
 606:printf.c      ****           }
 3472              		.loc 1 606 19 view .LVU1059
 3473 0a00 0DF1500E 		add	lr, sp, #80
 3474              	.LBB152:
 3475              	.LBB150:
 3476              	.LBB147:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3477              		.loc 1 262 39 view .LVU1060
 3478 0a04 DFF8F4C2 		ldr	ip, .L618
 3479 0a08 0A92     		str	r2, [sp, #40]
 3480 0a0a 7446     		mov	r4, lr
 3481              	.LVL414:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3482              		.loc 1 262 39 view .LVU1061
 3483 0a0c 01E0     		b	.L334
 3484              	.LVL415:
 3485              	.L607:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3486              		.loc 1 262 39 view .LVU1062
 3487              	.LBE147:
 265:printf.c      ****   }
 3488              		.loc 1 265 20 discriminator 1 view .LVU1063
 3489 0a0e 2028     		cmp	r0, #32
 3490 0a10 0FD0     		beq	.L558
 3491              	.LVL416:
 3492              	.L334:
 261:printf.c      ****       const char digit = (char)(value % base);
 3493              		.loc 1 261 5 is_stmt 1 view .LVU1064
 3494              	.LBB148:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3495              		.loc 1 262 7 view .LVU1065
 263:printf.c      ****       value /= base;
 3496              		.loc 1 263 7 view .LVU1066
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3497              		.loc 1 262 39 is_stmt 0 view .LVU1067
 3498 0a12 ACFB0352 		umull	r5, r2, ip, r3
 3499 0a16 D208     		lsrs	r2, r2, #3
 3500 0a18 02EB8205 		add	r5, r2, r2, lsl #2
 3501 0a1c A3EB4505 		sub	r5, r3, r5, lsl #1
 3502 0a20 1F46     		mov	r7, r3
 263:printf.c      ****       value /= base;
 3503              		.loc 1 263 18 discriminator 1 view .LVU1068
 3504 0a22 3035     		adds	r5, r5, #48
 3505              	.LBE148:
 265:printf.c      ****   }
 3506              		.loc 1 265 20 view .LVU1069
 3507 0a24 092F     		cmp	r7, #9
 3508              	.LBB149:
 263:printf.c      ****       value /= base;
 3509              		.loc 1 263 18 discriminator 8 view .LVU1070
 3510 0a26 04F8015B 		strb	r5, [r4], #1
 263:printf.c      ****       value /= base;
 3511              		.loc 1 263 14 discriminator 8 view .LVU1071
 3512 0a2a 00F10100 		add	r0, r0, #1
 3513              	.LVL417:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3514              		.loc 1 264 7 is_stmt 1 view .LVU1072
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3515              		.loc 1 264 13 is_stmt 0 view .LVU1073
 3516 0a2e 1346     		mov	r3, r2
 3517              	.LVL418:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3518              		.loc 1 264 13 view .LVU1074
 3519              	.LBE149:
 265:printf.c      ****   }
 3520              		.loc 1 265 20 is_stmt 1 view .LVU1075
 3521 0a30 EDD8     		bhi	.L607
 3522              	.L558:
 3523 0a32 0A9A     		ldr	r2, [sp, #40]
 3524              	.LVL419:
 3525              	.L333:
 268:printf.c      **** }
 3526              		.loc 1 268 3 view .LVU1076
 268:printf.c      **** }
 3527              		.loc 1 268 10 is_stmt 0 view .LVU1077
 3528 0a34 0B9B     		ldr	r3, [sp, #44]
 3529 0a36 0691     		str	r1, [sp, #24]
 3530 0a38 CDE90463 		strd	r6, r3, [sp, #16]
 3531 0a3c CDE90102 		strd	r0, r2, [sp, #4]
 3532              	.LVL420:
 3533              	.L575:
 268:printf.c      **** }
 3534              		.loc 1 268 10 view .LVU1078
 3535 0a40 0A23     		movs	r3, #10
 3536 0a42 4A46     		mov	r2, r9
 3537 0a44 0393     		str	r3, [sp, #12]
 3538 0a46 CDF800E0 		str	lr, [sp]
 3539 0a4a DDE90813 		ldrd	r1, r3, [sp, #32]
 3540 0a4e 5846     		mov	r0, fp
 3541 0a50 FFF7FEFF 		bl	_ntoa_format
 3542              	.LVL421:
 268:printf.c      **** }
 3543              		.loc 1 268 10 view .LVU1079
 3544 0a54 CDF82880 		str	r8, [sp, #40]
 3545 0a58 8146     		mov	r9, r0
 268:printf.c      **** }
 3546              		.loc 1 268 10 view .LVU1080
 3547 0a5a FFF7EEBA 		b	.L268
 3548              	.LVL422:
 3549              	.L605:
 268:printf.c      **** }
 3550              		.loc 1 268 10 view .LVU1081
 3551              	.LBE150:
 3552              	.LBE152:
 3553              	.LBE144:
 3554              	.LBB154:
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3555              		.loc 1 596 13 is_stmt 1 view .LVU1082
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3556              		.loc 1 596 29 is_stmt 0 view .LVU1083
 3557 0a5e 0732     		adds	r2, r2, #7
 3558 0a60 22F00702 		bic	r2, r2, #7
 3559              	.LVL423:
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3560              		.loc 1 596 29 view .LVU1084
 3561 0a64 1046     		mov	r0, r2
 3562 0a66 5268     		ldr	r2, [r2, #4]
 3563              	.LVL424:
 597:printf.c      **** #endif
 3564              		.loc 1 597 13 is_stmt 1 view .LVU1085
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3565              		.loc 1 596 29 is_stmt 0 view .LVU1086
 3566 0a68 50F8084B 		ldr	r4, [r0], #8
 3567              	.LVL425:
 596:printf.c      ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3568              		.loc 1 596 29 view .LVU1087
 3569 0a6c 0A90     		str	r0, [sp, #40]
 3570              	.LBB130:
 3571              	.LBB131:
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3572              		.loc 1 280 6 view .LVU1088
 3573 0a6e 54EA0207 		orrs	r7, r4, r2
 3574              	.LBE131:
 3575              	.LBE130:
 597:printf.c      **** #endif
 3576              		.loc 1 597 19 view .LVU1089
 3577 0a72 4FEAD270 		lsr	r0, r2, #31
 3578              	.LVL426:
 3579              	.LBB139:
 3580              	.LBI130:
 274:printf.c      **** {
 3581              		.loc 1 274 15 is_stmt 1 view .LVU1090
 3582              	.LBB135:
 276:printf.c      ****   size_t len = 0U;
 3583              		.loc 1 276 3 view .LVU1091
 277:printf.c      **** 
 3584              		.loc 1 277 3 view .LVU1092
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3585              		.loc 1 280 3 view .LVU1093
 280:printf.c      ****     flags &= ~FLAGS_HASH;
 3586              		.loc 1 280 6 is_stmt 0 view .LVU1094
 3587 0a76 00F0C680 		beq	.L315
 3588              	.LBE135:
 3589              	.LBE139:
 597:printf.c      **** #endif
 3590              		.loc 1 597 61 view .LVU1095
 3591 0a7a 002A     		cmp	r2, #0
 597:printf.c      **** #endif
 3592              		.loc 1 597 61 view .LVU1096
 3593 0a7c 2346     		mov	r3, r4
 3594 0a7e 02DA     		bge	.L317
 3595 0a80 6342     		negs	r3, r4
 3596 0a82 62EB4202 		sbc	r2, r2, r2, lsl #1
 3597              	.LVL427:
 3598              	.L317:
 597:printf.c      **** #endif
 3599              		.loc 1 597 61 view .LVU1097
 3600 0a86 0DF1500E 		add	lr, sp, #80
 3601 0a8a 9C4C     		ldr	r4, .L618
 3602              	.LVL428:
 597:printf.c      **** #endif
 3603              		.loc 1 597 61 view .LVU1098
 3604 0a8c 0C90     		str	r0, [sp, #48]
 3605 0a8e F446     		mov	ip, lr
 3606              	.LBB140:
 3607              	.LBB136:
 285:printf.c      ****     do {
 3608              		.loc 1 285 6 view .LVU1099
 3609 0a90 4FF00008 		mov	r8, #0
 3610 0a94 0E96     		str	r6, [sp, #56]
 3611 0a96 CDF84090 		str	r9, [sp, #64]
 3612 0a9a 02E0     		b	.L321
 3613              	.LVL429:
 3614              	.L608:
 290:printf.c      ****   }
 3615              		.loc 1 290 20 discriminator 1 view .LVU1100
 3616 0a9c B8F1200F 		cmp	r8, #32
 3617 0aa0 2ED0     		beq	.L556
 3618              	.LVL430:
 3619              	.L321:
 286:printf.c      ****       const char digit = (char)(value % base);
 3620              		.loc 1 286 5 is_stmt 1 view .LVU1101
 3621              	.LBB132:
 287:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3622              		.loc 1 287 7 view .LVU1102
 3623 0aa2 9818     		adds	r0, r3, r2
 3624 0aa4 40F10000 		adc	r0, r0, #0
 3625 0aa8 A4FB0056 		umull	r5, r6, r4, r0
 3626 0aac 26F00305 		bic	r5, r6, #3
 3627 0ab0 05EB9605 		add	r5, r5, r6, lsr #2
 3628 0ab4 401B     		subs	r0, r0, r5
 3629 0ab6 1D1A     		subs	r5, r3, r0
 3630 0ab8 9946     		mov	r9, r3
 3631 0aba 1746     		mov	r7, r2
 3632 0abc 62F10003 		sbc	r3, r2, #0
 3633              	.LVL431:
 287:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3634              		.loc 1 287 7 is_stmt 0 view .LVU1103
 3635 0ac0 4FF0CC32 		mov	r2, #-858993460
 3636              	.LVL432:
 287:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3637              		.loc 1 287 7 view .LVU1104
 3638 0ac4 02FB05F2 		mul	r2, r2, r5
 3639 0ac8 04FB0322 		mla	r2, r4, r3, r2
 3640 0acc A5FB0435 		umull	r3, r5, r5, r4
 3641 0ad0 2A44     		add	r2, r2, r5
 3642 0ad2 03F00106 		and	r6, r3, #1
 3643 0ad6 0525     		movs	r5, #5
 3644 0ad8 A6FB0556 		umull	r5, r6, r6, r5
 3645 0adc 2D18     		adds	r5, r5, r0
 3646              	.LBE132:
 290:printf.c      ****   }
 3647              		.loc 1 290 20 view .LVU1105
 3648 0ade B9F10A0F 		cmp	r9, #10
 3649 0ae2 4FEA5303 		lsr	r3, r3, #1
 3650              	.LVL433:
 3651              	.LBB133:
 288:printf.c      ****       value /= base;
 3652              		.loc 1 288 7 is_stmt 1 view .LVU1106
 288:printf.c      ****       value /= base;
 3653              		.loc 1 288 18 is_stmt 0 discriminator 1 view .LVU1107
 3654 0ae6 05F13005 		add	r5, r5, #48
 3655              	.LVL434:
 288:printf.c      ****       value /= base;
 3656              		.loc 1 288 18 discriminator 1 view .LVU1108
 3657              	.LBE133:
 290:printf.c      ****   }
 3658              		.loc 1 290 20 view .LVU1109
 3659 0aea 77F10007 		sbcs	r7, r7, #0
 3660              	.LVL435:
 3661              	.LBB134:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3662              		.loc 1 289 13 view .LVU1110
 3663 0aee 43EAC273 		orr	r3, r3, r2, lsl #31
 288:printf.c      ****       value /= base;
 3664              		.loc 1 288 18 discriminator 8 view .LVU1111
 3665 0af2 0CF8015B 		strb	r5, [ip], #1
 288:printf.c      ****       value /= base;
 3666              		.loc 1 288 14 discriminator 8 view .LVU1112
 3667 0af6 08F10108 		add	r8, r8, #1
 3668              	.LVL436:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3669              		.loc 1 289 7 is_stmt 1 view .LVU1113
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3670              		.loc 1 289 13 is_stmt 0 view .LVU1114
 3671 0afa 4FEA5202 		lsr	r2, r2, #1
 3672              	.LVL437:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3673              		.loc 1 289 13 view .LVU1115
 3674              	.LBE134:
 290:printf.c      ****   }
 3675              		.loc 1 290 20 is_stmt 1 view .LVU1116
 3676 0afe CDD2     		bcs	.L608
 3677              	.L556:
 3678 0b00 0C98     		ldr	r0, [sp, #48]
 3679 0b02 0E9E     		ldr	r6, [sp, #56]
 3680 0b04 DDF84090 		ldr	r9, [sp, #64]
 3681              	.LVL438:
 3682              	.L318:
 293:printf.c      **** }
 3683              		.loc 1 293 3 view .LVU1117
 293:printf.c      **** }
 3684              		.loc 1 293 10 is_stmt 0 view .LVU1118
 3685 0b08 0B9B     		ldr	r3, [sp, #44]
 3686 0b0a 0691     		str	r1, [sp, #24]
 3687              	.LVL439:
 293:printf.c      **** }
 3688              		.loc 1 293 10 view .LVU1119
 3689 0b0c CDE90463 		strd	r6, r3, [sp, #16]
 3690 0b10 0A23     		movs	r3, #10
 3691 0b12 CDE90180 		strd	r8, r0, [sp, #4]
 3692 0b16 CDF800E0 		str	lr, [sp]
 3693 0b1a 4A46     		mov	r2, r9
 3694 0b1c 0393     		str	r3, [sp, #12]
 3695 0b1e 0EE7     		b	.L574
 3696              	.LVL440:
 3697              	.L606:
 293:printf.c      **** }
 3698              		.loc 1 293 10 view .LVU1120
 3699              	.LBE136:
 3700              	.LBE140:
 3701              	.LBE154:
 3702              	.LBB155:
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3703              		.loc 1 601 13 is_stmt 1 view .LVU1121
 601:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3704              		.loc 1 601 24 is_stmt 0 view .LVU1122
 3705 0b20 1068     		ldr	r0, [r2]
 602:printf.c      ****           }
 3706              		.loc 1 602 13 is_stmt 1 view .LVU1123
 602:printf.c      ****           }
 3707              		.loc 1 602 19 is_stmt 0 view .LVU1124
 3708 0b22 C20F     		lsrs	r2, r0, #31
 3709              	.LVL441:
 3710              	.LBB97:
 3711              	.LBI97:
 249:printf.c      **** {
 3712              		.loc 1 249 15 is_stmt 1 view .LVU1125
 3713              	.LBB98:
 251:printf.c      ****   size_t len = 0U;
 3714              		.loc 1 251 3 view .LVU1126
 252:printf.c      **** 
 3715              		.loc 1 252 3 view .LVU1127
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3716              		.loc 1 255 3 view .LVU1128
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3717              		.loc 1 255 6 is_stmt 0 view .LVU1129
 3718 0b24 0028     		cmp	r0, #0
 3719 0b26 00F0C080 		beq	.L324
 3720              	.LBE98:
 3721              	.LBE97:
 602:printf.c      ****           }
 3722              		.loc 1 602 56 view .LVU1130
 3723 0b2a 80EAE073 		eor	r3, r0, r0, asr #31
 3724 0b2e A3EBE073 		sub	r3, r3, r0, asr #31
 3725              	.L325:
 3726              	.LVL442:
 602:printf.c      ****           }
 3727              		.loc 1 602 56 view .LVU1131
 3728 0b32 0DF1500E 		add	lr, sp, #80
 3729              	.LBB104:
 3730              	.LBB102:
 3731              	.LBB99:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3732              		.loc 1 262 39 view .LVU1132
 3733 0b36 DFF8C4C1 		ldr	ip, .L618
 3734 0b3a 0A92     		str	r2, [sp, #40]
 3735              	.LVL443:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3736              		.loc 1 262 39 view .LVU1133
 3737 0b3c 7046     		mov	r0, lr
 3738              	.LVL444:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3739              		.loc 1 262 39 view .LVU1134
 3740 0b3e 01E0     		b	.L327
 3741              	.LVL445:
 3742              	.L609:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3743              		.loc 1 262 39 view .LVU1135
 3744              	.LBE99:
 265:printf.c      ****   }
 3745              		.loc 1 265 20 discriminator 1 view .LVU1136
 3746 0b40 202C     		cmp	r4, #32
 3747 0b42 0FD0     		beq	.L557
 3748              	.LVL446:
 3749              	.L327:
 261:printf.c      ****       const char digit = (char)(value % base);
 3750              		.loc 1 261 5 is_stmt 1 view .LVU1137
 3751              	.LBB100:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3752              		.loc 1 262 7 view .LVU1138
 263:printf.c      ****       value /= base;
 3753              		.loc 1 263 7 view .LVU1139
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3754              		.loc 1 262 39 is_stmt 0 view .LVU1140
 3755 0b44 ACFB0352 		umull	r5, r2, ip, r3
 3756 0b48 D208     		lsrs	r2, r2, #3
 3757 0b4a 02EB8205 		add	r5, r2, r2, lsl #2
 3758 0b4e A3EB4505 		sub	r5, r3, r5, lsl #1
 3759 0b52 1F46     		mov	r7, r3
 263:printf.c      ****       value /= base;
 3760              		.loc 1 263 18 discriminator 1 view .LVU1141
 3761 0b54 3035     		adds	r5, r5, #48
 3762              	.LBE100:
 265:printf.c      ****   }
 3763              		.loc 1 265 20 view .LVU1142
 3764 0b56 092F     		cmp	r7, #9
 3765              	.LBB101:
 263:printf.c      ****       value /= base;
 3766              		.loc 1 263 18 discriminator 8 view .LVU1143
 3767 0b58 00F8015B 		strb	r5, [r0], #1
 263:printf.c      ****       value /= base;
 3768              		.loc 1 263 14 discriminator 8 view .LVU1144
 3769 0b5c 04F10104 		add	r4, r4, #1
 3770              	.LVL447:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3771              		.loc 1 264 7 is_stmt 1 view .LVU1145
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3772              		.loc 1 264 13 is_stmt 0 view .LVU1146
 3773 0b60 1346     		mov	r3, r2
 3774              	.LVL448:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3775              		.loc 1 264 13 view .LVU1147
 3776              	.LBE101:
 265:printf.c      ****   }
 3777              		.loc 1 265 20 is_stmt 1 view .LVU1148
 3778 0b62 EDD8     		bhi	.L609
 3779              	.L557:
 3780 0b64 0A9A     		ldr	r2, [sp, #40]
 3781              	.LVL449:
 3782              	.L326:
 268:printf.c      **** }
 3783              		.loc 1 268 3 view .LVU1149
 268:printf.c      **** }
 3784              		.loc 1 268 10 is_stmt 0 view .LVU1150
 3785 0b66 0B9B     		ldr	r3, [sp, #44]
 3786 0b68 0691     		str	r1, [sp, #24]
 3787              	.LVL450:
 268:printf.c      **** }
 3788              		.loc 1 268 10 view .LVU1151
 3789 0b6a CDE90463 		strd	r6, r3, [sp, #16]
 3790 0b6e CDE90142 		strd	r4, r2, [sp, #4]
 3791 0b72 65E7     		b	.L575
 3792              	.LVL451:
 3793              	.L331:
 268:printf.c      **** }
 3794              		.loc 1 268 10 view .LVU1152
 3795              	.LBE102:
 3796              	.LBE104:
 3797              	.LBE155:
 3798              	.LBB156:
 3799              	.LBB153:
 3800              	.LBB151:
 256:printf.c      ****   }
 3801              		.loc 1 256 5 is_stmt 1 view .LVU1153
 260:printf.c      ****     do {
 3802              		.loc 1 260 3 view .LVU1154
 260:printf.c      ****     do {
 3803              		.loc 1 260 6 is_stmt 0 view .LVU1155
 3804 0b74 002B     		cmp	r3, #0
 3805 0b76 3FF443AF 		beq	.L332
 3806 0b7a 0DF1500E 		add	lr, sp, #80
 3807 0b7e 59E7     		b	.L333
 3808              	.LVL452:
 3809              	.L328:
 260:printf.c      ****     do {
 3810              		.loc 1 260 6 view .LVU1156
 3811              	.LBE151:
 3812              	.LBE153:
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3813              		.loc 1 605 129 discriminator 2 view .LVU1157
 3814 0b80 0C06     		lsls	r4, r1, #24
 3815 0b82 40F19880 		bpl	.L330
 3816              	.LVL453:
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3817              		.loc 1 605 102 discriminator 1 view .LVU1158
 3818 0b86 B2F90040 		ldrsh	r4, [r2]
 606:printf.c      ****           }
 3819              		.loc 1 606 56 view .LVU1159
 3820 0b8a 84EAE477 		eor	r7, r4, r4, asr #31
 3821 0b8e A7EBE477 		sub	r7, r7, r4, asr #31
 3822 0b92 BFB2     		uxth	r7, r7
 3823 0b94 2FE7     		b	.L329
 3824              	.LVL454:
 3825              	.L336:
 606:printf.c      ****           }
 3826              		.loc 1 606 56 view .LVU1160
 3827 0b96 0C9B     		ldr	r3, [sp, #48]
 3828 0b98 0E96     		str	r6, [sp, #56]
 3829 0b9a 13F0200F 		tst	r3, #32
 3830 0b9e 14BF     		ite	ne
 3831 0ba0 4123     		movne	r3, #65
 3832 0ba2 6123     		moveq	r3, #97
 3833 0ba4 0DF1500E 		add	lr, sp, #80
 3834              	.LBE156:
 3835              	.LBB157:
 3836              	.LBB126:
 3837              	.LBB120:
 288:printf.c      ****       value /= base;
 3838              		.loc 1 288 18 discriminator 7 view .LVU1161
 3839 0ba8 0A3B     		subs	r3, r3, #10
 3840 0baa CDE912CB 		strd	ip, fp, [sp, #72]
 3841 0bae CDF84090 		str	r9, [sp, #64]
 288:printf.c      ****       value /= base;
 3842              		.loc 1 288 54 discriminator 2 view .LVU1162
 3843 0bb2 4FF00008 		mov	r8, #0
 3844 0bb6 7646     		mov	r6, lr
 3845 0bb8 F346     		mov	fp, lr
 3846 0bba 9946     		mov	r9, r3
 3847 0bbc 04E0     		b	.L340
 3848              	.LVL455:
 3849              	.L610:
 288:printf.c      ****       value /= base;
 3850              		.loc 1 288 54 discriminator 2 view .LVU1163
 3851              	.LBE120:
 290:printf.c      ****   }
 3852              		.loc 1 290 20 discriminator 1 view .LVU1164
 3853 0bbe B8F1200F 		cmp	r8, #32
 3854 0bc2 17D0     		beq	.L559
 3855              	.LBB121:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3856              		.loc 1 289 13 view .LVU1165
 3857 0bc4 0546     		mov	r5, r0
 3858 0bc6 0C46     		mov	r4, r1
 3859              	.LVL456:
 3860              	.L340:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3861              		.loc 1 289 13 view .LVU1166
 3862              	.LBE121:
 286:printf.c      ****       const char digit = (char)(value % base);
 3863              		.loc 1 286 5 is_stmt 1 view .LVU1167
 3864              	.LBB122:
 287:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3865              		.loc 1 287 7 view .LVU1168
 3866 0bc8 2146     		mov	r1, r4
 3867 0bca 3A46     		mov	r2, r7
 3868 0bcc 0023     		movs	r3, #0
 3869 0bce 2846     		mov	r0, r5
 3870 0bd0 FFF7FEFF 		bl	__aeabi_uldivmod
 3871              	.LVL457:
 287:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 3872              		.loc 1 287 18 is_stmt 0 view .LVU1169
 3873 0bd4 D2B2     		uxtb	r2, r2
 3874              	.LVL458:
 288:printf.c      ****       value /= base;
 3875              		.loc 1 288 7 is_stmt 1 view .LVU1170
 288:printf.c      ****       value /= base;
 3876              		.loc 1 288 18 is_stmt 0 view .LVU1171
 3877 0bd6 092A     		cmp	r2, #9
 288:printf.c      ****       value /= base;
 3878              		.loc 1 288 18 discriminator 1 view .LVU1172
 3879 0bd8 02F13003 		add	r3, r2, #48
 288:printf.c      ****       value /= base;
 3880              		.loc 1 288 18 discriminator 7 view .LVU1173
 3881 0bdc 88BF     		it	hi
 3882 0bde 02EB0903 		addhi	r3, r2, r9
 3883              	.LBE122:
 290:printf.c      ****   }
 3884              		.loc 1 290 20 view .LVU1174
 3885 0be2 BD42     		cmp	r5, r7
 3886              	.LBB123:
 288:printf.c      ****       value /= base;
 3887              		.loc 1 288 18 discriminator 7 view .LVU1175
 3888 0be4 DBB2     		uxtb	r3, r3
 3889              	.LBE123:
 290:printf.c      ****   }
 3890              		.loc 1 290 20 view .LVU1176
 3891 0be6 74F10004 		sbcs	r4, r4, #0
 3892              	.LVL459:
 3893              	.LBB124:
 288:printf.c      ****       value /= base;
 3894              		.loc 1 288 18 discriminator 8 view .LVU1177
 3895 0bea 06F8013B 		strb	r3, [r6], #1
 288:printf.c      ****       value /= base;
 3896              		.loc 1 288 14 discriminator 8 view .LVU1178
 3897 0bee 08F10108 		add	r8, r8, #1
 3898              	.LVL460:
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3899              		.loc 1 289 7 is_stmt 1 view .LVU1179
 289:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 3900              		.loc 1 289 7 is_stmt 0 view .LVU1180
 3901              	.LBE124:
 290:printf.c      ****   }
 3902              		.loc 1 290 20 is_stmt 1 view .LVU1181
 3903 0bf2 E4D2     		bcs	.L610
 3904              	.L559:
 3905 0bf4 DE46     		mov	lr, fp
 3906 0bf6 0E9E     		ldr	r6, [sp, #56]
 3907 0bf8 DDF84090 		ldr	r9, [sp, #64]
 3908 0bfc DDF848C0 		ldr	ip, [sp, #72]
 3909 0c00 DDF84CB0 		ldr	fp, [sp, #76]
 3910 0c04 8FE6     		b	.L337
 3911              	.LVL461:
 3912              	.L315:
 290:printf.c      ****   }
 3913              		.loc 1 290 20 is_stmt 0 view .LVU1182
 3914              	.LBE126:
 3915              	.LBE157:
 3916              	.LBB158:
 3917              	.LBB141:
 3918              	.LBB137:
 281:printf.c      ****   }
 3919              		.loc 1 281 5 is_stmt 1 view .LVU1183
 285:printf.c      ****     do {
 3920              		.loc 1 285 3 view .LVU1184
 285:printf.c      ****     do {
 3921              		.loc 1 285 6 is_stmt 0 view .LVU1185
 3922 0c06 002B     		cmp	r3, #0
 3923 0c08 5BD1     		bne	.L448
 3924 0c0a 1A46     		mov	r2, r3
 3925              	.LVL462:
 285:printf.c      ****     do {
 3926              		.loc 1 285 6 view .LVU1186
 3927 0c0c 3BE7     		b	.L317
 3928              	.LVL463:
 3929              	.L471:
 285:printf.c      ****     do {
 3930              		.loc 1 285 6 view .LVU1187
 3931              	.LBE137:
 3932              	.LBE141:
 3933              	.LBE158:
 3934              	.LBE250:
 3935              	.LBB251:
 3936              	.LBB215:
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 3937              		.loc 1 401 6 view .LVU1188
 3938 0c0e 3B46     		mov	r3, r7
 3939 0c10 B846     		mov	r8, r7
 3940 0c12 F4E5     		b	.L391
 3941              	.LVL464:
 3942              	.L597:
 401:printf.c      ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 3943              		.loc 1 401 6 view .LVU1189
 3944              	.LBE215:
 3945              	.LBE251:
 3946              	.LBB252:
 617:printf.c      ****           }
 3947              		.loc 1 617 13 is_stmt 1 view .LVU1190
 617:printf.c      ****           }
 3948              		.loc 1 617 19 is_stmt 0 view .LVU1191
 3949 0c14 0A9A     		ldr	r2, [sp, #40]
 3950 0c16 1268     		ldr	r2, [r2]
 3951              	.LVL465:
 3952              	.LBB159:
 3953              	.LBI159:
 249:printf.c      **** {
 3954              		.loc 1 249 15 is_stmt 1 view .LVU1192
 3955              	.LBB160:
 251:printf.c      ****   size_t len = 0U;
 3956              		.loc 1 251 3 view .LVU1193
 252:printf.c      **** 
 3957              		.loc 1 252 3 view .LVU1194
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3958              		.loc 1 255 3 view .LVU1195
 255:printf.c      ****     flags &= ~FLAGS_HASH;
 3959              		.loc 1 255 6 is_stmt 0 view .LVU1196
 3960 0c18 12BB     		cbnz	r2, .L342
 256:printf.c      ****   }
 3961              		.loc 1 256 5 is_stmt 1 view .LVU1197
 256:printf.c      ****   }
 3962              		.loc 1 256 11 is_stmt 0 view .LVU1198
 3963 0c1a 0C99     		ldr	r1, [sp, #48]
 3964 0c1c 21F01001 		bic	r1, r1, #16
 3965 0c20 0C91     		str	r1, [sp, #48]
 3966              	.LVL466:
 260:printf.c      ****     do {
 3967              		.loc 1 260 3 is_stmt 1 view .LVU1199
 260:printf.c      ****     do {
 3968              		.loc 1 260 6 is_stmt 0 view .LVU1200
 3969 0c22 EBB1     		cbz	r3, .L342
 3970 0c24 0DF1500E 		add	lr, sp, #80
 3971              	.LVL467:
 3972              	.L343:
 268:printf.c      **** }
 3973              		.loc 1 268 3 is_stmt 1 view .LVU1201
 268:printf.c      **** }
 3974              		.loc 1 268 10 is_stmt 0 view .LVU1202
 3975 0c28 0C9B     		ldr	r3, [sp, #48]
 3976 0c2a 0693     		str	r3, [sp, #24]
 3977 0c2c 0B9B     		ldr	r3, [sp, #44]
 3978 0c2e CDF80CC0 		str	ip, [sp, #12]
 3979 0c32 CDE90463 		strd	r6, r3, [sp, #16]
 3980 0c36 0190     		str	r0, [sp, #4]
 3981 0c38 DCE4     		b	.L573
 3982              	.LVL468:
 3983              	.L594:
 268:printf.c      **** }
 3984              		.loc 1 268 10 view .LVU1203
 3985              	.LBE160:
 3986              	.LBE159:
 573:printf.c      ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 3987              		.loc 1 573 11 is_stmt 1 view .LVU1204
 574:printf.c      ****         }
 3988              		.loc 1 574 11 view .LVU1205
 577:printf.c      ****           flags |= FLAGS_UPPERCASE;
 3989              		.loc 1 577 9 view .LVU1206
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3990              		.loc 1 582 9 view .LVU1207
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 3991              		.loc 1 587 9 view .LVU1208
 587:printf.c      ****           flags &= ~FLAGS_ZEROPAD;
 3992              		.loc 1 587 12 is_stmt 0 view .LVU1209
 3993 0c3a 14F48063 		ands	r3, r4, #1024
 3994 0c3e 7FF4C7AE 		bne	.L310
 574:printf.c      ****         }
 3995              		.loc 1 574 17 view .LVU1210
 3996 0c42 24F01001 		bic	r1, r4, #16
 3997              	.LVL469:
 574:printf.c      ****         }
 3998              		.loc 1 574 17 view .LVU1211
 3999 0c46 C7E6     		b	.L311
 4000              	.LVL470:
 4001              	.L393:
 574:printf.c      ****         }
 4002              		.loc 1 574 17 view .LVU1212
 4003              	.LBE252:
 4004              	.LBB253:
 4005              	.LBB216:
 417:printf.c      ****       buf[len++] = ' ';
 4006              		.loc 1 417 10 is_stmt 1 view .LVU1213
 417:printf.c      ****       buf[len++] = ' ';
 4007              		.loc 1 417 13 is_stmt 0 view .LVU1214
 4008 0c48 2607     		lsls	r6, r4, #28
 4009 0c4a E0D5     		bpl	.L471
 418:printf.c      ****     }
 4010              		.loc 1 418 7 is_stmt 1 view .LVU1215
 418:printf.c      ****     }
 4011              		.loc 1 418 18 is_stmt 0 view .LVU1216
 4012 0c4c 07F17003 		add	r3, r7, #112
 4013 0c50 6B44     		add	r3, sp, r3
 418:printf.c      ****     }
 4014              		.loc 1 418 14 view .LVU1217
 4015 0c52 07F10108 		add	r8, r7, #1
 418:printf.c      ****     }
 4016              		.loc 1 418 18 view .LVU1218
 4017 0c56 2021     		movs	r1, #32
 4018 0c58 03F8201C 		strb	r1, [r3, #-32]
 418:printf.c      ****     }
 4019              		.loc 1 418 14 view .LVU1219
 4020 0c5c 4346     		mov	r3, r8
 4021              	.LVL471:
 418:printf.c      ****     }
 4022              		.loc 1 418 14 view .LVU1220
 4023 0c5e CEE5     		b	.L391
 4024              	.LVL472:
 4025              	.L342:
 418:printf.c      ****     }
 4026              		.loc 1 418 14 view .LVU1221
 4027 0c60 0C9B     		ldr	r3, [sp, #48]
 4028 0c62 13F0200F 		tst	r3, #32
 4029 0c66 14BF     		ite	ne
 4030 0c68 4123     		movne	r3, #65
 4031 0c6a 6123     		moveq	r3, #97
 4032 0c6c 0DF1500E 		add	lr, sp, #80
 4033              	.LBE216:
 4034              	.LBE253:
 4035              	.LBB254:
 4036              	.LBB166:
 4037              	.LBB165:
 4038              	.LBB161:
 263:printf.c      ****       value /= base;
 4039              		.loc 1 263 18 discriminator 7 view .LVU1222
 4040 0c70 A3F10A05 		sub	r5, r3, #10
 4041 0c74 7746     		mov	r7, lr
 4042 0c76 02E0     		b	.L346
 4043              	.LVL473:
 4044              	.L611:
 263:printf.c      ****       value /= base;
 4045              		.loc 1 263 18 discriminator 7 view .LVU1223
 4046              	.LBE161:
 265:printf.c      ****   }
 4047              		.loc 1 265 20 discriminator 1 view .LVU1224
 4048 0c78 2028     		cmp	r0, #32
 4049 0c7a D5D0     		beq	.L343
 4050              	.LBB162:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 4051              		.loc 1 264 13 view .LVU1225
 4052 0c7c 0A46     		mov	r2, r1
 4053              	.LVL474:
 4054              	.L346:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 4055              		.loc 1 264 13 view .LVU1226
 4056              	.LBE162:
 261:printf.c      ****       const char digit = (char)(value % base);
 4057              		.loc 1 261 5 is_stmt 1 view .LVU1227
 4058              	.LBB163:
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 4059              		.loc 1 262 7 view .LVU1228
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 4060              		.loc 1 262 39 is_stmt 0 view .LVU1229
 4061 0c7e B2FBFCF1 		udiv	r1, r2, ip
 4062 0c82 0CFB1128 		mls	r8, ip, r1, r2
 262:printf.c      ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 4063              		.loc 1 262 18 view .LVU1230
 4064 0c86 5FFA88F3 		uxtb	r3, r8
 4065              	.LVL475:
 263:printf.c      ****       value /= base;
 4066              		.loc 1 263 7 is_stmt 1 view .LVU1231
 263:printf.c      ****       value /= base;
 4067              		.loc 1 263 18 is_stmt 0 view .LVU1232
 4068 0c8a B8F1090F 		cmp	r8, #9
 263:printf.c      ****       value /= base;
 4069              		.loc 1 263 18 discriminator 1 view .LVU1233
 4070 0c8e 03F13008 		add	r8, r3, #48
 263:printf.c      ****       value /= base;
 4071              		.loc 1 263 18 discriminator 7 view .LVU1234
 4072 0c92 8ABF     		itet	hi
 4073 0c94 5B19     		addhi	r3, r3, r5
 4074              	.LVL476:
 263:printf.c      ****       value /= base;
 4075              		.loc 1 263 18 discriminator 1 view .LVU1235
 4076 0c96 5FFA88F3 		uxtbls	r3, r8
 263:printf.c      ****       value /= base;
 4077              		.loc 1 263 18 discriminator 7 view .LVU1236
 4078 0c9a DBB2     		uxtbhi	r3, r3
 4079              	.LBE163:
 265:printf.c      ****   }
 4080              		.loc 1 265 20 view .LVU1237
 4081 0c9c 6245     		cmp	r2, ip
 4082              	.LBB164:
 263:printf.c      ****       value /= base;
 4083              		.loc 1 263 18 discriminator 8 view .LVU1238
 4084 0c9e 07F8013B 		strb	r3, [r7], #1
 263:printf.c      ****       value /= base;
 4085              		.loc 1 263 14 discriminator 8 view .LVU1239
 4086 0ca2 00F10100 		add	r0, r0, #1
 4087              	.LVL477:
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 4088              		.loc 1 264 7 is_stmt 1 view .LVU1240
 264:printf.c      ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 4089              		.loc 1 264 7 is_stmt 0 view .LVU1241
 4090              	.LBE164:
 265:printf.c      ****   }
 4091              		.loc 1 265 20 is_stmt 1 view .LVU1242
 4092 0ca6 E7D2     		bcs	.L611
 4093 0ca8 BEE7     		b	.L343
 4094              	.LVL478:
 4095              	.L324:
 265:printf.c      ****   }
 4096              		.loc 1 265 20 is_stmt 0 view .LVU1243
 4097              	.LBE165:
 4098              	.LBE166:
 4099              	.LBB167:
 4100              	.LBB105:
 4101              	.LBB103:
 256:printf.c      ****   }
 4102              		.loc 1 256 5 is_stmt 1 view .LVU1244
 260:printf.c      ****     do {
 4103              		.loc 1 260 3 view .LVU1245
 260:printf.c      ****     do {
 4104              		.loc 1 260 6 is_stmt 0 view .LVU1246
 4105 0caa 002B     		cmp	r3, #0
 4106 0cac 3FF441AF 		beq	.L325
 4107 0cb0 0DF1500E 		add	lr, sp, #80
 4108 0cb4 57E7     		b	.L326
 4109              	.LVL479:
 4110              	.L330:
 260:printf.c      ****     do {
 4111              		.loc 1 260 6 view .LVU1247
 4112              	.LBE103:
 4113              	.LBE105:
 4114              	.LBE167:
 4115              	.LBB168:
 605:printf.c      ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 4116              		.loc 1 605 129 discriminator 5 view .LVU1248
 4117 0cb6 1468     		ldr	r4, [r2]
 606:printf.c      ****           }
 4118              		.loc 1 606 56 view .LVU1249
 4119 0cb8 84EAE477 		eor	r7, r4, r4, asr #31
 4120 0cbc A7EBE477 		sub	r7, r7, r4, asr #31
 4121 0cc0 99E6     		b	.L329
 4122              	.LVL480:
 4123              	.L448:
 606:printf.c      ****           }
 4124              		.loc 1 606 56 view .LVU1250
 4125              	.LBE168:
 4126              	.LBB169:
 4127              	.LBB142:
 4128              	.LBB138:
 277:printf.c      **** 
 4129              		.loc 1 277 10 view .LVU1251
 4130 0cc2 4FF00008 		mov	r8, #0
 4131 0cc6 0DF1500E 		add	lr, sp, #80
 4132 0cca 1DE7     		b	.L318
 4133              	.LVL481:
 4134              	.L412:
 277:printf.c      **** 
 4135              		.loc 1 277 10 view .LVU1252
 4136              	.LBE138:
 4137              	.LBE142:
 4138              	.LBE169:
 4139              	.LBE254:
 4140              	.LBB255:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 4141              		.loc 1 662 19 view .LVU1253
 4142 0ccc 08F10108 		add	r8, r8, #1
 4143              	.LVL482:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 4144              		.loc 1 662 19 view .LVU1254
 4145 0cd0 3BE5     		b	.L414
 4146              	.LVL483:
 4147              	.L604:
 662:printf.c      ****             out(' ', buffer, idx++, maxlen);
 4148              		.loc 1 662 19 view .LVU1255
 4149              	.LBE255:
 4150              	.LBB256:
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 4151              		.loc 1 582 12 view .LVU1256
 4152 0cd2 0A27     		movs	r7, #10
 574:printf.c      ****         }
 4153              		.loc 1 574 17 view .LVU1257
 4154 0cd4 0C46     		mov	r4, r1
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 4155              		.loc 1 582 12 view .LVU1258
 4156 0cd6 BC46     		mov	ip, r7
 4157 0cd8 61E4     		b	.L305
 4158              	.LVL484:
 4159              	.L589:
 582:printf.c      ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 4160              		.loc 1 582 12 view .LVU1259
 4161              	.LBE256:
 4162              	.LBB257:
 4163              	.LBB217:
 339:printf.c      ****   unsigned long frac = (unsigned long)tmp;
 4164              		.loc 1 339 39 view .LVU1260
 4165 0cda 094B     		ldr	r3, .L618+4
 4166 0cdc 03EBC603 		add	r3, r3, r6, lsl #3
 4167 0ce0 93ED007B 		vldr.64	d7, [r3]
 4168 0ce4 B046     		mov	r8, r6
 4169 0ce6 8DED0E7B 		vstr.64	d7, [sp, #56]
 4170 0cea 0027     		movs	r7, #0
 4171 0cec FFF74DBB 		b	.L360
 4172              	.LVL485:
 4173              	.L600:
 402:printf.c      ****       width--;
 4174              		.loc 1 402 5 is_stmt 1 view .LVU1261
 402:printf.c      ****       width--;
 4175              		.loc 1 402 8 is_stmt 0 view .LVU1262
 4176 0cf0 0B9B     		ldr	r3, [sp, #44]
 4177              	.LVL486:
 402:printf.c      ****       width--;
 4178              		.loc 1 402 8 view .LVU1263
 4179 0cf2 002B     		cmp	r3, #0
 4180 0cf4 3FF4DBAB 		beq	.L551
 4181 0cf8 FFF7BEBB 		b	.L435
 4182              	.L619:
 4183              		.align	2
 4184              	.L618:
 4185 0cfc CDCCCCCC 		.word	-858993459
 4186 0d00 00000000 		.word	pow10.0
 4187              	.LBE217:
 4188              	.LBE257:
 4189              		.cfi_endproc
 4190              	.LFE11:
 4192              		.section	.text.printf_,"ax",%progbits
 4193              		.align	1
 4194              		.p2align 2,,3
 4195              		.global	printf_
 4196              		.syntax unified
 4197              		.thumb
 4198              		.thumb_func
 4200              	printf_:
 4201              	.LVL487:
 4202              	.LFB12:
 716:printf.c      **** 
 717:printf.c      **** 
 718:printf.c      **** ///////////////////////////////////////////////////////////////////////////////
 719:printf.c      **** 
 720:printf.c      **** int printf_(const char* format, ...)
 721:printf.c      **** {
 4203              		.loc 1 721 1 is_stmt 1 view -0
 4204              		.cfi_startproc
 4205              		@ args = 4, pretend = 16, frame = 8
 4206              		@ frame_needed = 0, uses_anonymous_args = 1
 722:printf.c      ****   va_list va;
 4207              		.loc 1 722 3 view .LVU1265
 723:printf.c      ****   va_start(va, format);
 4208              		.loc 1 723 3 view .LVU1266
 721:printf.c      ****   va_list va;
 4209              		.loc 1 721 1 is_stmt 0 view .LVU1267
 4210 0000 0FB4     		push	{r0, r1, r2, r3}
 4211              		.cfi_def_cfa_offset 16
 4212              		.cfi_offset 0, -16
 4213              		.cfi_offset 1, -12
 4214              		.cfi_offset 2, -8
 4215              		.cfi_offset 3, -4
 4216 0002 10B5     		push	{r4, lr}
 4217              		.cfi_def_cfa_offset 24
 4218              		.cfi_offset 4, -24
 4219              		.cfi_offset 14, -20
 4220 0004 84B0     		sub	sp, sp, #16
 4221              		.cfi_def_cfa_offset 40
 721:printf.c      ****   va_list va;
 4222              		.loc 1 721 1 view .LVU1268
 4223 0006 06AC     		add	r4, sp, #24
 724:printf.c      ****   char buffer[1];
 725:printf.c      ****   const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 4224              		.loc 1 725 19 view .LVU1269
 4225 0008 4FF0FF32 		mov	r2, #-1
 721:printf.c      ****   va_list va;
 4226              		.loc 1 721 1 view .LVU1270
 4227 000c 54F8043B 		ldr	r3, [r4], #4
 4228              		.loc 1 725 19 view .LVU1271
 4229 0010 0094     		str	r4, [sp]
 4230 0012 02A9     		add	r1, sp, #8
 4231 0014 0448     		ldr	r0, .L622
 723:printf.c      ****   char buffer[1];
 4232              		.loc 1 723 3 view .LVU1272
 4233 0016 0394     		str	r4, [sp, #12]
 724:printf.c      ****   char buffer[1];
 4234              		.loc 1 724 3 is_stmt 1 view .LVU1273
 4235              		.loc 1 725 3 view .LVU1274
 4236              		.loc 1 725 19 is_stmt 0 view .LVU1275
 4237 0018 FFF7FEFF 		bl	_vsnprintf
 4238              	.LVL488:
 726:printf.c      ****   va_end(va);
 4239              		.loc 1 726 3 is_stmt 1 view .LVU1276
 727:printf.c      ****   return ret;
 4240              		.loc 1 727 3 view .LVU1277
 728:printf.c      **** }
 4241              		.loc 1 728 1 is_stmt 0 view .LVU1278
 4242 001c 04B0     		add	sp, sp, #16
 4243              		.cfi_def_cfa_offset 24
 4244              		@ sp needed
 4245 001e BDE81040 		pop	{r4, lr}
 4246              		.cfi_restore 14
 4247              		.cfi_restore 4
 4248              		.cfi_def_cfa_offset 16
 4249 0022 04B0     		add	sp, sp, #16
 4250              		.cfi_restore 3
 4251              		.cfi_restore 2
 4252              		.cfi_restore 1
 4253              		.cfi_restore 0
 4254              		.cfi_def_cfa_offset 0
 4255 0024 7047     		bx	lr
 4256              	.L623:
 4257 0026 00BF     		.align	2
 4258              	.L622:
 4259 0028 00000000 		.word	_out_char
 4260              		.cfi_endproc
 4261              	.LFE12:
 4263              		.section	.text.sprintf_,"ax",%progbits
 4264              		.align	1
 4265              		.p2align 2,,3
 4266              		.global	sprintf_
 4267              		.syntax unified
 4268              		.thumb
 4269              		.thumb_func
 4271              	sprintf_:
 4272              	.LVL489:
 4273              	.LFB13:
 729:printf.c      **** 
 730:printf.c      **** 
 731:printf.c      **** int sprintf_(char* buffer, const char* format, ...)
 732:printf.c      **** {
 4274              		.loc 1 732 1 is_stmt 1 view -0
 4275              		.cfi_startproc
 4276              		@ args = 4, pretend = 12, frame = 8
 4277              		@ frame_needed = 0, uses_anonymous_args = 1
 733:printf.c      ****   va_list va;
 4278              		.loc 1 733 3 view .LVU1280
 734:printf.c      ****   va_start(va, format);
 4279              		.loc 1 734 3 view .LVU1281
 732:printf.c      ****   va_list va;
 4280              		.loc 1 732 1 is_stmt 0 view .LVU1282
 4281 0000 0EB4     		push	{r1, r2, r3}
 4282              		.cfi_def_cfa_offset 12
 4283              		.cfi_offset 1, -12
 4284              		.cfi_offset 2, -8
 4285              		.cfi_offset 3, -4
 4286 0002 10B5     		push	{r4, lr}
 4287              		.cfi_def_cfa_offset 20
 4288              		.cfi_offset 4, -20
 4289              		.cfi_offset 14, -16
 4290 0004 85B0     		sub	sp, sp, #20
 4291              		.cfi_def_cfa_offset 40
 732:printf.c      ****   va_list va;
 4292              		.loc 1 732 1 view .LVU1283
 4293 0006 07AC     		add	r4, sp, #28
 4294 0008 0146     		mov	r1, r0
 4295 000a 54F8043B 		ldr	r3, [r4], #4
 735:printf.c      ****   const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 4296              		.loc 1 735 19 view .LVU1284
 4297 000e 0094     		str	r4, [sp]
 4298 0010 4FF0FF32 		mov	r2, #-1
 4299 0014 0448     		ldr	r0, .L626
 4300              	.LVL490:
 734:printf.c      ****   va_start(va, format);
 4301              		.loc 1 734 3 view .LVU1285
 4302 0016 0394     		str	r4, [sp, #12]
 4303              		.loc 1 735 3 is_stmt 1 view .LVU1286
 4304              		.loc 1 735 19 is_stmt 0 view .LVU1287
 4305 0018 FFF7FEFF 		bl	_vsnprintf
 4306              	.LVL491:
 736:printf.c      ****   va_end(va);
 4307              		.loc 1 736 3 is_stmt 1 view .LVU1288
 737:printf.c      ****   return ret;
 4308              		.loc 1 737 3 view .LVU1289
 738:printf.c      **** }
 4309              		.loc 1 738 1 is_stmt 0 view .LVU1290
 4310 001c 05B0     		add	sp, sp, #20
 4311              		.cfi_def_cfa_offset 20
 4312              		@ sp needed
 4313 001e BDE81040 		pop	{r4, lr}
 4314              		.cfi_restore 14
 4315              		.cfi_restore 4
 4316              		.cfi_def_cfa_offset 12
 4317 0022 03B0     		add	sp, sp, #12
 4318              		.cfi_restore 3
 4319              		.cfi_restore 2
 4320              		.cfi_restore 1
 4321              		.cfi_def_cfa_offset 0
 4322 0024 7047     		bx	lr
 4323              	.L627:
 4324 0026 00BF     		.align	2
 4325              	.L626:
 4326 0028 00000000 		.word	_out_buffer
 4327              		.cfi_endproc
 4328              	.LFE13:
 4330              		.section	.text.snprintf_,"ax",%progbits
 4331              		.align	1
 4332              		.p2align 2,,3
 4333              		.global	snprintf_
 4334              		.syntax unified
 4335              		.thumb
 4336              		.thumb_func
 4338              	snprintf_:
 4339              	.LVL492:
 4340              	.LFB14:
 739:printf.c      **** 
 740:printf.c      **** 
 741:printf.c      **** int snprintf_(char* buffer, size_t count, const char* format, ...)
 742:printf.c      **** {
 4341              		.loc 1 742 1 is_stmt 1 view -0
 4342              		.cfi_startproc
 4343              		@ args = 4, pretend = 8, frame = 8
 4344              		@ frame_needed = 0, uses_anonymous_args = 1
 743:printf.c      ****   va_list va;
 4345              		.loc 1 743 3 view .LVU1292
 744:printf.c      ****   va_start(va, format);
 4346              		.loc 1 744 3 view .LVU1293
 742:printf.c      ****   va_list va;
 4347              		.loc 1 742 1 is_stmt 0 view .LVU1294
 4348 0000 0CB4     		push	{r2, r3}
 4349              		.cfi_def_cfa_offset 8
 4350              		.cfi_offset 2, -8
 4351              		.cfi_offset 3, -4
 4352 0002 10B5     		push	{r4, lr}
 4353              		.cfi_def_cfa_offset 16
 4354              		.cfi_offset 4, -16
 4355              		.cfi_offset 14, -12
 4356 0004 84B0     		sub	sp, sp, #16
 4357              		.cfi_def_cfa_offset 32
 742:printf.c      ****   va_list va;
 4358              		.loc 1 742 1 view .LVU1295
 4359 0006 06AC     		add	r4, sp, #24
 4360 0008 8446     		mov	ip, r0
 4361 000a 54F8043B 		ldr	r3, [r4], #4
 745:printf.c      ****   const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 4362              		.loc 1 745 19 view .LVU1296
 4363 000e 0094     		str	r4, [sp]
 742:printf.c      ****   va_list va;
 4364              		.loc 1 742 1 view .LVU1297
 4365 0010 0A46     		mov	r2, r1
 4366              		.loc 1 745 19 view .LVU1298
 4367 0012 0548     		ldr	r0, .L630
 4368              	.LVL493:
 744:printf.c      ****   va_start(va, format);
 4369              		.loc 1 744 3 view .LVU1299
 4370 0014 0394     		str	r4, [sp, #12]
 4371              		.loc 1 745 3 is_stmt 1 view .LVU1300
 4372              		.loc 1 745 19 is_stmt 0 view .LVU1301
 4373 0016 6146     		mov	r1, ip
 4374              	.LVL494:
 4375              		.loc 1 745 19 view .LVU1302
 4376 0018 FFF7FEFF 		bl	_vsnprintf
 4377              	.LVL495:
 746:printf.c      ****   va_end(va);
 4378              		.loc 1 746 3 is_stmt 1 view .LVU1303
 747:printf.c      ****   return ret;
 4379              		.loc 1 747 3 view .LVU1304
 748:printf.c      **** }
 4380              		.loc 1 748 1 is_stmt 0 view .LVU1305
 4381 001c 04B0     		add	sp, sp, #16
 4382              		.cfi_def_cfa_offset 16
 4383              		@ sp needed
 4384 001e BDE81040 		pop	{r4, lr}
 4385              		.cfi_restore 14
 4386              		.cfi_restore 4
 4387              		.cfi_def_cfa_offset 8
 4388 0022 02B0     		add	sp, sp, #8
 4389              		.cfi_restore 3
 4390              		.cfi_restore 2
 4391              		.cfi_def_cfa_offset 0
 4392 0024 7047     		bx	lr
 4393              	.L631:
 4394 0026 00BF     		.align	2
 4395              	.L630:
 4396 0028 00000000 		.word	_out_buffer
 4397              		.cfi_endproc
 4398              	.LFE14:
 4400              		.section	.text.vsnprintf_,"ax",%progbits
 4401              		.align	1
 4402              		.p2align 2,,3
 4403              		.global	vsnprintf_
 4404              		.syntax unified
 4405              		.thumb
 4406              		.thumb_func
 4408              	vsnprintf_:
 4409              	.LVL496:
 4410              	.LFB15:
 749:printf.c      **** 
 750:printf.c      **** 
 751:printf.c      **** int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
 752:printf.c      **** {
 4411              		.loc 1 752 1 is_stmt 1 view -0
 4412              		.cfi_startproc
 4413              		@ args = 0, pretend = 0, frame = 0
 4414              		@ frame_needed = 0, uses_anonymous_args = 0
 753:printf.c      ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 4415              		.loc 1 753 3 view .LVU1307
 752:printf.c      ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 4416              		.loc 1 752 1 is_stmt 0 view .LVU1308
 4417 0000 00B5     		push	{lr}
 4418              		.cfi_def_cfa_offset 4
 4419              		.cfi_offset 14, -4
 4420 0002 83B0     		sub	sp, sp, #12
 4421              		.cfi_def_cfa_offset 16
 752:printf.c      ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 4422              		.loc 1 752 1 view .LVU1309
 4423 0004 8446     		mov	ip, r0
 4424              		.loc 1 753 10 view .LVU1310
 4425 0006 0093     		str	r3, [sp]
 4426 0008 0448     		ldr	r0, .L634
 4427              	.LVL497:
 4428              		.loc 1 753 10 view .LVU1311
 4429 000a 1346     		mov	r3, r2
 4430              	.LVL498:
 4431              		.loc 1 753 10 view .LVU1312
 4432 000c 0A46     		mov	r2, r1
 4433              	.LVL499:
 4434              		.loc 1 753 10 view .LVU1313
 4435 000e 6146     		mov	r1, ip
 4436              	.LVL500:
 4437              		.loc 1 753 10 view .LVU1314
 4438 0010 FFF7FEFF 		bl	_vsnprintf
 4439              	.LVL501:
 754:printf.c      **** }
 4440              		.loc 1 754 1 view .LVU1315
 4441 0014 03B0     		add	sp, sp, #12
 4442              		.cfi_def_cfa_offset 4
 4443              		@ sp needed
 4444 0016 5DF804FB 		ldr	pc, [sp], #4
 4445              	.L635:
 4446 001a 00BF     		.align	2
 4447              	.L634:
 4448 001c 00000000 		.word	_out_buffer
 4449              		.cfi_endproc
 4450              	.LFE15:
 4452              		.section	.text.fctprintf,"ax",%progbits
 4453              		.align	1
 4454              		.p2align 2,,3
 4455              		.global	fctprintf
 4456              		.syntax unified
 4457              		.thumb
 4458              		.thumb_func
 4460              	fctprintf:
 4461              	.LVL502:
 4462              	.LFB16:
 755:printf.c      **** 
 756:printf.c      **** 
 757:printf.c      **** int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
 758:printf.c      **** {
 4463              		.loc 1 758 1 is_stmt 1 view -0
 4464              		.cfi_startproc
 4465              		@ args = 4, pretend = 8, frame = 16
 4466              		@ frame_needed = 0, uses_anonymous_args = 1
 759:printf.c      ****   va_list va;
 4467              		.loc 1 759 3 view .LVU1317
 760:printf.c      ****   va_start(va, format);
 4468              		.loc 1 760 3 view .LVU1318
 758:printf.c      ****   va_list va;
 4469              		.loc 1 758 1 is_stmt 0 view .LVU1319
 4470 0000 0CB4     		push	{r2, r3}
 4471              		.cfi_def_cfa_offset 8
 4472              		.cfi_offset 2, -8
 4473              		.cfi_offset 3, -4
 4474 0002 70B5     		push	{r4, r5, r6, lr}
 4475              		.cfi_def_cfa_offset 24
 4476              		.cfi_offset 4, -24
 4477              		.cfi_offset 5, -20
 4478              		.cfi_offset 6, -16
 4479              		.cfi_offset 14, -12
 4480 0004 86B0     		sub	sp, sp, #24
 4481              		.cfi_def_cfa_offset 48
 758:printf.c      ****   va_list va;
 4482              		.loc 1 758 1 view .LVU1320
 4483 0006 0AAC     		add	r4, sp, #40
 4484 0008 0646     		mov	r6, r0
 4485 000a 54F8043B 		ldr	r3, [r4], #4
 761:printf.c      ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 762:printf.c      ****   const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 4486              		.loc 1 762 19 view .LVU1321
 4487 000e 0094     		str	r4, [sp]
 758:printf.c      ****   va_list va;
 4488              		.loc 1 758 1 view .LVU1322
 4489 0010 0D46     		mov	r5, r1
 4490              		.loc 1 762 19 view .LVU1323
 4491 0012 4FF0FF32 		mov	r2, #-1
 4492 0016 04A9     		add	r1, sp, #16
 4493              	.LVL503:
 4494              		.loc 1 762 19 view .LVU1324
 4495 0018 0548     		ldr	r0, .L638
 4496              	.LVL504:
 761:printf.c      ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 4497              		.loc 1 761 27 view .LVU1325
 4498 001a 0595     		str	r5, [sp, #20]
 4499              		.loc 1 762 3 is_stmt 1 view .LVU1326
 761:printf.c      ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 4500              		.loc 1 761 27 is_stmt 0 view .LVU1327
 4501 001c CDE90346 		strd	r4, r6, [sp, #12]
 4502              		.loc 1 762 19 view .LVU1328
 4503 0020 FFF7FEFF 		bl	_vsnprintf
 4504              	.LVL505:
 763:printf.c      ****   va_end(va);
 4505              		.loc 1 763 3 is_stmt 1 view .LVU1329
 764:printf.c      ****   return ret;
 4506              		.loc 1 764 3 view .LVU1330
 765:printf.c      **** }
 4507              		.loc 1 765 1 is_stmt 0 view .LVU1331
 4508 0024 06B0     		add	sp, sp, #24
 4509              		.cfi_def_cfa_offset 24
 4510              		@ sp needed
 4511 0026 BDE87040 		pop	{r4, r5, r6, lr}
 4512              		.cfi_restore 14
 4513              		.cfi_restore 6
 4514              		.cfi_restore 5
 4515              		.cfi_restore 4
 4516              		.cfi_def_cfa_offset 8
 4517              	.LVL506:
 4518              		.loc 1 765 1 view .LVU1332
 4519 002a 02B0     		add	sp, sp, #8
 4520              		.cfi_restore 3
 4521              		.cfi_restore 2
 4522              		.cfi_def_cfa_offset 0
 4523 002c 7047     		bx	lr
 4524              	.L639:
 4525 002e 00BF     		.align	2
 4526              	.L638:
 4527 0030 00000000 		.word	_out_fct
 4528              		.cfi_endproc
 4529              	.LFE16:
 4531              		.section	.rodata.pow10.0,"a"
 4532              		.align	3
 4535              	pow10.0:
 4536 0000 00000000 		.word	0
 4537 0004 0000F03F 		.word	1072693248
 4538 0008 00000000 		.word	0
 4539 000c 00002440 		.word	1076101120
 4540 0010 00000000 		.word	0
 4541 0014 00005940 		.word	1079574528
 4542 0018 00000000 		.word	0
 4543 001c 00408F40 		.word	1083129856
 4544 0020 00000000 		.word	0
 4545 0024 0088C340 		.word	1086556160
 4546 0028 00000000 		.word	0
 4547 002c 006AF840 		.word	1090021888
 4548 0030 00000000 		.word	0
 4549 0034 80842E41 		.word	1093567616
 4550 0038 00000000 		.word	0
 4551 003c D0126341 		.word	1097011920
 4552 0040 00000000 		.word	0
 4553 0044 84D79741 		.word	1100470148
 4554 0048 00000000 		.word	0
 4555 004c 65CDCD41 		.word	1104006501
 4556              		.text
 4557              	.Letext0:
 4558              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 4559              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdarg.h"
 4560              		.file 4 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 4561              		.file 5 "<built-in>"
 4562              		.file 6 "printf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 printf.c
     /tmp/cczdpYpa.s:21     .text._out_buffer:00000000 $t
     /tmp/cczdpYpa.s:27     .text._out_buffer:00000000 _out_buffer
     /tmp/cczdpYpa.s:48     .text._out_null:00000000 $t
     /tmp/cczdpYpa.s:54     .text._out_null:00000000 _out_null
     /tmp/cczdpYpa.s:72     .text._ntoa_format:00000000 $t
     /tmp/cczdpYpa.s:78     .text._ntoa_format:00000000 _ntoa_format
     /tmp/cczdpYpa.s:1023   .text._out_char:00000000 $t
     /tmp/cczdpYpa.s:1029   .text._out_char:00000000 _out_char
     /tmp/cczdpYpa.s:1054   .text._out_fct:00000000 $t
     /tmp/cczdpYpa.s:1060   .text._out_fct:00000000 _out_fct
     /tmp/cczdpYpa.s:1106   .text._vsnprintf:00000000 $t
     /tmp/cczdpYpa.s:1112   .text._vsnprintf:00000000 _vsnprintf
     /tmp/cczdpYpa.s:1207   .text._vsnprintf:00000060 $d
     /tmp/cczdpYpa.s:1268   .text._vsnprintf:0000009a $d
     /tmp/cczdpYpa.s:1288   .text._vsnprintf:000000c0 $t
     /tmp/cczdpYpa.s:1383   .text._vsnprintf:00000108 $d
     /tmp/cczdpYpa.s:1416   .text._vsnprintf:0000014a $t
     /tmp/cczdpYpa.s:1737   .text._vsnprintf:00000274 $d
     /tmp/cczdpYpa.s:1741   .text._vsnprintf:00000278 $t
     /tmp/cczdpYpa.s:2654   .text._vsnprintf:00000678 $d
     /tmp/cczdpYpa.s:2666   .text._vsnprintf:00000690 $t
     /tmp/cczdpYpa.s:3387   .text._vsnprintf:000009b0 $d
     /tmp/cczdpYpa.s:3400   .text._vsnprintf:000009c0 $t
     /tmp/cczdpYpa.s:4185   .text._vsnprintf:00000cfc $d
     /tmp/cczdpYpa.s:4535   .rodata.pow10.0:00000000 pow10.0
     /tmp/cczdpYpa.s:4193   .text.printf_:00000000 $t
     /tmp/cczdpYpa.s:4200   .text.printf_:00000000 printf_
     /tmp/cczdpYpa.s:4259   .text.printf_:00000028 $d
     /tmp/cczdpYpa.s:4264   .text.sprintf_:00000000 $t
     /tmp/cczdpYpa.s:4271   .text.sprintf_:00000000 sprintf_
     /tmp/cczdpYpa.s:4326   .text.sprintf_:00000028 $d
     /tmp/cczdpYpa.s:4331   .text.snprintf_:00000000 $t
     /tmp/cczdpYpa.s:4338   .text.snprintf_:00000000 snprintf_
     /tmp/cczdpYpa.s:4396   .text.snprintf_:00000028 $d
     /tmp/cczdpYpa.s:4401   .text.vsnprintf_:00000000 $t
     /tmp/cczdpYpa.s:4408   .text.vsnprintf_:00000000 vsnprintf_
     /tmp/cczdpYpa.s:4448   .text.vsnprintf_:0000001c $d
     /tmp/cczdpYpa.s:4453   .text.fctprintf:00000000 $t
     /tmp/cczdpYpa.s:4460   .text.fctprintf:00000000 fctprintf
     /tmp/cczdpYpa.s:4527   .text.fctprintf:00000030 $d
     /tmp/cczdpYpa.s:4532   .rodata.pow10.0:00000000 $d
     /tmp/cczdpYpa.s:1224   .text._vsnprintf:00000071 $d
     /tmp/cczdpYpa.s:1224   .text._vsnprintf:00000072 $t
                           .group:00000000 wm4.0.6f27a92f71ef72f43351aaf5909357e4
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
                           .group:00000000 wm4.stdint.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:00000000 wm4.stdarg.h.31.f7f4f3bfddce9ed034956076d59396f7
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.printf.h.60.4e905941388f8572eb1bb13f71697bea

UNDEFINED SYMBOLS
_putchar
__aeabi_uldivmod
__aeabi_dcmpeq
__aeabi_dcmplt
__aeabi_dsub
__aeabi_d2iz
__aeabi_i2d
__aeabi_dmul
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dcmpgt
__aeabi_dcmpge
